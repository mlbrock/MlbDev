// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	ODBC Wrapper Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the GetInfoTypeDatumList class.

	Revision History	:	2001-10-01 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2001 - 2014.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <OdbcWrapper/OdbcWrapper.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace OdbcWrapper {

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumList::GetInfoTypeDatumList()
	:descriptor_set_()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumList::~GetInfoTypeDatumList()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumList &GetInfoTypeDatumList::swap(GetInfoTypeDatumList &other)
{
	descriptor_set_.swap(other.descriptor_set_);

	return(*this);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIter GetInfoTypeDatumList::Begin()
{
	return(descriptor_set_.begin());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIterC GetInfoTypeDatumList::Begin() const
{
	return(descriptor_set_.begin());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIter GetInfoTypeDatumList::End()
{
	return(descriptor_set_.end());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIterC GetInfoTypeDatumList::End() const
{
	return(descriptor_set_.end());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIter GetInfoTypeDatumList::Find(SQLUSMALLINT info_type)
{
	return(descriptor_set_.find(GetInfoTypeDatum(info_type)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumSetIterC GetInfoTypeDatumList::Find(
	SQLUSMALLINT info_type) const
{
	return(descriptor_set_.find(GetInfoTypeDatum(info_type)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool GetInfoTypeDatumList::IsInSet(SQLUSMALLINT info_type) const
{
	return(Find(info_type) != descriptor_set_.end());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool GetInfoTypeDatumList::CheckIsInSet(SQLUSMALLINT info_type) const
{
	if (!IsInSet(info_type))
		ThrowNotLocated(info_type);

	return(true);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatum &GetInfoTypeDatumList::Get(SQLUSMALLINT info_type,
	GetInfoTypeDatum &out_datum) const
{
	GetInfoTypeDatumSetIterC iter(Find(info_type));

	if (iter == descriptor_set_.end())
		ThrowNotLocated(info_type);

	return(GetInfoTypeDatum(*iter).swap(out_datum));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatum GetInfoTypeDatumList::Get(SQLUSMALLINT info_type) const
{
	GetInfoTypeDatum out_datum;

	return(Get(info_type, out_datum));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void GetInfoTypeDatumList::InsertOrUpdate(const GetInfoTypeDatum &new_item)
{
	descriptor_set_.insert(new_item);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void GetInfoTypeDatumList::GetInfoData(SQLHDBC ConnectionHandle)
{
	Create(ConnectionHandle, *this);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumList &GetInfoTypeDatumList::Create(SQLHDBC ConnectionHandle,
	GetInfoTypeDatumList &out_datum)
{
	unsigned int               count_1;
	unsigned int               raw_count;
	const GetInfoTypeDatumRaw *raw_list;
	GetInfoTypeDatumList       tmp_datum;

	raw_count = GetInfoTypeDatumRaw::GetInfoTypeRawData(raw_list);

	for (count_1 = 0; count_1 < raw_count; ++count_1) {
		if (!raw_list[count_1].is_handle_2way_) {
			GetInfoTypeDatum info_value;
			GetInfo(ConnectionHandle,
				raw_list + count_1, info_value);
			tmp_datum.InsertOrUpdate(info_value);
		}
	}

	return(out_datum.swap(tmp_datum));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
GetInfoTypeDatumList GetInfoTypeDatumList::Create(SQLHDBC ConnectionHandle)
{
	GetInfoTypeDatumList out_datum;

	return(Create(ConnectionHandle, out_datum));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void GetInfoTypeDatumList::ThrowNotLocated(SQLUSMALLINT info_type) const
{
	throw OdbcException("Unable to locate the specified '::SQLGetInfo()' "
		"information type (" + MLB::Utility::AnyToString(info_type) + ").");
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace OdbcWrapper

} // namespace MLB

