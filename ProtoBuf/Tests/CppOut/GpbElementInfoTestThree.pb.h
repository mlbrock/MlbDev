// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GpbElementInfoTestThree.proto

#ifndef PROTOBUF_GpbElementInfoTestThree_2eproto__INCLUDED
#define PROTOBUF_GpbElementInfoTestThree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GpbElementInfoTestThree {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

class PhoneNumber;
class PersonOne;
class AddressBookOne;
class PersonTwo;
class AddressBookTwo;

enum PhoneType {
  MOBILE = 0,
  HOME = 1,
  WORK = 2
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = MOBILE;
const PhoneType PhoneType_MAX = WORK;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class PhoneNumber : public ::google::protobuf::Message {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumber& default_instance();

  void Swap(PhoneNumber* other);

  // implements Message ----------------------------------------------

  PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::GpbElementInfoTestThree::PhoneType type() const;
  inline void set_type(::GpbElementInfoTestThree::PhoneType value);

  // @@protoc_insertion_point(class_scope:GpbElementInfoTestThree.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int type_;
  friend void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

  void InitAsDefaultInstance();
  static PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class PersonOne : public ::google::protobuf::Message {
 public:
  PersonOne();
  virtual ~PersonOne();

  PersonOne(const PersonOne& from);

  inline PersonOne& operator=(const PersonOne& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonOne& default_instance();

  void Swap(PersonOne* other);

  // implements Message ----------------------------------------------

  PersonOne* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonOne& from);
  void MergeFrom(const PersonOne& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::GpbElementInfoTestThree::PhoneNumber& phone(int index) const;
  inline ::GpbElementInfoTestThree::PhoneNumber* mutable_phone(int index);
  inline ::GpbElementInfoTestThree::PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >*
      mutable_phone();

  // optional int32 different_datum = 5;
  inline bool has_different_datum() const;
  inline void clear_different_datum();
  static const int kDifferentDatumFieldNumber = 5;
  inline ::google::protobuf::int32 different_datum() const;
  inline void set_different_datum(::google::protobuf::int32 value);

  // optional int32 name_different_1 = 6;
  inline bool has_name_different_1() const;
  inline void clear_name_different_1();
  static const int kNameDifferent1FieldNumber = 6;
  inline ::google::protobuf::int32 name_different_1() const;
  inline void set_name_different_1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GpbElementInfoTestThree.PersonOne)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_different_datum();
  inline void clear_has_different_datum();
  inline void set_has_name_different_1();
  inline void clear_has_name_different_1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 different_datum_;
  ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber > phone_;
  ::google::protobuf::int32 name_different_1_;
  friend void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

  void InitAsDefaultInstance();
  static PersonOne* default_instance_;
};
// -------------------------------------------------------------------

class AddressBookOne : public ::google::protobuf::Message {
 public:
  AddressBookOne();
  virtual ~AddressBookOne();

  AddressBookOne(const AddressBookOne& from);

  inline AddressBookOne& operator=(const AddressBookOne& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBookOne& default_instance();

  void Swap(AddressBookOne* other);

  // implements Message ----------------------------------------------

  AddressBookOne* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBookOne& from);
  void MergeFrom(const AddressBookOne& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GpbElementInfoTestThree.PersonOne person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::GpbElementInfoTestThree::PersonOne& person(int index) const;
  inline ::GpbElementInfoTestThree::PersonOne* mutable_person(int index);
  inline ::GpbElementInfoTestThree::PersonOne* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonOne >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonOne >*
      mutable_person();

  // @@protoc_insertion_point(class_scope:GpbElementInfoTestThree.AddressBookOne)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonOne > person_;
  friend void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

  void InitAsDefaultInstance();
  static AddressBookOne* default_instance_;
};
// -------------------------------------------------------------------

class PersonTwo : public ::google::protobuf::Message {
 public:
  PersonTwo();
  virtual ~PersonTwo();

  PersonTwo(const PersonTwo& from);

  inline PersonTwo& operator=(const PersonTwo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonTwo& default_instance();

  void Swap(PersonTwo* other);

  // implements Message ----------------------------------------------

  PersonTwo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonTwo& from);
  void MergeFrom(const PersonTwo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::GpbElementInfoTestThree::PhoneNumber& phone(int index) const;
  inline ::GpbElementInfoTestThree::PhoneNumber* mutable_phone(int index);
  inline ::GpbElementInfoTestThree::PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >*
      mutable_phone();

  // optional uint32 different_datum = 5;
  inline bool has_different_datum() const;
  inline void clear_different_datum();
  static const int kDifferentDatumFieldNumber = 5;
  inline ::google::protobuf::uint32 different_datum() const;
  inline void set_different_datum(::google::protobuf::uint32 value);

  // optional int32 name_different_2 = 6;
  inline bool has_name_different_2() const;
  inline void clear_name_different_2();
  static const int kNameDifferent2FieldNumber = 6;
  inline ::google::protobuf::int32 name_different_2() const;
  inline void set_name_different_2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GpbElementInfoTestThree.PersonTwo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_different_datum();
  inline void clear_has_different_datum();
  inline void set_has_name_different_2();
  inline void clear_has_name_different_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 different_datum_;
  ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber > phone_;
  ::google::protobuf::int32 name_different_2_;
  friend void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

  void InitAsDefaultInstance();
  static PersonTwo* default_instance_;
};
// -------------------------------------------------------------------

class AddressBookTwo : public ::google::protobuf::Message {
 public:
  AddressBookTwo();
  virtual ~AddressBookTwo();

  AddressBookTwo(const AddressBookTwo& from);

  inline AddressBookTwo& operator=(const AddressBookTwo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBookTwo& default_instance();

  void Swap(AddressBookTwo* other);

  // implements Message ----------------------------------------------

  AddressBookTwo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBookTwo& from);
  void MergeFrom(const AddressBookTwo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GpbElementInfoTestThree.PersonTwo person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::GpbElementInfoTestThree::PersonTwo& person(int index) const;
  inline ::GpbElementInfoTestThree::PersonTwo* mutable_person(int index);
  inline ::GpbElementInfoTestThree::PersonTwo* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonTwo >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonTwo >*
      mutable_person();

  // @@protoc_insertion_point(class_scope:GpbElementInfoTestThree.AddressBookTwo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonTwo > person_;
  friend void  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto();
  friend void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto();

  void InitAsDefaultInstance();
  static AddressBookTwo* default_instance_;
};
// ===================================================================


// ===================================================================

// PhoneNumber

// required string number = 1;
inline bool PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PhoneNumber.number)
  return *number_;
}
inline void PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:GpbElementInfoTestThree.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GpbElementInfoTestThree.PhoneNumber.number)
}
inline ::std::string* PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PhoneNumber.number)
  return number_;
}
inline ::std::string* PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GpbElementInfoTestThree.PhoneNumber.number)
}

// optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
inline bool PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::GpbElementInfoTestThree::PhoneType PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PhoneNumber.type)
  return static_cast< ::GpbElementInfoTestThree::PhoneType >(type_);
}
inline void PhoneNumber::set_type(::GpbElementInfoTestThree::PhoneType value) {
  assert(::GpbElementInfoTestThree::PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PhoneNumber.type)
}

// -------------------------------------------------------------------

// PersonOne

// required string name = 1;
inline bool PersonOne::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonOne::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonOne::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonOne::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PersonOne::name() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.name)
  return *name_;
}
inline void PersonOne::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonOne.name)
}
inline void PersonOne::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GpbElementInfoTestThree.PersonOne.name)
}
inline void PersonOne::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GpbElementInfoTestThree.PersonOne.name)
}
inline ::std::string* PersonOne::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonOne.name)
  return name_;
}
inline ::std::string* PersonOne::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonOne::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GpbElementInfoTestThree.PersonOne.name)
}

// required int32 id = 2;
inline bool PersonOne::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonOne::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonOne::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonOne::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PersonOne::id() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.id)
  return id_;
}
inline void PersonOne::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonOne.id)
}

// optional string email = 3;
inline bool PersonOne::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonOne::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonOne::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonOne::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PersonOne::email() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.email)
  return *email_;
}
inline void PersonOne::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonOne.email)
}
inline void PersonOne::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:GpbElementInfoTestThree.PersonOne.email)
}
inline void PersonOne::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GpbElementInfoTestThree.PersonOne.email)
}
inline ::std::string* PersonOne::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonOne.email)
  return email_;
}
inline ::std::string* PersonOne::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonOne::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GpbElementInfoTestThree.PersonOne.email)
}

// repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
inline int PersonOne::phone_size() const {
  return phone_.size();
}
inline void PersonOne::clear_phone() {
  phone_.Clear();
}
inline const ::GpbElementInfoTestThree::PhoneNumber& PersonOne::phone(int index) const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.phone)
  return phone_.Get(index);
}
inline ::GpbElementInfoTestThree::PhoneNumber* PersonOne::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonOne.phone)
  return phone_.Mutable(index);
}
inline ::GpbElementInfoTestThree::PhoneNumber* PersonOne::add_phone() {
  // @@protoc_insertion_point(field_add:GpbElementInfoTestThree.PersonOne.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >&
PersonOne::phone() const {
  // @@protoc_insertion_point(field_list:GpbElementInfoTestThree.PersonOne.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >*
PersonOne::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:GpbElementInfoTestThree.PersonOne.phone)
  return &phone_;
}

// optional int32 different_datum = 5;
inline bool PersonOne::has_different_datum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersonOne::set_has_different_datum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersonOne::clear_has_different_datum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersonOne::clear_different_datum() {
  different_datum_ = 0;
  clear_has_different_datum();
}
inline ::google::protobuf::int32 PersonOne::different_datum() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.different_datum)
  return different_datum_;
}
inline void PersonOne::set_different_datum(::google::protobuf::int32 value) {
  set_has_different_datum();
  different_datum_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonOne.different_datum)
}

// optional int32 name_different_1 = 6;
inline bool PersonOne::has_name_different_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersonOne::set_has_name_different_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersonOne::clear_has_name_different_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersonOne::clear_name_different_1() {
  name_different_1_ = 0;
  clear_has_name_different_1();
}
inline ::google::protobuf::int32 PersonOne::name_different_1() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonOne.name_different_1)
  return name_different_1_;
}
inline void PersonOne::set_name_different_1(::google::protobuf::int32 value) {
  set_has_name_different_1();
  name_different_1_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonOne.name_different_1)
}

// -------------------------------------------------------------------

// AddressBookOne

// repeated .GpbElementInfoTestThree.PersonOne person = 1;
inline int AddressBookOne::person_size() const {
  return person_.size();
}
inline void AddressBookOne::clear_person() {
  person_.Clear();
}
inline const ::GpbElementInfoTestThree::PersonOne& AddressBookOne::person(int index) const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.AddressBookOne.person)
  return person_.Get(index);
}
inline ::GpbElementInfoTestThree::PersonOne* AddressBookOne::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.AddressBookOne.person)
  return person_.Mutable(index);
}
inline ::GpbElementInfoTestThree::PersonOne* AddressBookOne::add_person() {
  // @@protoc_insertion_point(field_add:GpbElementInfoTestThree.AddressBookOne.person)
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonOne >&
AddressBookOne::person() const {
  // @@protoc_insertion_point(field_list:GpbElementInfoTestThree.AddressBookOne.person)
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonOne >*
AddressBookOne::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:GpbElementInfoTestThree.AddressBookOne.person)
  return &person_;
}

// -------------------------------------------------------------------

// PersonTwo

// required string name = 1;
inline bool PersonTwo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonTwo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonTwo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonTwo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PersonTwo::name() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.name)
  return *name_;
}
inline void PersonTwo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonTwo.name)
}
inline void PersonTwo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GpbElementInfoTestThree.PersonTwo.name)
}
inline void PersonTwo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GpbElementInfoTestThree.PersonTwo.name)
}
inline ::std::string* PersonTwo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonTwo.name)
  return name_;
}
inline ::std::string* PersonTwo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonTwo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GpbElementInfoTestThree.PersonTwo.name)
}

// required int32 id = 2;
inline bool PersonTwo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonTwo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonTwo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonTwo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PersonTwo::id() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.id)
  return id_;
}
inline void PersonTwo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonTwo.id)
}

// optional string email = 3;
inline bool PersonTwo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonTwo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonTwo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonTwo::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PersonTwo::email() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.email)
  return *email_;
}
inline void PersonTwo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonTwo.email)
}
inline void PersonTwo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:GpbElementInfoTestThree.PersonTwo.email)
}
inline void PersonTwo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GpbElementInfoTestThree.PersonTwo.email)
}
inline ::std::string* PersonTwo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonTwo.email)
  return email_;
}
inline ::std::string* PersonTwo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonTwo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GpbElementInfoTestThree.PersonTwo.email)
}

// repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
inline int PersonTwo::phone_size() const {
  return phone_.size();
}
inline void PersonTwo::clear_phone() {
  phone_.Clear();
}
inline const ::GpbElementInfoTestThree::PhoneNumber& PersonTwo::phone(int index) const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.phone)
  return phone_.Get(index);
}
inline ::GpbElementInfoTestThree::PhoneNumber* PersonTwo::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.PersonTwo.phone)
  return phone_.Mutable(index);
}
inline ::GpbElementInfoTestThree::PhoneNumber* PersonTwo::add_phone() {
  // @@protoc_insertion_point(field_add:GpbElementInfoTestThree.PersonTwo.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >&
PersonTwo::phone() const {
  // @@protoc_insertion_point(field_list:GpbElementInfoTestThree.PersonTwo.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PhoneNumber >*
PersonTwo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:GpbElementInfoTestThree.PersonTwo.phone)
  return &phone_;
}

// optional uint32 different_datum = 5;
inline bool PersonTwo::has_different_datum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersonTwo::set_has_different_datum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersonTwo::clear_has_different_datum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersonTwo::clear_different_datum() {
  different_datum_ = 0u;
  clear_has_different_datum();
}
inline ::google::protobuf::uint32 PersonTwo::different_datum() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.different_datum)
  return different_datum_;
}
inline void PersonTwo::set_different_datum(::google::protobuf::uint32 value) {
  set_has_different_datum();
  different_datum_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonTwo.different_datum)
}

// optional int32 name_different_2 = 6;
inline bool PersonTwo::has_name_different_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersonTwo::set_has_name_different_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersonTwo::clear_has_name_different_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersonTwo::clear_name_different_2() {
  name_different_2_ = 0;
  clear_has_name_different_2();
}
inline ::google::protobuf::int32 PersonTwo::name_different_2() const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.PersonTwo.name_different_2)
  return name_different_2_;
}
inline void PersonTwo::set_name_different_2(::google::protobuf::int32 value) {
  set_has_name_different_2();
  name_different_2_ = value;
  // @@protoc_insertion_point(field_set:GpbElementInfoTestThree.PersonTwo.name_different_2)
}

// -------------------------------------------------------------------

// AddressBookTwo

// repeated .GpbElementInfoTestThree.PersonTwo person = 1;
inline int AddressBookTwo::person_size() const {
  return person_.size();
}
inline void AddressBookTwo::clear_person() {
  person_.Clear();
}
inline const ::GpbElementInfoTestThree::PersonTwo& AddressBookTwo::person(int index) const {
  // @@protoc_insertion_point(field_get:GpbElementInfoTestThree.AddressBookTwo.person)
  return person_.Get(index);
}
inline ::GpbElementInfoTestThree::PersonTwo* AddressBookTwo::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:GpbElementInfoTestThree.AddressBookTwo.person)
  return person_.Mutable(index);
}
inline ::GpbElementInfoTestThree::PersonTwo* AddressBookTwo::add_person() {
  // @@protoc_insertion_point(field_add:GpbElementInfoTestThree.AddressBookTwo.person)
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonTwo >&
AddressBookTwo::person() const {
  // @@protoc_insertion_point(field_list:GpbElementInfoTestThree.AddressBookTwo.person)
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::GpbElementInfoTestThree::PersonTwo >*
AddressBookTwo::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:GpbElementInfoTestThree.AddressBookTwo.person)
  return &person_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GpbElementInfoTestThree

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GpbElementInfoTestThree::PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GpbElementInfoTestThree::PhoneType>() {
  return ::GpbElementInfoTestThree::PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GpbElementInfoTestThree_2eproto__INCLUDED
