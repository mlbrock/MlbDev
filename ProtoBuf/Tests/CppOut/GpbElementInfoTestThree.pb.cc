// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GpbElementInfoTestThree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GpbElementInfoTestThree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GpbElementInfoTestThree {

namespace {

const ::google::protobuf::Descriptor* PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressBookOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBookOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonTwo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonTwo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressBookTwo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBookTwo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GpbElementInfoTestThree_2eproto() {
  protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GpbElementInfoTestThree.proto");
  GOOGLE_CHECK(file != NULL);
  PhoneNumber_descriptor_ = file->message_type(0);
  static const int PhoneNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, type_),
  };
  PhoneNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhoneNumber_descriptor_,
      PhoneNumber::default_instance_,
      PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhoneNumber));
  PersonOne_descriptor_ = file->message_type(1);
  static const int PersonOne_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, different_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, name_different_1_),
  };
  PersonOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonOne_descriptor_,
      PersonOne::default_instance_,
      PersonOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonOne));
  AddressBookOne_descriptor_ = file->message_type(2);
  static const int AddressBookOne_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, person_),
  };
  AddressBookOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressBookOne_descriptor_,
      AddressBookOne::default_instance_,
      AddressBookOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressBookOne));
  PersonTwo_descriptor_ = file->message_type(3);
  static const int PersonTwo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, different_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, name_different_2_),
  };
  PersonTwo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonTwo_descriptor_,
      PersonTwo::default_instance_,
      PersonTwo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonTwo));
  AddressBookTwo_descriptor_ = file->message_type(4);
  static const int AddressBookTwo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, person_),
  };
  AddressBookTwo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressBookTwo_descriptor_,
      AddressBookTwo::default_instance_,
      AddressBookTwo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressBookTwo));
  PhoneType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GpbElementInfoTestThree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhoneNumber_descriptor_, &PhoneNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonOne_descriptor_, &PersonOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressBookOne_descriptor_, &AddressBookOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonTwo_descriptor_, &PersonTwo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressBookTwo_descriptor_, &AddressBookTwo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto() {
  delete PhoneNumber::default_instance_;
  delete PhoneNumber_reflection_;
  delete PersonOne::default_instance_;
  delete PersonOne_reflection_;
  delete AddressBookOne::default_instance_;
  delete AddressBookOne_reflection_;
  delete PersonTwo::default_instance_;
  delete PersonTwo_reflection_;
  delete AddressBookTwo::default_instance_;
  delete AddressBookTwo_reflection_;
}

void protobuf_AddDesc_GpbElementInfoTestThree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035GpbElementInfoTestThree.proto\022\027GpbElem"
    "entInfoTestThree\"U\n\013PhoneNumber\022\016\n\006numbe"
    "r\030\001 \002(\t\0226\n\004type\030\002 \001(\0162\".GpbElementInfoTe"
    "stThree.PhoneType:\004HOME\"\234\001\n\tPersonOne\022\014\n"
    "\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t\0223"
    "\n\005phone\030\004 \003(\0132$.GpbElementInfoTestThree."
    "PhoneNumber\022\027\n\017different_datum\030\005 \001(\005\022\030\n\020"
    "name_different_1\030\006 \001(\005\"D\n\016AddressBookOne"
    "\0222\n\006person\030\001 \003(\0132\".GpbElementInfoTestThr"
    "ee.PersonOne\"\234\001\n\tPersonTwo\022\014\n\004name\030\001 \002(\t"
    "\022\n\n\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t\0223\n\005phone\030\004 \003"
    "(\0132$.GpbElementInfoTestThree.PhoneNumber"
    "\022\027\n\017different_datum\030\005 \001(\r\022\030\n\020name_differ"
    "ent_2\030\006 \001(\005\"D\n\016AddressBookTwo\0222\n\006person\030"
    "\001 \003(\0132\".GpbElementInfoTestThree.PersonTw"
    "o*+\n\tPhoneType\022\n\n\006MOBILE\020\000\022\010\n\004HOME\020\001\022\010\n\004"
    "WORK\020\002", 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GpbElementInfoTestThree.proto", &protobuf_RegisterTypes);
  PhoneNumber::default_instance_ = new PhoneNumber();
  PersonOne::default_instance_ = new PersonOne();
  AddressBookOne::default_instance_ = new AddressBookOne();
  PersonTwo::default_instance_ = new PersonTwo();
  AddressBookTwo::default_instance_ = new AddressBookTwo();
  PhoneNumber::default_instance_->InitAsDefaultInstance();
  PersonOne::default_instance_->InitAsDefaultInstance();
  AddressBookOne::default_instance_->InitAsDefaultInstance();
  PersonTwo::default_instance_->InitAsDefaultInstance();
  AddressBookTwo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GpbElementInfoTestThree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GpbElementInfoTestThree_2eproto {
  StaticDescriptorInitializer_GpbElementInfoTestThree_2eproto() {
    protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  }
} static_descriptor_initializer_GpbElementInfoTestThree_2eproto_;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneType_descriptor_;
}
bool PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneNumber::kNumberFieldNumber;
const int PhoneNumber::kTypeFieldNumber;
#endif  // !_MSC_VER

PhoneNumber::PhoneNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GpbElementInfoTestThree.PhoneNumber)
}

void PhoneNumber::InitAsDefaultInstance() {
}

PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GpbElementInfoTestThree.PhoneNumber)
}

void PhoneNumber::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneNumber::~PhoneNumber() {
  // @@protoc_insertion_point(destructor:GpbElementInfoTestThree.PhoneNumber)
  SharedDtor();
}

void PhoneNumber::SharedDtor() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneNumber_descriptor_;
}

const PhoneNumber& PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  return *default_instance_;
}

PhoneNumber* PhoneNumber::default_instance_ = NULL;

PhoneNumber* PhoneNumber::New() const {
  return new PhoneNumber;
}

void PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        number_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GpbElementInfoTestThree.PhoneNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GpbElementInfoTestThree::PhoneType_IsValid(value)) {
            set_type(static_cast< ::GpbElementInfoTestThree::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GpbElementInfoTestThree.PhoneNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GpbElementInfoTestThree.PhoneNumber)
  return false;
#undef DO_
}

void PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GpbElementInfoTestThree.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GpbElementInfoTestThree.PhoneNumber)
}

::google::protobuf::uint8* PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpbElementInfoTestThree.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpbElementInfoTestThree.PhoneNumber)
  return target;
}

int PhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional .GpbElementInfoTestThree.PhoneType type = 2 [default = HOME];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhoneNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PhoneNumber::Swap(PhoneNumber* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneNumber_descriptor_;
  metadata.reflection = PhoneNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonOne::kNameFieldNumber;
const int PersonOne::kIdFieldNumber;
const int PersonOne::kEmailFieldNumber;
const int PersonOne::kPhoneFieldNumber;
const int PersonOne::kDifferentDatumFieldNumber;
const int PersonOne::kNameDifferent1FieldNumber;
#endif  // !_MSC_VER

PersonOne::PersonOne()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GpbElementInfoTestThree.PersonOne)
}

void PersonOne::InitAsDefaultInstance() {
}

PersonOne::PersonOne(const PersonOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GpbElementInfoTestThree.PersonOne)
}

void PersonOne::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  different_datum_ = 0;
  name_different_1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonOne::~PersonOne() {
  // @@protoc_insertion_point(destructor:GpbElementInfoTestThree.PersonOne)
  SharedDtor();
}

void PersonOne::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void PersonOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonOne_descriptor_;
}

const PersonOne& PersonOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  return *default_instance_;
}

PersonOne* PersonOne::default_instance_ = NULL;

PersonOne* PersonOne::New() const {
  return new PersonOne;
}

void PersonOne::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PersonOne*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(id_, different_datum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    name_different_1_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GpbElementInfoTestThree.PersonOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        if (input->ExpectTag(40)) goto parse_different_datum;
        break;
      }

      // optional int32 different_datum = 5;
      case 5: {
        if (tag == 40) {
         parse_different_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &different_datum_)));
          set_has_different_datum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_name_different_1;
        break;
      }

      // optional int32 name_different_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_name_different_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_different_1_)));
          set_has_name_different_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GpbElementInfoTestThree.PersonOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GpbElementInfoTestThree.PersonOne)
  return false;
#undef DO_
}

void PersonOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GpbElementInfoTestThree.PersonOne)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // optional int32 different_datum = 5;
  if (has_different_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->different_datum(), output);
  }

  // optional int32 name_different_1 = 6;
  if (has_name_different_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->name_different_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GpbElementInfoTestThree.PersonOne)
}

::google::protobuf::uint8* PersonOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpbElementInfoTestThree.PersonOne)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->phone(i), target);
  }

  // optional int32 different_datum = 5;
  if (has_different_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->different_datum(), target);
  }

  // optional int32 name_different_1 = 6;
  if (has_name_different_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->name_different_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpbElementInfoTestThree.PersonOne)
  return target;
}

int PersonOne::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 different_datum = 5;
    if (has_different_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->different_datum());
    }

    // optional int32 name_different_1 = 6;
    if (has_name_different_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_different_1());
    }

  }
  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonOne::MergeFrom(const PersonOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_different_datum()) {
      set_different_datum(from.different_datum());
    }
    if (from.has_name_different_1()) {
      set_name_different_1(from.name_different_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonOne::CopyFrom(const PersonOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonOne::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void PersonOne::Swap(PersonOne* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(email_, other->email_);
    phone_.Swap(&other->phone_);
    std::swap(different_datum_, other->different_datum_);
    std::swap(name_different_1_, other->name_different_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonOne_descriptor_;
  metadata.reflection = PersonOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBookOne::kPersonFieldNumber;
#endif  // !_MSC_VER

AddressBookOne::AddressBookOne()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GpbElementInfoTestThree.AddressBookOne)
}

void AddressBookOne::InitAsDefaultInstance() {
}

AddressBookOne::AddressBookOne(const AddressBookOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GpbElementInfoTestThree.AddressBookOne)
}

void AddressBookOne::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookOne::~AddressBookOne() {
  // @@protoc_insertion_point(destructor:GpbElementInfoTestThree.AddressBookOne)
  SharedDtor();
}

void AddressBookOne::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressBookOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBookOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBookOne_descriptor_;
}

const AddressBookOne& AddressBookOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  return *default_instance_;
}

AddressBookOne* AddressBookOne::default_instance_ = NULL;

AddressBookOne* AddressBookOne::New() const {
  return new AddressBookOne;
}

void AddressBookOne::Clear() {
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressBookOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GpbElementInfoTestThree.AddressBookOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GpbElementInfoTestThree.PersonOne person = 1;
      case 1: {
        if (tag == 10) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_person;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GpbElementInfoTestThree.AddressBookOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GpbElementInfoTestThree.AddressBookOne)
  return false;
#undef DO_
}

void AddressBookOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GpbElementInfoTestThree.AddressBookOne)
  // repeated .GpbElementInfoTestThree.PersonOne person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GpbElementInfoTestThree.AddressBookOne)
}

::google::protobuf::uint8* AddressBookOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpbElementInfoTestThree.AddressBookOne)
  // repeated .GpbElementInfoTestThree.PersonOne person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpbElementInfoTestThree.AddressBookOne)
  return target;
}

int AddressBookOne::ByteSize() const {
  int total_size = 0;

  // repeated .GpbElementInfoTestThree.PersonOne person = 1;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressBookOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressBookOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBookOne::MergeFrom(const AddressBookOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressBookOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBookOne::CopyFrom(const AddressBookOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookOne::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void AddressBookOne::Swap(AddressBookOne* other) {
  if (other != this) {
    person_.Swap(&other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressBookOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBookOne_descriptor_;
  metadata.reflection = AddressBookOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonTwo::kNameFieldNumber;
const int PersonTwo::kIdFieldNumber;
const int PersonTwo::kEmailFieldNumber;
const int PersonTwo::kPhoneFieldNumber;
const int PersonTwo::kDifferentDatumFieldNumber;
const int PersonTwo::kNameDifferent2FieldNumber;
#endif  // !_MSC_VER

PersonTwo::PersonTwo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GpbElementInfoTestThree.PersonTwo)
}

void PersonTwo::InitAsDefaultInstance() {
}

PersonTwo::PersonTwo(const PersonTwo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GpbElementInfoTestThree.PersonTwo)
}

void PersonTwo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  different_datum_ = 0u;
  name_different_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonTwo::~PersonTwo() {
  // @@protoc_insertion_point(destructor:GpbElementInfoTestThree.PersonTwo)
  SharedDtor();
}

void PersonTwo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void PersonTwo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonTwo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonTwo_descriptor_;
}

const PersonTwo& PersonTwo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  return *default_instance_;
}

PersonTwo* PersonTwo::default_instance_ = NULL;

PersonTwo* PersonTwo::New() const {
  return new PersonTwo;
}

void PersonTwo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PersonTwo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(id_, different_datum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    name_different_2_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonTwo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GpbElementInfoTestThree.PersonTwo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        if (input->ExpectTag(40)) goto parse_different_datum;
        break;
      }

      // optional uint32 different_datum = 5;
      case 5: {
        if (tag == 40) {
         parse_different_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &different_datum_)));
          set_has_different_datum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_name_different_2;
        break;
      }

      // optional int32 name_different_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_name_different_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_different_2_)));
          set_has_name_different_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GpbElementInfoTestThree.PersonTwo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GpbElementInfoTestThree.PersonTwo)
  return false;
#undef DO_
}

void PersonTwo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GpbElementInfoTestThree.PersonTwo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // optional uint32 different_datum = 5;
  if (has_different_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->different_datum(), output);
  }

  // optional int32 name_different_2 = 6;
  if (has_name_different_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->name_different_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GpbElementInfoTestThree.PersonTwo)
}

::google::protobuf::uint8* PersonTwo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpbElementInfoTestThree.PersonTwo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->phone(i), target);
  }

  // optional uint32 different_datum = 5;
  if (has_different_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->different_datum(), target);
  }

  // optional int32 name_different_2 = 6;
  if (has_name_different_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->name_different_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpbElementInfoTestThree.PersonTwo)
  return target;
}

int PersonTwo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 different_datum = 5;
    if (has_different_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->different_datum());
    }

    // optional int32 name_different_2 = 6;
    if (has_name_different_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_different_2());
    }

  }
  // repeated .GpbElementInfoTestThree.PhoneNumber phone = 4;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonTwo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonTwo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonTwo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonTwo::MergeFrom(const PersonTwo& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_different_datum()) {
      set_different_datum(from.different_datum());
    }
    if (from.has_name_different_2()) {
      set_name_different_2(from.name_different_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonTwo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonTwo::CopyFrom(const PersonTwo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonTwo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void PersonTwo::Swap(PersonTwo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(email_, other->email_);
    phone_.Swap(&other->phone_);
    std::swap(different_datum_, other->different_datum_);
    std::swap(name_different_2_, other->name_different_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonTwo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonTwo_descriptor_;
  metadata.reflection = PersonTwo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBookTwo::kPersonFieldNumber;
#endif  // !_MSC_VER

AddressBookTwo::AddressBookTwo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GpbElementInfoTestThree.AddressBookTwo)
}

void AddressBookTwo::InitAsDefaultInstance() {
}

AddressBookTwo::AddressBookTwo(const AddressBookTwo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GpbElementInfoTestThree.AddressBookTwo)
}

void AddressBookTwo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookTwo::~AddressBookTwo() {
  // @@protoc_insertion_point(destructor:GpbElementInfoTestThree.AddressBookTwo)
  SharedDtor();
}

void AddressBookTwo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressBookTwo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBookTwo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBookTwo_descriptor_;
}

const AddressBookTwo& AddressBookTwo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GpbElementInfoTestThree_2eproto();
  return *default_instance_;
}

AddressBookTwo* AddressBookTwo::default_instance_ = NULL;

AddressBookTwo* AddressBookTwo::New() const {
  return new AddressBookTwo;
}

void AddressBookTwo::Clear() {
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressBookTwo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GpbElementInfoTestThree.AddressBookTwo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GpbElementInfoTestThree.PersonTwo person = 1;
      case 1: {
        if (tag == 10) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_person;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GpbElementInfoTestThree.AddressBookTwo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GpbElementInfoTestThree.AddressBookTwo)
  return false;
#undef DO_
}

void AddressBookTwo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GpbElementInfoTestThree.AddressBookTwo)
  // repeated .GpbElementInfoTestThree.PersonTwo person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GpbElementInfoTestThree.AddressBookTwo)
}

::google::protobuf::uint8* AddressBookTwo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GpbElementInfoTestThree.AddressBookTwo)
  // repeated .GpbElementInfoTestThree.PersonTwo person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GpbElementInfoTestThree.AddressBookTwo)
  return target;
}

int AddressBookTwo::ByteSize() const {
  int total_size = 0;

  // repeated .GpbElementInfoTestThree.PersonTwo person = 1;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookTwo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressBookTwo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressBookTwo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBookTwo::MergeFrom(const AddressBookTwo& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressBookTwo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBookTwo::CopyFrom(const AddressBookTwo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookTwo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void AddressBookTwo::Swap(AddressBookTwo* other) {
  if (other != this) {
    person_.Swap(&other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressBookTwo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBookTwo_descriptor_;
  metadata.reflection = AddressBookTwo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GpbElementInfoTestThree

// @@protoc_insertion_point(global_scope)
