// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FieldTypeTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FieldTypeTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MLB {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressBookOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBookOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonTwo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonTwo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressBookTwo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBookTwo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldTypeTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldTypeTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldTypeTest_BigCurrencyPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldTypeTest_BigCurrencyPosition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldTypeTest_BigCurrency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FieldTypeTest_2eproto() {
  protobuf_AddDesc_FieldTypeTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FieldTypeTest.proto");
  GOOGLE_CHECK(file != NULL);
  PhoneNumber_descriptor_ = file->message_type(0);
  static const int PhoneNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, type_),
  };
  PhoneNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhoneNumber_descriptor_,
      PhoneNumber::default_instance_,
      PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhoneNumber));
  PersonOne_descriptor_ = file->message_type(1);
  static const int PersonOne_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, different_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, name_different_1_),
  };
  PersonOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonOne_descriptor_,
      PersonOne::default_instance_,
      PersonOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonOne));
  AddressBookOne_descriptor_ = file->message_type(2);
  static const int AddressBookOne_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, person_),
  };
  AddressBookOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressBookOne_descriptor_,
      AddressBookOne::default_instance_,
      AddressBookOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressBookOne));
  PersonTwo_descriptor_ = file->message_type(3);
  static const int PersonTwo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, different_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, name_different_2_),
  };
  PersonTwo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonTwo_descriptor_,
      PersonTwo::default_instance_,
      PersonTwo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonTwo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonTwo));
  AddressBookTwo_descriptor_ = file->message_type(4);
  static const int AddressBookTwo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, person_),
  };
  AddressBookTwo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressBookTwo_descriptor_,
      AddressBookTwo::default_instance_,
      AddressBookTwo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBookTwo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressBookTwo));
  FieldTypeTest_descriptor_ = file->message_type(5);
  static const int FieldTypeTest_offsets_[51] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_fixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_fixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_sfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_sfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_bigcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, scalar_bigcurrencyposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_sint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_fixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_fixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_sfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_sfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_bigcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, vector_bigcurrencyposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array1_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, array2_string_),
  };
  FieldTypeTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldTypeTest_descriptor_,
      FieldTypeTest::default_instance_,
      FieldTypeTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldTypeTest));
  FieldTypeTest_BigCurrencyPosition_descriptor_ = FieldTypeTest_descriptor_->nested_type(0);
  static const int FieldTypeTest_BigCurrencyPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest_BigCurrencyPosition, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest_BigCurrencyPosition, position_),
  };
  FieldTypeTest_BigCurrencyPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldTypeTest_BigCurrencyPosition_descriptor_,
      FieldTypeTest_BigCurrencyPosition::default_instance_,
      FieldTypeTest_BigCurrencyPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest_BigCurrencyPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldTypeTest_BigCurrencyPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldTypeTest_BigCurrencyPosition));
  FieldTypeTest_BigCurrency_descriptor_ = FieldTypeTest_descriptor_->enum_type(0);
  PhoneType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FieldTypeTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhoneNumber_descriptor_, &PhoneNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonOne_descriptor_, &PersonOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressBookOne_descriptor_, &AddressBookOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonTwo_descriptor_, &PersonTwo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressBookTwo_descriptor_, &AddressBookTwo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldTypeTest_descriptor_, &FieldTypeTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldTypeTest_BigCurrencyPosition_descriptor_, &FieldTypeTest_BigCurrencyPosition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FieldTypeTest_2eproto() {
  delete PhoneNumber::default_instance_;
  delete PhoneNumber_reflection_;
  delete PersonOne::default_instance_;
  delete PersonOne_reflection_;
  delete AddressBookOne::default_instance_;
  delete AddressBookOne_reflection_;
  delete PersonTwo::default_instance_;
  delete PersonTwo_reflection_;
  delete AddressBookTwo::default_instance_;
  delete AddressBookTwo_reflection_;
  delete FieldTypeTest::default_instance_;
  delete FieldTypeTest_reflection_;
  delete FieldTypeTest_BigCurrencyPosition::default_instance_;
  delete FieldTypeTest_BigCurrencyPosition_reflection_;
}

void protobuf_AddDesc_FieldTypeTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MLB::ProtoBuf::protobuf_AddDesc_ArrayTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FieldTypeTest.proto\022\014MLB.ProtoBuf\032\020Arr"
    "ayTypes.proto\"J\n\013PhoneNumber\022\016\n\006number\030\001"
    " \002(\t\022+\n\004type\030\002 \001(\0162\027.MLB.ProtoBuf.PhoneT"
    "ype:\004HOME\"\221\001\n\tPersonOne\022\014\n\004name\030\001 \002(\t\022\n\n"
    "\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t\022(\n\005phone\030\004 \003(\0132"
    "\031.MLB.ProtoBuf.PhoneNumber\022\027\n\017different_"
    "datum\030\005 \001(\005\022\030\n\020name_different_1\030\006 \001(\005\"9\n"
    "\016AddressBookOne\022\'\n\006person\030\001 \003(\0132\027.MLB.Pr"
    "otoBuf.PersonOne\"\221\001\n\tPersonTwo\022\014\n\004name\030\001"
    " \002(\t\022\n\n\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t\022(\n\005phone"
    "\030\004 \003(\0132\031.MLB.ProtoBuf.PhoneNumber\022\027\n\017dif"
    "ferent_datum\030\005 \001(\r\022\030\n\020name_different_2\030\006"
    " \001(\005\"9\n\016AddressBookTwo\022\'\n\006person\030\001 \003(\0132\027"
    ".MLB.ProtoBuf.PersonTwo\"\330\017\n\rFieldTypeTes"
    "t\022\n\n\002id\030\001 \002(\004\022\025\n\rscalar_double\030e \001(\001\022\024\n\014"
    "scalar_float\030f \001(\002\022\024\n\014scalar_int32\030g \001(\005"
    "\022\024\n\014scalar_int64\030h \001(\003\022\025\n\rscalar_uint32\030"
    "i \001(\r\022\025\n\rscalar_uint64\030j \001(\004\022\025\n\rscalar_s"
    "int32\030k \001(\021\022\025\n\rscalar_sint64\030l \001(\022\022\026\n\016sc"
    "alar_fixed32\030m \001(\007\022\026\n\016scalar_fixed64\030n \001"
    "(\006\022\027\n\017scalar_sfixed32\030o \001(\017\022\027\n\017scalar_sf"
    "ixed64\030p \001(\020\022\023\n\013scalar_bool\030q \001(\010\022\025\n\rsca"
    "lar_string\030r \001(\t\022\024\n\014scalar_bytes\030s \001(\014\022C"
    "\n\022scalar_BigCurrency\030t \001(\0162\'.MLB.ProtoBu"
    "f.FieldTypeTest.BigCurrency\022S\n\032scalar_Bi"
    "gCurrencyPosition\030u \001(\0132/.MLB.ProtoBuf.F"
    "ieldTypeTest.BigCurrencyPosition\022\026\n\rvect"
    "or_double\030\311\001 \003(\001\022\025\n\014vector_float\030\312\001 \003(\002\022"
    "\025\n\014vector_int32\030\313\001 \003(\005\022\025\n\014vector_int64\030\314"
    "\001 \003(\003\022\026\n\rvector_uint32\030\315\001 \003(\r\022\026\n\rvector_"
    "uint64\030\316\001 \003(\004\022\026\n\rvector_sint32\030\317\001 \003(\021\022\026\n"
    "\rvector_sint64\030\320\001 \003(\022\022\027\n\016vector_fixed32\030"
    "\321\001 \003(\007\022\027\n\016vector_fixed64\030\322\001 \003(\006\022\030\n\017vecto"
    "r_sfixed32\030\323\001 \003(\017\022\030\n\017vector_sfixed64\030\324\001 "
    "\003(\020\022\024\n\013vector_bool\030\325\001 \003(\010\022\026\n\rvector_stri"
    "ng\030\326\001 \003(\t\022\025\n\014vector_bytes\030\327\001 \003(\014\022D\n\022vect"
    "or_BigCurrency\030\330\001 \003(\0162\'.MLB.ProtoBuf.Fie"
    "ldTypeTest.BigCurrency\022T\n\032vector_BigCurr"
    "encyPosition\030\331\001 \003(\0132/.MLB.ProtoBuf.Field"
    "TypeTest.BigCurrencyPosition\0222\n\rarray1_d"
    "ouble\030\255\002 \001(\0132\032.MLB.ProtoBuf.Array1Double"
    "\0220\n\014array1_float\030\256\002 \001(\0132\031.MLB.ProtoBuf.A"
    "rray1Float\0220\n\014array1_int32\030\257\002 \001(\0132\031.MLB."
    "ProtoBuf.Array1Int32\0220\n\014array1_int64\030\260\002 "
    "\001(\0132\031.MLB.ProtoBuf.Array1Int64\0222\n\rarray1"
    "_uint32\030\261\002 \001(\0132\032.MLB.ProtoBuf.Array1UInt"
    "32\0222\n\rarray1_uint64\030\262\002 \001(\0132\032.MLB.ProtoBu"
    "f.Array1UInt32\022.\n\013array1_bool\030\271\002 \001(\0132\030.M"
    "LB.ProtoBuf.Array1Bool\0222\n\rarray1_string\030"
    "\272\002 \001(\0132\032.MLB.ProtoBuf.Array1String\0222\n\rar"
    "ray2_double\030\221\003 \001(\0132\032.MLB.ProtoBuf.Array2"
    "Double\0220\n\014array2_float\030\222\003 \001(\0132\031.MLB.Prot"
    "oBuf.Array2Float\0220\n\014array2_int32\030\223\003 \001(\0132"
    "\031.MLB.ProtoBuf.Array2Int32\0220\n\014array2_int"
    "64\030\224\003 \001(\0132\031.MLB.ProtoBuf.Array2Int64\0222\n\r"
    "array2_uint32\030\225\003 \001(\0132\032.MLB.ProtoBuf.Arra"
    "y2UInt32\0222\n\rarray2_uint64\030\226\003 \001(\0132\032.MLB.P"
    "rotoBuf.Array2UInt32\022.\n\013array2_bool\030\235\003 \001"
    "(\0132\030.MLB.ProtoBuf.Array2Bool\0222\n\rarray2_s"
    "tring\030\236\003 \001(\0132\032.MLB.ProtoBuf.Array2String"
    "\032e\n\023BigCurrencyPosition\0229\n\010currency\030\001 \002("
    "\0162\'.MLB.ProtoBuf.FieldTypeTest.BigCurren"
    "cy\022\023\n\010position\030\002 \001(\001:\0010\"1\n\013BigCurrency\022\007"
    "\n\003USD\020\001\022\007\n\003GBP\020\002\022\007\n\003EUR\020\003\022\007\n\003JPY\020\004*+\n\tPh"
    "oneType\022\n\n\006MOBILE\020\000\022\010\n\004HOME\020\001\022\010\n\004WORK\020\002", 2599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FieldTypeTest.proto", &protobuf_RegisterTypes);
  PhoneNumber::default_instance_ = new PhoneNumber();
  PersonOne::default_instance_ = new PersonOne();
  AddressBookOne::default_instance_ = new AddressBookOne();
  PersonTwo::default_instance_ = new PersonTwo();
  AddressBookTwo::default_instance_ = new AddressBookTwo();
  FieldTypeTest::default_instance_ = new FieldTypeTest();
  FieldTypeTest_BigCurrencyPosition::default_instance_ = new FieldTypeTest_BigCurrencyPosition();
  PhoneNumber::default_instance_->InitAsDefaultInstance();
  PersonOne::default_instance_->InitAsDefaultInstance();
  AddressBookOne::default_instance_->InitAsDefaultInstance();
  PersonTwo::default_instance_->InitAsDefaultInstance();
  AddressBookTwo::default_instance_->InitAsDefaultInstance();
  FieldTypeTest::default_instance_->InitAsDefaultInstance();
  FieldTypeTest_BigCurrencyPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FieldTypeTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FieldTypeTest_2eproto {
  StaticDescriptorInitializer_FieldTypeTest_2eproto() {
    protobuf_AddDesc_FieldTypeTest_2eproto();
  }
} static_descriptor_initializer_FieldTypeTest_2eproto_;
const ::google::protobuf::EnumDescriptor* PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneType_descriptor_;
}
bool PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PhoneNumber::kNumberFieldNumber;
const int PhoneNumber::kTypeFieldNumber;
#endif  // !_MSC_VER

PhoneNumber::PhoneNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.PhoneNumber)
}

void PhoneNumber::InitAsDefaultInstance() {
}

PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.PhoneNumber)
}

void PhoneNumber::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhoneNumber::~PhoneNumber() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.PhoneNumber)
  SharedDtor();
}

void PhoneNumber::SharedDtor() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (this != default_instance_) {
  }
}

void PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneNumber_descriptor_;
}

const PhoneNumber& PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

PhoneNumber* PhoneNumber::default_instance_ = NULL;

PhoneNumber* PhoneNumber::New() const {
  return new PhoneNumber;
}

void PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        number_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.PhoneNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MLB::ProtoBuf::PhoneType_IsValid(value)) {
            set_type(static_cast< ::MLB::ProtoBuf::PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.PhoneNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.PhoneNumber)
  return false;
#undef DO_
}

void PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.PhoneNumber)
}

::google::protobuf::uint8* PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.PhoneNumber)
  return target;
}

int PhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhoneNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PhoneNumber::Swap(PhoneNumber* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneNumber_descriptor_;
  metadata.reflection = PhoneNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonOne::kNameFieldNumber;
const int PersonOne::kIdFieldNumber;
const int PersonOne::kEmailFieldNumber;
const int PersonOne::kPhoneFieldNumber;
const int PersonOne::kDifferentDatumFieldNumber;
const int PersonOne::kNameDifferent1FieldNumber;
#endif  // !_MSC_VER

PersonOne::PersonOne()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.PersonOne)
}

void PersonOne::InitAsDefaultInstance() {
}

PersonOne::PersonOne(const PersonOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.PersonOne)
}

void PersonOne::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  different_datum_ = 0;
  name_different_1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonOne::~PersonOne() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.PersonOne)
  SharedDtor();
}

void PersonOne::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void PersonOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonOne_descriptor_;
}

const PersonOne& PersonOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

PersonOne* PersonOne::default_instance_ = NULL;

PersonOne* PersonOne::New() const {
  return new PersonOne;
}

void PersonOne::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PersonOne*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(id_, different_datum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    name_different_1_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.PersonOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        if (input->ExpectTag(40)) goto parse_different_datum;
        break;
      }

      // optional int32 different_datum = 5;
      case 5: {
        if (tag == 40) {
         parse_different_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &different_datum_)));
          set_has_different_datum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_name_different_1;
        break;
      }

      // optional int32 name_different_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_name_different_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_different_1_)));
          set_has_name_different_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.PersonOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.PersonOne)
  return false;
#undef DO_
}

void PersonOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.PersonOne)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // optional int32 different_datum = 5;
  if (has_different_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->different_datum(), output);
  }

  // optional int32 name_different_1 = 6;
  if (has_name_different_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->name_different_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.PersonOne)
}

::google::protobuf::uint8* PersonOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.PersonOne)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->phone(i), target);
  }

  // optional int32 different_datum = 5;
  if (has_different_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->different_datum(), target);
  }

  // optional int32 name_different_1 = 6;
  if (has_name_different_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->name_different_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.PersonOne)
  return target;
}

int PersonOne::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 different_datum = 5;
    if (has_different_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->different_datum());
    }

    // optional int32 name_different_1 = 6;
    if (has_name_different_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_different_1());
    }

  }
  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonOne::MergeFrom(const PersonOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_different_datum()) {
      set_different_datum(from.different_datum());
    }
    if (from.has_name_different_1()) {
      set_name_different_1(from.name_different_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonOne::CopyFrom(const PersonOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonOne::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void PersonOne::Swap(PersonOne* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(email_, other->email_);
    phone_.Swap(&other->phone_);
    std::swap(different_datum_, other->different_datum_);
    std::swap(name_different_1_, other->name_different_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonOne_descriptor_;
  metadata.reflection = PersonOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBookOne::kPersonFieldNumber;
#endif  // !_MSC_VER

AddressBookOne::AddressBookOne()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.AddressBookOne)
}

void AddressBookOne::InitAsDefaultInstance() {
}

AddressBookOne::AddressBookOne(const AddressBookOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.AddressBookOne)
}

void AddressBookOne::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookOne::~AddressBookOne() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.AddressBookOne)
  SharedDtor();
}

void AddressBookOne::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressBookOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBookOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBookOne_descriptor_;
}

const AddressBookOne& AddressBookOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

AddressBookOne* AddressBookOne::default_instance_ = NULL;

AddressBookOne* AddressBookOne::New() const {
  return new AddressBookOne;
}

void AddressBookOne::Clear() {
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressBookOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.AddressBookOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.PersonOne person = 1;
      case 1: {
        if (tag == 10) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_person;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.AddressBookOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.AddressBookOne)
  return false;
#undef DO_
}

void AddressBookOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.AddressBookOne)
  // repeated .MLB.ProtoBuf.PersonOne person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.AddressBookOne)
}

::google::protobuf::uint8* AddressBookOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.AddressBookOne)
  // repeated .MLB.ProtoBuf.PersonOne person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.AddressBookOne)
  return target;
}

int AddressBookOne::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.PersonOne person = 1;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressBookOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressBookOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBookOne::MergeFrom(const AddressBookOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressBookOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBookOne::CopyFrom(const AddressBookOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookOne::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void AddressBookOne::Swap(AddressBookOne* other) {
  if (other != this) {
    person_.Swap(&other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressBookOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBookOne_descriptor_;
  metadata.reflection = AddressBookOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonTwo::kNameFieldNumber;
const int PersonTwo::kIdFieldNumber;
const int PersonTwo::kEmailFieldNumber;
const int PersonTwo::kPhoneFieldNumber;
const int PersonTwo::kDifferentDatumFieldNumber;
const int PersonTwo::kNameDifferent2FieldNumber;
#endif  // !_MSC_VER

PersonTwo::PersonTwo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.PersonTwo)
}

void PersonTwo::InitAsDefaultInstance() {
}

PersonTwo::PersonTwo(const PersonTwo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.PersonTwo)
}

void PersonTwo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  different_datum_ = 0u;
  name_different_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonTwo::~PersonTwo() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.PersonTwo)
  SharedDtor();
}

void PersonTwo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void PersonTwo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonTwo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonTwo_descriptor_;
}

const PersonTwo& PersonTwo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

PersonTwo* PersonTwo::default_instance_ = NULL;

PersonTwo* PersonTwo::New() const {
  return new PersonTwo;
}

void PersonTwo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PersonTwo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(id_, different_datum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    name_different_2_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonTwo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.PersonTwo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        if (input->ExpectTag(40)) goto parse_different_datum;
        break;
      }

      // optional uint32 different_datum = 5;
      case 5: {
        if (tag == 40) {
         parse_different_datum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &different_datum_)));
          set_has_different_datum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_name_different_2;
        break;
      }

      // optional int32 name_different_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_name_different_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_different_2_)));
          set_has_name_different_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.PersonTwo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.PersonTwo)
  return false;
#undef DO_
}

void PersonTwo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.PersonTwo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // optional uint32 different_datum = 5;
  if (has_different_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->different_datum(), output);
  }

  // optional int32 name_different_2 = 6;
  if (has_name_different_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->name_different_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.PersonTwo)
}

::google::protobuf::uint8* PersonTwo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.PersonTwo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  for (int i = 0; i < this->phone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->phone(i), target);
  }

  // optional uint32 different_datum = 5;
  if (has_different_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->different_datum(), target);
  }

  // optional int32 name_different_2 = 6;
  if (has_name_different_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->name_different_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.PersonTwo)
  return target;
}

int PersonTwo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 different_datum = 5;
    if (has_different_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->different_datum());
    }

    // optional int32 name_different_2 = 6;
    if (has_name_different_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_different_2());
    }

  }
  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonTwo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonTwo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonTwo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonTwo::MergeFrom(const PersonTwo& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_different_datum()) {
      set_different_datum(from.different_datum());
    }
    if (from.has_name_different_2()) {
      set_name_different_2(from.name_different_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonTwo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonTwo::CopyFrom(const PersonTwo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonTwo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void PersonTwo::Swap(PersonTwo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(email_, other->email_);
    phone_.Swap(&other->phone_);
    std::swap(different_datum_, other->different_datum_);
    std::swap(name_different_2_, other->name_different_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonTwo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonTwo_descriptor_;
  metadata.reflection = PersonTwo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressBookTwo::kPersonFieldNumber;
#endif  // !_MSC_VER

AddressBookTwo::AddressBookTwo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.AddressBookTwo)
}

void AddressBookTwo::InitAsDefaultInstance() {
}

AddressBookTwo::AddressBookTwo(const AddressBookTwo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.AddressBookTwo)
}

void AddressBookTwo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBookTwo::~AddressBookTwo() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.AddressBookTwo)
  SharedDtor();
}

void AddressBookTwo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressBookTwo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBookTwo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBookTwo_descriptor_;
}

const AddressBookTwo& AddressBookTwo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

AddressBookTwo* AddressBookTwo::default_instance_ = NULL;

AddressBookTwo* AddressBookTwo::New() const {
  return new AddressBookTwo;
}

void AddressBookTwo::Clear() {
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressBookTwo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.AddressBookTwo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.PersonTwo person = 1;
      case 1: {
        if (tag == 10) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_person;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.AddressBookTwo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.AddressBookTwo)
  return false;
#undef DO_
}

void AddressBookTwo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.AddressBookTwo)
  // repeated .MLB.ProtoBuf.PersonTwo person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.AddressBookTwo)
}

::google::protobuf::uint8* AddressBookTwo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.AddressBookTwo)
  // repeated .MLB.ProtoBuf.PersonTwo person = 1;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.AddressBookTwo)
  return target;
}

int AddressBookTwo::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.PersonTwo person = 1;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBookTwo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressBookTwo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressBookTwo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBookTwo::MergeFrom(const AddressBookTwo& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressBookTwo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBookTwo::CopyFrom(const AddressBookTwo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBookTwo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void AddressBookTwo::Swap(AddressBookTwo* other) {
  if (other != this) {
    person_.Swap(&other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressBookTwo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBookTwo_descriptor_;
  metadata.reflection = AddressBookTwo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldTypeTest_BigCurrency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldTypeTest_BigCurrency_descriptor_;
}
bool FieldTypeTest_BigCurrency_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldTypeTest_BigCurrency FieldTypeTest::USD;
const FieldTypeTest_BigCurrency FieldTypeTest::GBP;
const FieldTypeTest_BigCurrency FieldTypeTest::EUR;
const FieldTypeTest_BigCurrency FieldTypeTest::JPY;
const FieldTypeTest_BigCurrency FieldTypeTest::BigCurrency_MIN;
const FieldTypeTest_BigCurrency FieldTypeTest::BigCurrency_MAX;
const int FieldTypeTest::BigCurrency_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FieldTypeTest_BigCurrencyPosition::kCurrencyFieldNumber;
const int FieldTypeTest_BigCurrencyPosition::kPositionFieldNumber;
#endif  // !_MSC_VER

FieldTypeTest_BigCurrencyPosition::FieldTypeTest_BigCurrencyPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
}

void FieldTypeTest_BigCurrencyPosition::InitAsDefaultInstance() {
}

FieldTypeTest_BigCurrencyPosition::FieldTypeTest_BigCurrencyPosition(const FieldTypeTest_BigCurrencyPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
}

void FieldTypeTest_BigCurrencyPosition::SharedCtor() {
  _cached_size_ = 0;
  currency_ = 1;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldTypeTest_BigCurrencyPosition::~FieldTypeTest_BigCurrencyPosition() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  SharedDtor();
}

void FieldTypeTest_BigCurrencyPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldTypeTest_BigCurrencyPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldTypeTest_BigCurrencyPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldTypeTest_BigCurrencyPosition_descriptor_;
}

const FieldTypeTest_BigCurrencyPosition& FieldTypeTest_BigCurrencyPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

FieldTypeTest_BigCurrencyPosition* FieldTypeTest_BigCurrencyPosition::default_instance_ = NULL;

FieldTypeTest_BigCurrencyPosition* FieldTypeTest_BigCurrencyPosition::New() const {
  return new FieldTypeTest_BigCurrencyPosition;
}

void FieldTypeTest_BigCurrencyPosition::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    currency_ = 1;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldTypeTest_BigCurrencyPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value)) {
            set_currency(static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_position;
        break;
      }

      // optional double position = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  return false;
#undef DO_
}

void FieldTypeTest_BigCurrencyPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  // required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->currency(), output);
  }

  // optional double position = 2 [default = 0];
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
}

::google::protobuf::uint8* FieldTypeTest_BigCurrencyPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  // required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->currency(), target);
  }

  // optional double position = 2 [default = 0];
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
  return target;
}

int FieldTypeTest_BigCurrencyPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency());
    }

    // optional double position = 2 [default = 0];
    if (has_position()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldTypeTest_BigCurrencyPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldTypeTest_BigCurrencyPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldTypeTest_BigCurrencyPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldTypeTest_BigCurrencyPosition::MergeFrom(const FieldTypeTest_BigCurrencyPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldTypeTest_BigCurrencyPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldTypeTest_BigCurrencyPosition::CopyFrom(const FieldTypeTest_BigCurrencyPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldTypeTest_BigCurrencyPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FieldTypeTest_BigCurrencyPosition::Swap(FieldTypeTest_BigCurrencyPosition* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldTypeTest_BigCurrencyPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldTypeTest_BigCurrencyPosition_descriptor_;
  metadata.reflection = FieldTypeTest_BigCurrencyPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FieldTypeTest::kIdFieldNumber;
const int FieldTypeTest::kScalarDoubleFieldNumber;
const int FieldTypeTest::kScalarFloatFieldNumber;
const int FieldTypeTest::kScalarInt32FieldNumber;
const int FieldTypeTest::kScalarInt64FieldNumber;
const int FieldTypeTest::kScalarUint32FieldNumber;
const int FieldTypeTest::kScalarUint64FieldNumber;
const int FieldTypeTest::kScalarSint32FieldNumber;
const int FieldTypeTest::kScalarSint64FieldNumber;
const int FieldTypeTest::kScalarFixed32FieldNumber;
const int FieldTypeTest::kScalarFixed64FieldNumber;
const int FieldTypeTest::kScalarSfixed32FieldNumber;
const int FieldTypeTest::kScalarSfixed64FieldNumber;
const int FieldTypeTest::kScalarBoolFieldNumber;
const int FieldTypeTest::kScalarStringFieldNumber;
const int FieldTypeTest::kScalarBytesFieldNumber;
const int FieldTypeTest::kScalarBigCurrencyFieldNumber;
const int FieldTypeTest::kScalarBigCurrencyPositionFieldNumber;
const int FieldTypeTest::kVectorDoubleFieldNumber;
const int FieldTypeTest::kVectorFloatFieldNumber;
const int FieldTypeTest::kVectorInt32FieldNumber;
const int FieldTypeTest::kVectorInt64FieldNumber;
const int FieldTypeTest::kVectorUint32FieldNumber;
const int FieldTypeTest::kVectorUint64FieldNumber;
const int FieldTypeTest::kVectorSint32FieldNumber;
const int FieldTypeTest::kVectorSint64FieldNumber;
const int FieldTypeTest::kVectorFixed32FieldNumber;
const int FieldTypeTest::kVectorFixed64FieldNumber;
const int FieldTypeTest::kVectorSfixed32FieldNumber;
const int FieldTypeTest::kVectorSfixed64FieldNumber;
const int FieldTypeTest::kVectorBoolFieldNumber;
const int FieldTypeTest::kVectorStringFieldNumber;
const int FieldTypeTest::kVectorBytesFieldNumber;
const int FieldTypeTest::kVectorBigCurrencyFieldNumber;
const int FieldTypeTest::kVectorBigCurrencyPositionFieldNumber;
const int FieldTypeTest::kArray1DoubleFieldNumber;
const int FieldTypeTest::kArray1FloatFieldNumber;
const int FieldTypeTest::kArray1Int32FieldNumber;
const int FieldTypeTest::kArray1Int64FieldNumber;
const int FieldTypeTest::kArray1Uint32FieldNumber;
const int FieldTypeTest::kArray1Uint64FieldNumber;
const int FieldTypeTest::kArray1BoolFieldNumber;
const int FieldTypeTest::kArray1StringFieldNumber;
const int FieldTypeTest::kArray2DoubleFieldNumber;
const int FieldTypeTest::kArray2FloatFieldNumber;
const int FieldTypeTest::kArray2Int32FieldNumber;
const int FieldTypeTest::kArray2Int64FieldNumber;
const int FieldTypeTest::kArray2Uint32FieldNumber;
const int FieldTypeTest::kArray2Uint64FieldNumber;
const int FieldTypeTest::kArray2BoolFieldNumber;
const int FieldTypeTest::kArray2StringFieldNumber;
#endif  // !_MSC_VER

FieldTypeTest::FieldTypeTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.FieldTypeTest)
}

void FieldTypeTest::InitAsDefaultInstance() {
  scalar_bigcurrencyposition_ = const_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition*>(&::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition::default_instance());
  array1_double_ = const_cast< ::MLB::ProtoBuf::Array1Double*>(&::MLB::ProtoBuf::Array1Double::default_instance());
  array1_float_ = const_cast< ::MLB::ProtoBuf::Array1Float*>(&::MLB::ProtoBuf::Array1Float::default_instance());
  array1_int32_ = const_cast< ::MLB::ProtoBuf::Array1Int32*>(&::MLB::ProtoBuf::Array1Int32::default_instance());
  array1_int64_ = const_cast< ::MLB::ProtoBuf::Array1Int64*>(&::MLB::ProtoBuf::Array1Int64::default_instance());
  array1_uint32_ = const_cast< ::MLB::ProtoBuf::Array1UInt32*>(&::MLB::ProtoBuf::Array1UInt32::default_instance());
  array1_uint64_ = const_cast< ::MLB::ProtoBuf::Array1UInt32*>(&::MLB::ProtoBuf::Array1UInt32::default_instance());
  array1_bool_ = const_cast< ::MLB::ProtoBuf::Array1Bool*>(&::MLB::ProtoBuf::Array1Bool::default_instance());
  array1_string_ = const_cast< ::MLB::ProtoBuf::Array1String*>(&::MLB::ProtoBuf::Array1String::default_instance());
  array2_double_ = const_cast< ::MLB::ProtoBuf::Array2Double*>(&::MLB::ProtoBuf::Array2Double::default_instance());
  array2_float_ = const_cast< ::MLB::ProtoBuf::Array2Float*>(&::MLB::ProtoBuf::Array2Float::default_instance());
  array2_int32_ = const_cast< ::MLB::ProtoBuf::Array2Int32*>(&::MLB::ProtoBuf::Array2Int32::default_instance());
  array2_int64_ = const_cast< ::MLB::ProtoBuf::Array2Int64*>(&::MLB::ProtoBuf::Array2Int64::default_instance());
  array2_uint32_ = const_cast< ::MLB::ProtoBuf::Array2UInt32*>(&::MLB::ProtoBuf::Array2UInt32::default_instance());
  array2_uint64_ = const_cast< ::MLB::ProtoBuf::Array2UInt32*>(&::MLB::ProtoBuf::Array2UInt32::default_instance());
  array2_bool_ = const_cast< ::MLB::ProtoBuf::Array2Bool*>(&::MLB::ProtoBuf::Array2Bool::default_instance());
  array2_string_ = const_cast< ::MLB::ProtoBuf::Array2String*>(&::MLB::ProtoBuf::Array2String::default_instance());
}

FieldTypeTest::FieldTypeTest(const FieldTypeTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.FieldTypeTest)
}

void FieldTypeTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  scalar_double_ = 0;
  scalar_float_ = 0;
  scalar_int32_ = 0;
  scalar_int64_ = GOOGLE_LONGLONG(0);
  scalar_uint32_ = 0u;
  scalar_uint64_ = GOOGLE_ULONGLONG(0);
  scalar_sint32_ = 0;
  scalar_sint64_ = GOOGLE_LONGLONG(0);
  scalar_fixed32_ = 0u;
  scalar_fixed64_ = GOOGLE_ULONGLONG(0);
  scalar_sfixed32_ = 0;
  scalar_sfixed64_ = GOOGLE_LONGLONG(0);
  scalar_bool_ = false;
  scalar_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scalar_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scalar_bigcurrency_ = 1;
  scalar_bigcurrencyposition_ = NULL;
  array1_double_ = NULL;
  array1_float_ = NULL;
  array1_int32_ = NULL;
  array1_int64_ = NULL;
  array1_uint32_ = NULL;
  array1_uint64_ = NULL;
  array1_bool_ = NULL;
  array1_string_ = NULL;
  array2_double_ = NULL;
  array2_float_ = NULL;
  array2_int32_ = NULL;
  array2_int64_ = NULL;
  array2_uint32_ = NULL;
  array2_uint64_ = NULL;
  array2_bool_ = NULL;
  array2_string_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldTypeTest::~FieldTypeTest() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.FieldTypeTest)
  SharedDtor();
}

void FieldTypeTest::SharedDtor() {
  if (scalar_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scalar_string_;
  }
  if (scalar_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scalar_bytes_;
  }
  if (this != default_instance_) {
    delete scalar_bigcurrencyposition_;
    delete array1_double_;
    delete array1_float_;
    delete array1_int32_;
    delete array1_int64_;
    delete array1_uint32_;
    delete array1_uint64_;
    delete array1_bool_;
    delete array1_string_;
    delete array2_double_;
    delete array2_float_;
    delete array2_int32_;
    delete array2_int64_;
    delete array2_uint32_;
    delete array2_uint64_;
    delete array2_bool_;
    delete array2_string_;
  }
}

void FieldTypeTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldTypeTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldTypeTest_descriptor_;
}

const FieldTypeTest& FieldTypeTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FieldTypeTest_2eproto();
  return *default_instance_;
}

FieldTypeTest* FieldTypeTest::default_instance_ = NULL;

FieldTypeTest* FieldTypeTest::New() const {
  return new FieldTypeTest;
}

void FieldTypeTest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FieldTypeTest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, scalar_sint32_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(scalar_sint64_, scalar_sfixed64_);
    scalar_bool_ = false;
    if (has_scalar_string()) {
      if (scalar_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scalar_string_->clear();
      }
    }
    if (has_scalar_bytes()) {
      if (scalar_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scalar_bytes_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    scalar_bigcurrency_ = 1;
    if (has_scalar_bigcurrencyposition()) {
      if (scalar_bigcurrencyposition_ != NULL) scalar_bigcurrencyposition_->::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 248) {
    if (has_array1_double()) {
      if (array1_double_ != NULL) array1_double_->::MLB::ProtoBuf::Array1Double::Clear();
    }
    if (has_array1_float()) {
      if (array1_float_ != NULL) array1_float_->::MLB::ProtoBuf::Array1Float::Clear();
    }
    if (has_array1_int32()) {
      if (array1_int32_ != NULL) array1_int32_->::MLB::ProtoBuf::Array1Int32::Clear();
    }
    if (has_array1_int64()) {
      if (array1_int64_ != NULL) array1_int64_->::MLB::ProtoBuf::Array1Int64::Clear();
    }
    if (has_array1_uint32()) {
      if (array1_uint32_ != NULL) array1_uint32_->::MLB::ProtoBuf::Array1UInt32::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_array1_uint64()) {
      if (array1_uint64_ != NULL) array1_uint64_->::MLB::ProtoBuf::Array1UInt32::Clear();
    }
    if (has_array1_bool()) {
      if (array1_bool_ != NULL) array1_bool_->::MLB::ProtoBuf::Array1Bool::Clear();
    }
    if (has_array1_string()) {
      if (array1_string_ != NULL) array1_string_->::MLB::ProtoBuf::Array1String::Clear();
    }
    if (has_array2_double()) {
      if (array2_double_ != NULL) array2_double_->::MLB::ProtoBuf::Array2Double::Clear();
    }
    if (has_array2_float()) {
      if (array2_float_ != NULL) array2_float_->::MLB::ProtoBuf::Array2Float::Clear();
    }
    if (has_array2_int32()) {
      if (array2_int32_ != NULL) array2_int32_->::MLB::ProtoBuf::Array2Int32::Clear();
    }
    if (has_array2_int64()) {
      if (array2_int64_ != NULL) array2_int64_->::MLB::ProtoBuf::Array2Int64::Clear();
    }
    if (has_array2_uint32()) {
      if (array2_uint32_ != NULL) array2_uint32_->::MLB::ProtoBuf::Array2UInt32::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 458752) {
    if (has_array2_uint64()) {
      if (array2_uint64_ != NULL) array2_uint64_->::MLB::ProtoBuf::Array2UInt32::Clear();
    }
    if (has_array2_bool()) {
      if (array2_bool_ != NULL) array2_bool_->::MLB::ProtoBuf::Array2Bool::Clear();
    }
    if (has_array2_string()) {
      if (array2_string_ != NULL) array2_string_->::MLB::ProtoBuf::Array2String::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vector_double_.Clear();
  vector_float_.Clear();
  vector_int32_.Clear();
  vector_int64_.Clear();
  vector_uint32_.Clear();
  vector_uint64_.Clear();
  vector_sint32_.Clear();
  vector_sint64_.Clear();
  vector_fixed32_.Clear();
  vector_fixed64_.Clear();
  vector_sfixed32_.Clear();
  vector_sfixed64_.Clear();
  vector_bool_.Clear();
  vector_string_.Clear();
  vector_bytes_.Clear();
  vector_bigcurrency_.Clear();
  vector_bigcurrencyposition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldTypeTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.FieldTypeTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_scalar_double;
        break;
      }

      // optional double scalar_double = 101;
      case 101: {
        if (tag == 809) {
         parse_scalar_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scalar_double_)));
          set_has_scalar_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(821)) goto parse_scalar_float;
        break;
      }

      // optional float scalar_float = 102;
      case 102: {
        if (tag == 821) {
         parse_scalar_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalar_float_)));
          set_has_scalar_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_scalar_int32;
        break;
      }

      // optional int32 scalar_int32 = 103;
      case 103: {
        if (tag == 824) {
         parse_scalar_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scalar_int32_)));
          set_has_scalar_int32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_scalar_int64;
        break;
      }

      // optional int64 scalar_int64 = 104;
      case 104: {
        if (tag == 832) {
         parse_scalar_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scalar_int64_)));
          set_has_scalar_int64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_scalar_uint32;
        break;
      }

      // optional uint32 scalar_uint32 = 105;
      case 105: {
        if (tag == 840) {
         parse_scalar_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scalar_uint32_)));
          set_has_scalar_uint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_scalar_uint64;
        break;
      }

      // optional uint64 scalar_uint64 = 106;
      case 106: {
        if (tag == 848) {
         parse_scalar_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scalar_uint64_)));
          set_has_scalar_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_scalar_sint32;
        break;
      }

      // optional sint32 scalar_sint32 = 107;
      case 107: {
        if (tag == 856) {
         parse_scalar_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scalar_sint32_)));
          set_has_scalar_sint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_scalar_sint64;
        break;
      }

      // optional sint64 scalar_sint64 = 108;
      case 108: {
        if (tag == 864) {
         parse_scalar_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scalar_sint64_)));
          set_has_scalar_sint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(877)) goto parse_scalar_fixed32;
        break;
      }

      // optional fixed32 scalar_fixed32 = 109;
      case 109: {
        if (tag == 877) {
         parse_scalar_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &scalar_fixed32_)));
          set_has_scalar_fixed32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(881)) goto parse_scalar_fixed64;
        break;
      }

      // optional fixed64 scalar_fixed64 = 110;
      case 110: {
        if (tag == 881) {
         parse_scalar_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &scalar_fixed64_)));
          set_has_scalar_fixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(893)) goto parse_scalar_sfixed32;
        break;
      }

      // optional sfixed32 scalar_sfixed32 = 111;
      case 111: {
        if (tag == 893) {
         parse_scalar_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &scalar_sfixed32_)));
          set_has_scalar_sfixed32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(897)) goto parse_scalar_sfixed64;
        break;
      }

      // optional sfixed64 scalar_sfixed64 = 112;
      case 112: {
        if (tag == 897) {
         parse_scalar_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &scalar_sfixed64_)));
          set_has_scalar_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(904)) goto parse_scalar_bool;
        break;
      }

      // optional bool scalar_bool = 113;
      case 113: {
        if (tag == 904) {
         parse_scalar_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scalar_bool_)));
          set_has_scalar_bool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_scalar_string;
        break;
      }

      // optional string scalar_string = 114;
      case 114: {
        if (tag == 914) {
         parse_scalar_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scalar_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scalar_string().data(), this->scalar_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scalar_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_scalar_bytes;
        break;
      }

      // optional bytes scalar_bytes = 115;
      case 115: {
        if (tag == 922) {
         parse_scalar_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scalar_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(928)) goto parse_scalar_BigCurrency;
        break;
      }

      // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
      case 116: {
        if (tag == 928) {
         parse_scalar_BigCurrency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value)) {
            set_scalar_bigcurrency(static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(116, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(938)) goto parse_scalar_BigCurrencyPosition;
        break;
      }

      // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
      case 117: {
        if (tag == 938) {
         parse_scalar_BigCurrencyPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar_bigcurrencyposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1609)) goto parse_vector_double;
        break;
      }

      // repeated double vector_double = 201;
      case 201: {
        if (tag == 1609) {
         parse_vector_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 1609, input, this->mutable_vector_double())));
        } else if (tag == 1610) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vector_double())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1609)) goto parse_vector_double;
        if (input->ExpectTag(1621)) goto parse_vector_float;
        break;
      }

      // repeated float vector_float = 202;
      case 202: {
        if (tag == 1621) {
         parse_vector_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 1621, input, this->mutable_vector_float())));
        } else if (tag == 1618) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vector_float())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1621)) goto parse_vector_float;
        if (input->ExpectTag(1624)) goto parse_vector_int32;
        break;
      }

      // repeated int32 vector_int32 = 203;
      case 203: {
        if (tag == 1624) {
         parse_vector_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 1624, input, this->mutable_vector_int32())));
        } else if (tag == 1626) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vector_int32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1624)) goto parse_vector_int32;
        if (input->ExpectTag(1632)) goto parse_vector_int64;
        break;
      }

      // repeated int64 vector_int64 = 204;
      case 204: {
        if (tag == 1632) {
         parse_vector_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 1632, input, this->mutable_vector_int64())));
        } else if (tag == 1634) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vector_int64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1632)) goto parse_vector_int64;
        if (input->ExpectTag(1640)) goto parse_vector_uint32;
        break;
      }

      // repeated uint32 vector_uint32 = 205;
      case 205: {
        if (tag == 1640) {
         parse_vector_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 1640, input, this->mutable_vector_uint32())));
        } else if (tag == 1642) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vector_uint32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1640)) goto parse_vector_uint32;
        if (input->ExpectTag(1648)) goto parse_vector_uint64;
        break;
      }

      // repeated uint64 vector_uint64 = 206;
      case 206: {
        if (tag == 1648) {
         parse_vector_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 1648, input, this->mutable_vector_uint64())));
        } else if (tag == 1650) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vector_uint64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1648)) goto parse_vector_uint64;
        if (input->ExpectTag(1656)) goto parse_vector_sint32;
        break;
      }

      // repeated sint32 vector_sint32 = 207;
      case 207: {
        if (tag == 1656) {
         parse_vector_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 1656, input, this->mutable_vector_sint32())));
        } else if (tag == 1658) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_vector_sint32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1656)) goto parse_vector_sint32;
        if (input->ExpectTag(1664)) goto parse_vector_sint64;
        break;
      }

      // repeated sint64 vector_sint64 = 208;
      case 208: {
        if (tag == 1664) {
         parse_vector_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 1664, input, this->mutable_vector_sint64())));
        } else if (tag == 1666) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_vector_sint64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1664)) goto parse_vector_sint64;
        if (input->ExpectTag(1677)) goto parse_vector_fixed32;
        break;
      }

      // repeated fixed32 vector_fixed32 = 209;
      case 209: {
        if (tag == 1677) {
         parse_vector_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 1677, input, this->mutable_vector_fixed32())));
        } else if (tag == 1674) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_vector_fixed32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1677)) goto parse_vector_fixed32;
        if (input->ExpectTag(1681)) goto parse_vector_fixed64;
        break;
      }

      // repeated fixed64 vector_fixed64 = 210;
      case 210: {
        if (tag == 1681) {
         parse_vector_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 1681, input, this->mutable_vector_fixed64())));
        } else if (tag == 1682) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_vector_fixed64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1681)) goto parse_vector_fixed64;
        if (input->ExpectTag(1693)) goto parse_vector_sfixed32;
        break;
      }

      // repeated sfixed32 vector_sfixed32 = 211;
      case 211: {
        if (tag == 1693) {
         parse_vector_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 2, 1693, input, this->mutable_vector_sfixed32())));
        } else if (tag == 1690) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_vector_sfixed32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1693)) goto parse_vector_sfixed32;
        if (input->ExpectTag(1697)) goto parse_vector_sfixed64;
        break;
      }

      // repeated sfixed64 vector_sfixed64 = 212;
      case 212: {
        if (tag == 1697) {
         parse_vector_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 2, 1697, input, this->mutable_vector_sfixed64())));
        } else if (tag == 1698) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_vector_sfixed64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1697)) goto parse_vector_sfixed64;
        if (input->ExpectTag(1704)) goto parse_vector_bool;
        break;
      }

      // repeated bool vector_bool = 213;
      case 213: {
        if (tag == 1704) {
         parse_vector_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 1704, input, this->mutable_vector_bool())));
        } else if (tag == 1706) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_vector_bool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1704)) goto parse_vector_bool;
        if (input->ExpectTag(1714)) goto parse_vector_string;
        break;
      }

      // repeated string vector_string = 214;
      case 214: {
        if (tag == 1714) {
         parse_vector_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vector_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vector_string(this->vector_string_size() - 1).data(),
            this->vector_string(this->vector_string_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vector_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1714)) goto parse_vector_string;
        if (input->ExpectTag(1722)) goto parse_vector_bytes;
        break;
      }

      // repeated bytes vector_bytes = 215;
      case 215: {
        if (tag == 1722) {
         parse_vector_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_vector_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1722)) goto parse_vector_bytes;
        if (input->ExpectTag(1728)) goto parse_vector_BigCurrency;
        break;
      }

      // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
      case 216: {
        if (tag == 1728) {
         parse_vector_BigCurrency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value)) {
            add_vector_bigcurrency(static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(216, value);
          }
        } else if (tag == 1730) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid,
                 this->mutable_vector_bigcurrency())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1728)) goto parse_vector_BigCurrency;
        if (input->ExpectTag(1738)) goto parse_vector_BigCurrencyPosition;
        break;
      }

      // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
      case 217: {
        if (tag == 1738) {
         parse_vector_BigCurrencyPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_bigcurrencyposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1738)) goto parse_vector_BigCurrencyPosition;
        if (input->ExpectTag(2410)) goto parse_array1_double;
        break;
      }

      // optional .MLB.ProtoBuf.Array1Double array1_double = 301;
      case 301: {
        if (tag == 2410) {
         parse_array1_double:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_double()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2418)) goto parse_array1_float;
        break;
      }

      // optional .MLB.ProtoBuf.Array1Float array1_float = 302;
      case 302: {
        if (tag == 2418) {
         parse_array1_float:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_float()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2426)) goto parse_array1_int32;
        break;
      }

      // optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
      case 303: {
        if (tag == 2426) {
         parse_array1_int32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_int32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2434)) goto parse_array1_int64;
        break;
      }

      // optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
      case 304: {
        if (tag == 2434) {
         parse_array1_int64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_int64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2442)) goto parse_array1_uint32;
        break;
      }

      // optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
      case 305: {
        if (tag == 2442) {
         parse_array1_uint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_uint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2450)) goto parse_array1_uint64;
        break;
      }

      // optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
      case 306: {
        if (tag == 2450) {
         parse_array1_uint64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_uint64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2506)) goto parse_array1_bool;
        break;
      }

      // optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
      case 313: {
        if (tag == 2506) {
         parse_array1_bool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_bool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2514)) goto parse_array1_string;
        break;
      }

      // optional .MLB.ProtoBuf.Array1String array1_string = 314;
      case 314: {
        if (tag == 2514) {
         parse_array1_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array1_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3210)) goto parse_array2_double;
        break;
      }

      // optional .MLB.ProtoBuf.Array2Double array2_double = 401;
      case 401: {
        if (tag == 3210) {
         parse_array2_double:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_double()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3218)) goto parse_array2_float;
        break;
      }

      // optional .MLB.ProtoBuf.Array2Float array2_float = 402;
      case 402: {
        if (tag == 3218) {
         parse_array2_float:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_float()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3226)) goto parse_array2_int32;
        break;
      }

      // optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
      case 403: {
        if (tag == 3226) {
         parse_array2_int32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_int32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3234)) goto parse_array2_int64;
        break;
      }

      // optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
      case 404: {
        if (tag == 3234) {
         parse_array2_int64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_int64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3242)) goto parse_array2_uint32;
        break;
      }

      // optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
      case 405: {
        if (tag == 3242) {
         parse_array2_uint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_uint32()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3250)) goto parse_array2_uint64;
        break;
      }

      // optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
      case 406: {
        if (tag == 3250) {
         parse_array2_uint64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_uint64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3306)) goto parse_array2_bool;
        break;
      }

      // optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
      case 413: {
        if (tag == 3306) {
         parse_array2_bool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_bool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3314)) goto parse_array2_string;
        break;
      }

      // optional .MLB.ProtoBuf.Array2String array2_string = 414;
      case 414: {
        if (tag == 3314) {
         parse_array2_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array2_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.FieldTypeTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.FieldTypeTest)
  return false;
#undef DO_
}

void FieldTypeTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.FieldTypeTest)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional double scalar_double = 101;
  if (has_scalar_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->scalar_double(), output);
  }

  // optional float scalar_float = 102;
  if (has_scalar_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->scalar_float(), output);
  }

  // optional int32 scalar_int32 = 103;
  if (has_scalar_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->scalar_int32(), output);
  }

  // optional int64 scalar_int64 = 104;
  if (has_scalar_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(104, this->scalar_int64(), output);
  }

  // optional uint32 scalar_uint32 = 105;
  if (has_scalar_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(105, this->scalar_uint32(), output);
  }

  // optional uint64 scalar_uint64 = 106;
  if (has_scalar_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(106, this->scalar_uint64(), output);
  }

  // optional sint32 scalar_sint32 = 107;
  if (has_scalar_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(107, this->scalar_sint32(), output);
  }

  // optional sint64 scalar_sint64 = 108;
  if (has_scalar_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(108, this->scalar_sint64(), output);
  }

  // optional fixed32 scalar_fixed32 = 109;
  if (has_scalar_fixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(109, this->scalar_fixed32(), output);
  }

  // optional fixed64 scalar_fixed64 = 110;
  if (has_scalar_fixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(110, this->scalar_fixed64(), output);
  }

  // optional sfixed32 scalar_sfixed32 = 111;
  if (has_scalar_sfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(111, this->scalar_sfixed32(), output);
  }

  // optional sfixed64 scalar_sfixed64 = 112;
  if (has_scalar_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(112, this->scalar_sfixed64(), output);
  }

  // optional bool scalar_bool = 113;
  if (has_scalar_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(113, this->scalar_bool(), output);
  }

  // optional string scalar_string = 114;
  if (has_scalar_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scalar_string().data(), this->scalar_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scalar_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      114, this->scalar_string(), output);
  }

  // optional bytes scalar_bytes = 115;
  if (has_scalar_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      115, this->scalar_bytes(), output);
  }

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
  if (has_scalar_bigcurrency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      116, this->scalar_bigcurrency(), output);
  }

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
  if (has_scalar_bigcurrencyposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->scalar_bigcurrencyposition(), output);
  }

  // repeated double vector_double = 201;
  for (int i = 0; i < this->vector_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      201, this->vector_double(i), output);
  }

  // repeated float vector_float = 202;
  for (int i = 0; i < this->vector_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      202, this->vector_float(i), output);
  }

  // repeated int32 vector_int32 = 203;
  for (int i = 0; i < this->vector_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      203, this->vector_int32(i), output);
  }

  // repeated int64 vector_int64 = 204;
  for (int i = 0; i < this->vector_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      204, this->vector_int64(i), output);
  }

  // repeated uint32 vector_uint32 = 205;
  for (int i = 0; i < this->vector_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      205, this->vector_uint32(i), output);
  }

  // repeated uint64 vector_uint64 = 206;
  for (int i = 0; i < this->vector_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      206, this->vector_uint64(i), output);
  }

  // repeated sint32 vector_sint32 = 207;
  for (int i = 0; i < this->vector_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      207, this->vector_sint32(i), output);
  }

  // repeated sint64 vector_sint64 = 208;
  for (int i = 0; i < this->vector_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      208, this->vector_sint64(i), output);
  }

  // repeated fixed32 vector_fixed32 = 209;
  for (int i = 0; i < this->vector_fixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      209, this->vector_fixed32(i), output);
  }

  // repeated fixed64 vector_fixed64 = 210;
  for (int i = 0; i < this->vector_fixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      210, this->vector_fixed64(i), output);
  }

  // repeated sfixed32 vector_sfixed32 = 211;
  for (int i = 0; i < this->vector_sfixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      211, this->vector_sfixed32(i), output);
  }

  // repeated sfixed64 vector_sfixed64 = 212;
  for (int i = 0; i < this->vector_sfixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      212, this->vector_sfixed64(i), output);
  }

  // repeated bool vector_bool = 213;
  for (int i = 0; i < this->vector_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      213, this->vector_bool(i), output);
  }

  // repeated string vector_string = 214;
  for (int i = 0; i < this->vector_string_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->vector_string(i).data(), this->vector_string(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "vector_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      214, this->vector_string(i), output);
  }

  // repeated bytes vector_bytes = 215;
  for (int i = 0; i < this->vector_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      215, this->vector_bytes(i), output);
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
  for (int i = 0; i < this->vector_bigcurrency_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      216, this->vector_bigcurrency(i), output);
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
  for (int i = 0; i < this->vector_bigcurrencyposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      217, this->vector_bigcurrencyposition(i), output);
  }

  // optional .MLB.ProtoBuf.Array1Double array1_double = 301;
  if (has_array1_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->array1_double(), output);
  }

  // optional .MLB.ProtoBuf.Array1Float array1_float = 302;
  if (has_array1_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->array1_float(), output);
  }

  // optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
  if (has_array1_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->array1_int32(), output);
  }

  // optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
  if (has_array1_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->array1_int64(), output);
  }

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
  if (has_array1_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305, this->array1_uint32(), output);
  }

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
  if (has_array1_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306, this->array1_uint64(), output);
  }

  // optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
  if (has_array1_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      313, this->array1_bool(), output);
  }

  // optional .MLB.ProtoBuf.Array1String array1_string = 314;
  if (has_array1_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      314, this->array1_string(), output);
  }

  // optional .MLB.ProtoBuf.Array2Double array2_double = 401;
  if (has_array2_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401, this->array2_double(), output);
  }

  // optional .MLB.ProtoBuf.Array2Float array2_float = 402;
  if (has_array2_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      402, this->array2_float(), output);
  }

  // optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
  if (has_array2_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      403, this->array2_int32(), output);
  }

  // optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
  if (has_array2_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      404, this->array2_int64(), output);
  }

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
  if (has_array2_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      405, this->array2_uint32(), output);
  }

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
  if (has_array2_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      406, this->array2_uint64(), output);
  }

  // optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
  if (has_array2_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      413, this->array2_bool(), output);
  }

  // optional .MLB.ProtoBuf.Array2String array2_string = 414;
  if (has_array2_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      414, this->array2_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.FieldTypeTest)
}

::google::protobuf::uint8* FieldTypeTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.FieldTypeTest)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional double scalar_double = 101;
  if (has_scalar_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->scalar_double(), target);
  }

  // optional float scalar_float = 102;
  if (has_scalar_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(102, this->scalar_float(), target);
  }

  // optional int32 scalar_int32 = 103;
  if (has_scalar_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->scalar_int32(), target);
  }

  // optional int64 scalar_int64 = 104;
  if (has_scalar_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(104, this->scalar_int64(), target);
  }

  // optional uint32 scalar_uint32 = 105;
  if (has_scalar_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(105, this->scalar_uint32(), target);
  }

  // optional uint64 scalar_uint64 = 106;
  if (has_scalar_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(106, this->scalar_uint64(), target);
  }

  // optional sint32 scalar_sint32 = 107;
  if (has_scalar_sint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(107, this->scalar_sint32(), target);
  }

  // optional sint64 scalar_sint64 = 108;
  if (has_scalar_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(108, this->scalar_sint64(), target);
  }

  // optional fixed32 scalar_fixed32 = 109;
  if (has_scalar_fixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(109, this->scalar_fixed32(), target);
  }

  // optional fixed64 scalar_fixed64 = 110;
  if (has_scalar_fixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(110, this->scalar_fixed64(), target);
  }

  // optional sfixed32 scalar_sfixed32 = 111;
  if (has_scalar_sfixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(111, this->scalar_sfixed32(), target);
  }

  // optional sfixed64 scalar_sfixed64 = 112;
  if (has_scalar_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(112, this->scalar_sfixed64(), target);
  }

  // optional bool scalar_bool = 113;
  if (has_scalar_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(113, this->scalar_bool(), target);
  }

  // optional string scalar_string = 114;
  if (has_scalar_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scalar_string().data(), this->scalar_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scalar_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        114, this->scalar_string(), target);
  }

  // optional bytes scalar_bytes = 115;
  if (has_scalar_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        115, this->scalar_bytes(), target);
  }

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
  if (has_scalar_bigcurrency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      116, this->scalar_bigcurrency(), target);
  }

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
  if (has_scalar_bigcurrencyposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->scalar_bigcurrencyposition(), target);
  }

  // repeated double vector_double = 201;
  for (int i = 0; i < this->vector_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(201, this->vector_double(i), target);
  }

  // repeated float vector_float = 202;
  for (int i = 0; i < this->vector_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(202, this->vector_float(i), target);
  }

  // repeated int32 vector_int32 = 203;
  for (int i = 0; i < this->vector_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(203, this->vector_int32(i), target);
  }

  // repeated int64 vector_int64 = 204;
  for (int i = 0; i < this->vector_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(204, this->vector_int64(i), target);
  }

  // repeated uint32 vector_uint32 = 205;
  for (int i = 0; i < this->vector_uint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(205, this->vector_uint32(i), target);
  }

  // repeated uint64 vector_uint64 = 206;
  for (int i = 0; i < this->vector_uint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(206, this->vector_uint64(i), target);
  }

  // repeated sint32 vector_sint32 = 207;
  for (int i = 0; i < this->vector_sint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(207, this->vector_sint32(i), target);
  }

  // repeated sint64 vector_sint64 = 208;
  for (int i = 0; i < this->vector_sint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(208, this->vector_sint64(i), target);
  }

  // repeated fixed32 vector_fixed32 = 209;
  for (int i = 0; i < this->vector_fixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(209, this->vector_fixed32(i), target);
  }

  // repeated fixed64 vector_fixed64 = 210;
  for (int i = 0; i < this->vector_fixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(210, this->vector_fixed64(i), target);
  }

  // repeated sfixed32 vector_sfixed32 = 211;
  for (int i = 0; i < this->vector_sfixed32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(211, this->vector_sfixed32(i), target);
  }

  // repeated sfixed64 vector_sfixed64 = 212;
  for (int i = 0; i < this->vector_sfixed64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed64ToArray(212, this->vector_sfixed64(i), target);
  }

  // repeated bool vector_bool = 213;
  for (int i = 0; i < this->vector_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(213, this->vector_bool(i), target);
  }

  // repeated string vector_string = 214;
  for (int i = 0; i < this->vector_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vector_string(i).data(), this->vector_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vector_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(214, this->vector_string(i), target);
  }

  // repeated bytes vector_bytes = 215;
  for (int i = 0; i < this->vector_bytes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(215, this->vector_bytes(i), target);
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
  for (int i = 0; i < this->vector_bigcurrency_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      216, this->vector_bigcurrency(i), target);
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
  for (int i = 0; i < this->vector_bigcurrencyposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        217, this->vector_bigcurrencyposition(i), target);
  }

  // optional .MLB.ProtoBuf.Array1Double array1_double = 301;
  if (has_array1_double()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->array1_double(), target);
  }

  // optional .MLB.ProtoBuf.Array1Float array1_float = 302;
  if (has_array1_float()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->array1_float(), target);
  }

  // optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
  if (has_array1_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->array1_int32(), target);
  }

  // optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
  if (has_array1_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->array1_int64(), target);
  }

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
  if (has_array1_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        305, this->array1_uint32(), target);
  }

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
  if (has_array1_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        306, this->array1_uint64(), target);
  }

  // optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
  if (has_array1_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        313, this->array1_bool(), target);
  }

  // optional .MLB.ProtoBuf.Array1String array1_string = 314;
  if (has_array1_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        314, this->array1_string(), target);
  }

  // optional .MLB.ProtoBuf.Array2Double array2_double = 401;
  if (has_array2_double()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401, this->array2_double(), target);
  }

  // optional .MLB.ProtoBuf.Array2Float array2_float = 402;
  if (has_array2_float()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        402, this->array2_float(), target);
  }

  // optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
  if (has_array2_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        403, this->array2_int32(), target);
  }

  // optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
  if (has_array2_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        404, this->array2_int64(), target);
  }

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
  if (has_array2_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        405, this->array2_uint32(), target);
  }

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
  if (has_array2_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        406, this->array2_uint64(), target);
  }

  // optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
  if (has_array2_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        413, this->array2_bool(), target);
  }

  // optional .MLB.ProtoBuf.Array2String array2_string = 414;
  if (has_array2_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        414, this->array2_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.FieldTypeTest)
  return target;
}

int FieldTypeTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional double scalar_double = 101;
    if (has_scalar_double()) {
      total_size += 2 + 8;
    }

    // optional float scalar_float = 102;
    if (has_scalar_float()) {
      total_size += 2 + 4;
    }

    // optional int32 scalar_int32 = 103;
    if (has_scalar_int32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scalar_int32());
    }

    // optional int64 scalar_int64 = 104;
    if (has_scalar_int64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scalar_int64());
    }

    // optional uint32 scalar_uint32 = 105;
    if (has_scalar_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scalar_uint32());
    }

    // optional uint64 scalar_uint64 = 106;
    if (has_scalar_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scalar_uint64());
    }

    // optional sint32 scalar_sint32 = 107;
    if (has_scalar_sint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scalar_sint32());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint64 scalar_sint64 = 108;
    if (has_scalar_sint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scalar_sint64());
    }

    // optional fixed32 scalar_fixed32 = 109;
    if (has_scalar_fixed32()) {
      total_size += 2 + 4;
    }

    // optional fixed64 scalar_fixed64 = 110;
    if (has_scalar_fixed64()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 scalar_sfixed32 = 111;
    if (has_scalar_sfixed32()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 scalar_sfixed64 = 112;
    if (has_scalar_sfixed64()) {
      total_size += 2 + 8;
    }

    // optional bool scalar_bool = 113;
    if (has_scalar_bool()) {
      total_size += 2 + 1;
    }

    // optional string scalar_string = 114;
    if (has_scalar_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scalar_string());
    }

    // optional bytes scalar_bytes = 115;
    if (has_scalar_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->scalar_bytes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
    if (has_scalar_bigcurrency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scalar_bigcurrency());
    }

    // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
    if (has_scalar_bigcurrencyposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar_bigcurrencyposition());
    }

  }
  if (_has_bits_[35 / 32] & (0xffu << (35 % 32))) {
    // optional .MLB.ProtoBuf.Array1Double array1_double = 301;
    if (has_array1_double()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_double());
    }

    // optional .MLB.ProtoBuf.Array1Float array1_float = 302;
    if (has_array1_float()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_float());
    }

    // optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
    if (has_array1_int32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_int32());
    }

    // optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
    if (has_array1_int64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_int64());
    }

    // optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
    if (has_array1_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_uint32());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
    if (has_array1_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_uint64());
    }

    // optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
    if (has_array1_bool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_bool());
    }

    // optional .MLB.ProtoBuf.Array1String array1_string = 314;
    if (has_array1_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array1_string());
    }

    // optional .MLB.ProtoBuf.Array2Double array2_double = 401;
    if (has_array2_double()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_double());
    }

    // optional .MLB.ProtoBuf.Array2Float array2_float = 402;
    if (has_array2_float()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_float());
    }

    // optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
    if (has_array2_int32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_int32());
    }

    // optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
    if (has_array2_int64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_int64());
    }

    // optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
    if (has_array2_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_uint32());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
    if (has_array2_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_uint64());
    }

    // optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
    if (has_array2_bool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_bool());
    }

    // optional .MLB.ProtoBuf.Array2String array2_string = 414;
    if (has_array2_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array2_string());
    }

  }
  // repeated double vector_double = 201;
  {
    int data_size = 0;
    data_size = 8 * this->vector_double_size();
    total_size += 2 * this->vector_double_size() + data_size;
  }

  // repeated float vector_float = 202;
  {
    int data_size = 0;
    data_size = 4 * this->vector_float_size();
    total_size += 2 * this->vector_float_size() + data_size;
  }

  // repeated int32 vector_int32 = 203;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vector_int32(i));
    }
    total_size += 2 * this->vector_int32_size() + data_size;
  }

  // repeated int64 vector_int64 = 204;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vector_int64(i));
    }
    total_size += 2 * this->vector_int64_size() + data_size;
  }

  // repeated uint32 vector_uint32 = 205;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vector_uint32(i));
    }
    total_size += 2 * this->vector_uint32_size() + data_size;
  }

  // repeated uint64 vector_uint64 = 206;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vector_uint64(i));
    }
    total_size += 2 * this->vector_uint64_size() + data_size;
  }

  // repeated sint32 vector_sint32 = 207;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_sint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->vector_sint32(i));
    }
    total_size += 2 * this->vector_sint32_size() + data_size;
  }

  // repeated sint64 vector_sint64 = 208;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_sint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->vector_sint64(i));
    }
    total_size += 2 * this->vector_sint64_size() + data_size;
  }

  // repeated fixed32 vector_fixed32 = 209;
  {
    int data_size = 0;
    data_size = 4 * this->vector_fixed32_size();
    total_size += 2 * this->vector_fixed32_size() + data_size;
  }

  // repeated fixed64 vector_fixed64 = 210;
  {
    int data_size = 0;
    data_size = 8 * this->vector_fixed64_size();
    total_size += 2 * this->vector_fixed64_size() + data_size;
  }

  // repeated sfixed32 vector_sfixed32 = 211;
  {
    int data_size = 0;
    data_size = 4 * this->vector_sfixed32_size();
    total_size += 2 * this->vector_sfixed32_size() + data_size;
  }

  // repeated sfixed64 vector_sfixed64 = 212;
  {
    int data_size = 0;
    data_size = 8 * this->vector_sfixed64_size();
    total_size += 2 * this->vector_sfixed64_size() + data_size;
  }

  // repeated bool vector_bool = 213;
  {
    int data_size = 0;
    data_size = 1 * this->vector_bool_size();
    total_size += 2 * this->vector_bool_size() + data_size;
  }

  // repeated string vector_string = 214;
  total_size += 2 * this->vector_string_size();
  for (int i = 0; i < this->vector_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vector_string(i));
  }

  // repeated bytes vector_bytes = 215;
  total_size += 2 * this->vector_bytes_size();
  for (int i = 0; i < this->vector_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->vector_bytes(i));
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
  {
    int data_size = 0;
    for (int i = 0; i < this->vector_bigcurrency_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->vector_bigcurrency(i));
    }
    total_size += 2 * this->vector_bigcurrency_size() + data_size;
  }

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
  total_size += 2 * this->vector_bigcurrencyposition_size();
  for (int i = 0; i < this->vector_bigcurrencyposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_bigcurrencyposition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldTypeTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldTypeTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldTypeTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldTypeTest::MergeFrom(const FieldTypeTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  vector_double_.MergeFrom(from.vector_double_);
  vector_float_.MergeFrom(from.vector_float_);
  vector_int32_.MergeFrom(from.vector_int32_);
  vector_int64_.MergeFrom(from.vector_int64_);
  vector_uint32_.MergeFrom(from.vector_uint32_);
  vector_uint64_.MergeFrom(from.vector_uint64_);
  vector_sint32_.MergeFrom(from.vector_sint32_);
  vector_sint64_.MergeFrom(from.vector_sint64_);
  vector_fixed32_.MergeFrom(from.vector_fixed32_);
  vector_fixed64_.MergeFrom(from.vector_fixed64_);
  vector_sfixed32_.MergeFrom(from.vector_sfixed32_);
  vector_sfixed64_.MergeFrom(from.vector_sfixed64_);
  vector_bool_.MergeFrom(from.vector_bool_);
  vector_string_.MergeFrom(from.vector_string_);
  vector_bytes_.MergeFrom(from.vector_bytes_);
  vector_bigcurrency_.MergeFrom(from.vector_bigcurrency_);
  vector_bigcurrencyposition_.MergeFrom(from.vector_bigcurrencyposition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scalar_double()) {
      set_scalar_double(from.scalar_double());
    }
    if (from.has_scalar_float()) {
      set_scalar_float(from.scalar_float());
    }
    if (from.has_scalar_int32()) {
      set_scalar_int32(from.scalar_int32());
    }
    if (from.has_scalar_int64()) {
      set_scalar_int64(from.scalar_int64());
    }
    if (from.has_scalar_uint32()) {
      set_scalar_uint32(from.scalar_uint32());
    }
    if (from.has_scalar_uint64()) {
      set_scalar_uint64(from.scalar_uint64());
    }
    if (from.has_scalar_sint32()) {
      set_scalar_sint32(from.scalar_sint32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scalar_sint64()) {
      set_scalar_sint64(from.scalar_sint64());
    }
    if (from.has_scalar_fixed32()) {
      set_scalar_fixed32(from.scalar_fixed32());
    }
    if (from.has_scalar_fixed64()) {
      set_scalar_fixed64(from.scalar_fixed64());
    }
    if (from.has_scalar_sfixed32()) {
      set_scalar_sfixed32(from.scalar_sfixed32());
    }
    if (from.has_scalar_sfixed64()) {
      set_scalar_sfixed64(from.scalar_sfixed64());
    }
    if (from.has_scalar_bool()) {
      set_scalar_bool(from.scalar_bool());
    }
    if (from.has_scalar_string()) {
      set_scalar_string(from.scalar_string());
    }
    if (from.has_scalar_bytes()) {
      set_scalar_bytes(from.scalar_bytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scalar_bigcurrency()) {
      set_scalar_bigcurrency(from.scalar_bigcurrency());
    }
    if (from.has_scalar_bigcurrencyposition()) {
      mutable_scalar_bigcurrencyposition()->::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition::MergeFrom(from.scalar_bigcurrencyposition());
    }
  }
  if (from._has_bits_[35 / 32] & (0xffu << (35 % 32))) {
    if (from.has_array1_double()) {
      mutable_array1_double()->::MLB::ProtoBuf::Array1Double::MergeFrom(from.array1_double());
    }
    if (from.has_array1_float()) {
      mutable_array1_float()->::MLB::ProtoBuf::Array1Float::MergeFrom(from.array1_float());
    }
    if (from.has_array1_int32()) {
      mutable_array1_int32()->::MLB::ProtoBuf::Array1Int32::MergeFrom(from.array1_int32());
    }
    if (from.has_array1_int64()) {
      mutable_array1_int64()->::MLB::ProtoBuf::Array1Int64::MergeFrom(from.array1_int64());
    }
    if (from.has_array1_uint32()) {
      mutable_array1_uint32()->::MLB::ProtoBuf::Array1UInt32::MergeFrom(from.array1_uint32());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_array1_uint64()) {
      mutable_array1_uint64()->::MLB::ProtoBuf::Array1UInt32::MergeFrom(from.array1_uint64());
    }
    if (from.has_array1_bool()) {
      mutable_array1_bool()->::MLB::ProtoBuf::Array1Bool::MergeFrom(from.array1_bool());
    }
    if (from.has_array1_string()) {
      mutable_array1_string()->::MLB::ProtoBuf::Array1String::MergeFrom(from.array1_string());
    }
    if (from.has_array2_double()) {
      mutable_array2_double()->::MLB::ProtoBuf::Array2Double::MergeFrom(from.array2_double());
    }
    if (from.has_array2_float()) {
      mutable_array2_float()->::MLB::ProtoBuf::Array2Float::MergeFrom(from.array2_float());
    }
    if (from.has_array2_int32()) {
      mutable_array2_int32()->::MLB::ProtoBuf::Array2Int32::MergeFrom(from.array2_int32());
    }
    if (from.has_array2_int64()) {
      mutable_array2_int64()->::MLB::ProtoBuf::Array2Int64::MergeFrom(from.array2_int64());
    }
    if (from.has_array2_uint32()) {
      mutable_array2_uint32()->::MLB::ProtoBuf::Array2UInt32::MergeFrom(from.array2_uint32());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_array2_uint64()) {
      mutable_array2_uint64()->::MLB::ProtoBuf::Array2UInt32::MergeFrom(from.array2_uint64());
    }
    if (from.has_array2_bool()) {
      mutable_array2_bool()->::MLB::ProtoBuf::Array2Bool::MergeFrom(from.array2_bool());
    }
    if (from.has_array2_string()) {
      mutable_array2_string()->::MLB::ProtoBuf::Array2String::MergeFrom(from.array2_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldTypeTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldTypeTest::CopyFrom(const FieldTypeTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldTypeTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scalar_bigcurrencyposition()) {
    if (!this->scalar_bigcurrencyposition().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vector_bigcurrencyposition())) return false;
  return true;
}

void FieldTypeTest::Swap(FieldTypeTest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scalar_double_, other->scalar_double_);
    std::swap(scalar_float_, other->scalar_float_);
    std::swap(scalar_int32_, other->scalar_int32_);
    std::swap(scalar_int64_, other->scalar_int64_);
    std::swap(scalar_uint32_, other->scalar_uint32_);
    std::swap(scalar_uint64_, other->scalar_uint64_);
    std::swap(scalar_sint32_, other->scalar_sint32_);
    std::swap(scalar_sint64_, other->scalar_sint64_);
    std::swap(scalar_fixed32_, other->scalar_fixed32_);
    std::swap(scalar_fixed64_, other->scalar_fixed64_);
    std::swap(scalar_sfixed32_, other->scalar_sfixed32_);
    std::swap(scalar_sfixed64_, other->scalar_sfixed64_);
    std::swap(scalar_bool_, other->scalar_bool_);
    std::swap(scalar_string_, other->scalar_string_);
    std::swap(scalar_bytes_, other->scalar_bytes_);
    std::swap(scalar_bigcurrency_, other->scalar_bigcurrency_);
    std::swap(scalar_bigcurrencyposition_, other->scalar_bigcurrencyposition_);
    vector_double_.Swap(&other->vector_double_);
    vector_float_.Swap(&other->vector_float_);
    vector_int32_.Swap(&other->vector_int32_);
    vector_int64_.Swap(&other->vector_int64_);
    vector_uint32_.Swap(&other->vector_uint32_);
    vector_uint64_.Swap(&other->vector_uint64_);
    vector_sint32_.Swap(&other->vector_sint32_);
    vector_sint64_.Swap(&other->vector_sint64_);
    vector_fixed32_.Swap(&other->vector_fixed32_);
    vector_fixed64_.Swap(&other->vector_fixed64_);
    vector_sfixed32_.Swap(&other->vector_sfixed32_);
    vector_sfixed64_.Swap(&other->vector_sfixed64_);
    vector_bool_.Swap(&other->vector_bool_);
    vector_string_.Swap(&other->vector_string_);
    vector_bytes_.Swap(&other->vector_bytes_);
    vector_bigcurrency_.Swap(&other->vector_bigcurrency_);
    vector_bigcurrencyposition_.Swap(&other->vector_bigcurrencyposition_);
    std::swap(array1_double_, other->array1_double_);
    std::swap(array1_float_, other->array1_float_);
    std::swap(array1_int32_, other->array1_int32_);
    std::swap(array1_int64_, other->array1_int64_);
    std::swap(array1_uint32_, other->array1_uint32_);
    std::swap(array1_uint64_, other->array1_uint64_);
    std::swap(array1_bool_, other->array1_bool_);
    std::swap(array1_string_, other->array1_string_);
    std::swap(array2_double_, other->array2_double_);
    std::swap(array2_float_, other->array2_float_);
    std::swap(array2_int32_, other->array2_int32_);
    std::swap(array2_int64_, other->array2_int64_);
    std::swap(array2_uint32_, other->array2_uint32_);
    std::swap(array2_uint64_, other->array2_uint64_);
    std::swap(array2_bool_, other->array2_bool_);
    std::swap(array2_string_, other->array2_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldTypeTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldTypeTest_descriptor_;
  metadata.reflection = FieldTypeTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace MLB

// @@protoc_insertion_point(global_scope)
