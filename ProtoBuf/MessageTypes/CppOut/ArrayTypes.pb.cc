// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArrayTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArrayTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MLB {
namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* ArraySInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArraySInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayUInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayUInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArraySInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArraySInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayUInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayUInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayFloat32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayFloat32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayFloat64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayFloat64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArraySInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArraySInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayUInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayUInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArraySInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArraySInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayUInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayUInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayFloat32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayFloat32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayFloat64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayFloat64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayOfArrayString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayOfArrayString_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1SInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1SInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Int32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Int32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1UInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1UInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1SInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1SInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Int64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Int64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1UInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1UInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Float32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Float32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Float64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Float64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Float_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Float_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Double_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Double_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1Bool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1Bool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array1String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array1String_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2SInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2SInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Int32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Int32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2UInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2UInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2SInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2SInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Int64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Int64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2UInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2UInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Float32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Float32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Float64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Float64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Float_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Float_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Double_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Double_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2Bool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2Bool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array2String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array2String_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArrayTypes_2eproto() {
  protobuf_AddDesc_ArrayTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArrayTypes.proto");
  GOOGLE_CHECK(file != NULL);
  ArraySInt32_descriptor_ = file->message_type(0);
  static const int ArraySInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt32, element_),
  };
  ArraySInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArraySInt32_descriptor_,
      ArraySInt32::default_instance_,
      ArraySInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArraySInt32));
  ArrayInt32_descriptor_ = file->message_type(1);
  static const int ArrayInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt32, element_),
  };
  ArrayInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayInt32_descriptor_,
      ArrayInt32::default_instance_,
      ArrayInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayInt32));
  ArrayUInt32_descriptor_ = file->message_type(2);
  static const int ArrayUInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt32, element_),
  };
  ArrayUInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayUInt32_descriptor_,
      ArrayUInt32::default_instance_,
      ArrayUInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayUInt32));
  ArraySInt64_descriptor_ = file->message_type(3);
  static const int ArraySInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt64, element_),
  };
  ArraySInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArraySInt64_descriptor_,
      ArraySInt64::default_instance_,
      ArraySInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArraySInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArraySInt64));
  ArrayInt64_descriptor_ = file->message_type(4);
  static const int ArrayInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt64, element_),
  };
  ArrayInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayInt64_descriptor_,
      ArrayInt64::default_instance_,
      ArrayInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayInt64));
  ArrayUInt64_descriptor_ = file->message_type(5);
  static const int ArrayUInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt64, element_),
  };
  ArrayUInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayUInt64_descriptor_,
      ArrayUInt64::default_instance_,
      ArrayUInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayUInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayUInt64));
  ArrayFloat32_descriptor_ = file->message_type(6);
  static const int ArrayFloat32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat32, element_),
  };
  ArrayFloat32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayFloat32_descriptor_,
      ArrayFloat32::default_instance_,
      ArrayFloat32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayFloat32));
  ArrayFloat64_descriptor_ = file->message_type(7);
  static const int ArrayFloat64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat64, element_),
  };
  ArrayFloat64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayFloat64_descriptor_,
      ArrayFloat64::default_instance_,
      ArrayFloat64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayFloat64));
  ArrayFloat_descriptor_ = file->message_type(8);
  static const int ArrayFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat, element_),
  };
  ArrayFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayFloat_descriptor_,
      ArrayFloat::default_instance_,
      ArrayFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayFloat));
  ArrayDouble_descriptor_ = file->message_type(9);
  static const int ArrayDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayDouble, element_),
  };
  ArrayDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayDouble_descriptor_,
      ArrayDouble::default_instance_,
      ArrayDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayDouble));
  ArrayBool_descriptor_ = file->message_type(10);
  static const int ArrayBool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayBool, element_),
  };
  ArrayBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayBool_descriptor_,
      ArrayBool::default_instance_,
      ArrayBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayBool));
  ArrayString_descriptor_ = file->message_type(11);
  static const int ArrayString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayString, element_),
  };
  ArrayString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayString_descriptor_,
      ArrayString::default_instance_,
      ArrayString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayString));
  ArrayOfArraySInt32_descriptor_ = file->message_type(12);
  static const int ArrayOfArraySInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt32, element_),
  };
  ArrayOfArraySInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArraySInt32_descriptor_,
      ArrayOfArraySInt32::default_instance_,
      ArrayOfArraySInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArraySInt32));
  ArrayOfArrayInt32_descriptor_ = file->message_type(13);
  static const int ArrayOfArrayInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt32, element_),
  };
  ArrayOfArrayInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayInt32_descriptor_,
      ArrayOfArrayInt32::default_instance_,
      ArrayOfArrayInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayInt32));
  ArrayOfArrayUInt32_descriptor_ = file->message_type(14);
  static const int ArrayOfArrayUInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt32, element_),
  };
  ArrayOfArrayUInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayUInt32_descriptor_,
      ArrayOfArrayUInt32::default_instance_,
      ArrayOfArrayUInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayUInt32));
  ArrayOfArraySInt64_descriptor_ = file->message_type(15);
  static const int ArrayOfArraySInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt64, element_),
  };
  ArrayOfArraySInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArraySInt64_descriptor_,
      ArrayOfArraySInt64::default_instance_,
      ArrayOfArraySInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArraySInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArraySInt64));
  ArrayOfArrayInt64_descriptor_ = file->message_type(16);
  static const int ArrayOfArrayInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt64, element_),
  };
  ArrayOfArrayInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayInt64_descriptor_,
      ArrayOfArrayInt64::default_instance_,
      ArrayOfArrayInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayInt64));
  ArrayOfArrayUInt64_descriptor_ = file->message_type(17);
  static const int ArrayOfArrayUInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt64, element_),
  };
  ArrayOfArrayUInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayUInt64_descriptor_,
      ArrayOfArrayUInt64::default_instance_,
      ArrayOfArrayUInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayUInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayUInt64));
  ArrayOfArrayFloat32_descriptor_ = file->message_type(18);
  static const int ArrayOfArrayFloat32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat32, element_),
  };
  ArrayOfArrayFloat32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayFloat32_descriptor_,
      ArrayOfArrayFloat32::default_instance_,
      ArrayOfArrayFloat32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayFloat32));
  ArrayOfArrayFloat64_descriptor_ = file->message_type(19);
  static const int ArrayOfArrayFloat64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat64, element_),
  };
  ArrayOfArrayFloat64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayFloat64_descriptor_,
      ArrayOfArrayFloat64::default_instance_,
      ArrayOfArrayFloat64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayFloat64));
  ArrayOfArrayFloat_descriptor_ = file->message_type(20);
  static const int ArrayOfArrayFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat, element_),
  };
  ArrayOfArrayFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayFloat_descriptor_,
      ArrayOfArrayFloat::default_instance_,
      ArrayOfArrayFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayFloat));
  ArrayOfArrayDouble_descriptor_ = file->message_type(21);
  static const int ArrayOfArrayDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayDouble, element_),
  };
  ArrayOfArrayDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayDouble_descriptor_,
      ArrayOfArrayDouble::default_instance_,
      ArrayOfArrayDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayDouble));
  ArrayOfArrayBool_descriptor_ = file->message_type(22);
  static const int ArrayOfArrayBool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayBool, element_),
  };
  ArrayOfArrayBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayBool_descriptor_,
      ArrayOfArrayBool::default_instance_,
      ArrayOfArrayBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayBool));
  ArrayOfArrayString_descriptor_ = file->message_type(23);
  static const int ArrayOfArrayString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayString, element_),
  };
  ArrayOfArrayString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayOfArrayString_descriptor_,
      ArrayOfArrayString::default_instance_,
      ArrayOfArrayString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayOfArrayString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayOfArrayString));
  Array1SInt32_descriptor_ = file->message_type(24);
  static const int Array1SInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt32, element_),
  };
  Array1SInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1SInt32_descriptor_,
      Array1SInt32::default_instance_,
      Array1SInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1SInt32));
  Array1Int32_descriptor_ = file->message_type(25);
  static const int Array1Int32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int32, element_),
  };
  Array1Int32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Int32_descriptor_,
      Array1Int32::default_instance_,
      Array1Int32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Int32));
  Array1UInt32_descriptor_ = file->message_type(26);
  static const int Array1UInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt32, element_),
  };
  Array1UInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1UInt32_descriptor_,
      Array1UInt32::default_instance_,
      Array1UInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1UInt32));
  Array1SInt64_descriptor_ = file->message_type(27);
  static const int Array1SInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt64, element_),
  };
  Array1SInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1SInt64_descriptor_,
      Array1SInt64::default_instance_,
      Array1SInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1SInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1SInt64));
  Array1Int64_descriptor_ = file->message_type(28);
  static const int Array1Int64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int64, element_),
  };
  Array1Int64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Int64_descriptor_,
      Array1Int64::default_instance_,
      Array1Int64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Int64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Int64));
  Array1UInt64_descriptor_ = file->message_type(29);
  static const int Array1UInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt64, element_),
  };
  Array1UInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1UInt64_descriptor_,
      Array1UInt64::default_instance_,
      Array1UInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1UInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1UInt64));
  Array1Float32_descriptor_ = file->message_type(30);
  static const int Array1Float32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float32, element_),
  };
  Array1Float32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Float32_descriptor_,
      Array1Float32::default_instance_,
      Array1Float32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Float32));
  Array1Float64_descriptor_ = file->message_type(31);
  static const int Array1Float64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float64, element_),
  };
  Array1Float64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Float64_descriptor_,
      Array1Float64::default_instance_,
      Array1Float64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Float64));
  Array1Float_descriptor_ = file->message_type(32);
  static const int Array1Float_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float, element_),
  };
  Array1Float_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Float_descriptor_,
      Array1Float::default_instance_,
      Array1Float_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Float, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Float));
  Array1Double_descriptor_ = file->message_type(33);
  static const int Array1Double_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Double, element_),
  };
  Array1Double_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Double_descriptor_,
      Array1Double::default_instance_,
      Array1Double_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Double, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Double, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Double));
  Array1Bool_descriptor_ = file->message_type(34);
  static const int Array1Bool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Bool, element_),
  };
  Array1Bool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1Bool_descriptor_,
      Array1Bool::default_instance_,
      Array1Bool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Bool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1Bool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1Bool));
  Array1String_descriptor_ = file->message_type(35);
  static const int Array1String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1String, element_),
  };
  Array1String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array1String_descriptor_,
      Array1String::default_instance_,
      Array1String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array1String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array1String));
  Array2SInt32_descriptor_ = file->message_type(36);
  static const int Array2SInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt32, element_),
  };
  Array2SInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2SInt32_descriptor_,
      Array2SInt32::default_instance_,
      Array2SInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2SInt32));
  Array2Int32_descriptor_ = file->message_type(37);
  static const int Array2Int32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int32, element_),
  };
  Array2Int32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Int32_descriptor_,
      Array2Int32::default_instance_,
      Array2Int32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Int32));
  Array2UInt32_descriptor_ = file->message_type(38);
  static const int Array2UInt32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt32, element_),
  };
  Array2UInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2UInt32_descriptor_,
      Array2UInt32::default_instance_,
      Array2UInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2UInt32));
  Array2SInt64_descriptor_ = file->message_type(39);
  static const int Array2SInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt64, element_),
  };
  Array2SInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2SInt64_descriptor_,
      Array2SInt64::default_instance_,
      Array2SInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2SInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2SInt64));
  Array2Int64_descriptor_ = file->message_type(40);
  static const int Array2Int64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int64, element_),
  };
  Array2Int64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Int64_descriptor_,
      Array2Int64::default_instance_,
      Array2Int64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Int64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Int64));
  Array2UInt64_descriptor_ = file->message_type(41);
  static const int Array2UInt64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt64, element_),
  };
  Array2UInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2UInt64_descriptor_,
      Array2UInt64::default_instance_,
      Array2UInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2UInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2UInt64));
  Array2Float32_descriptor_ = file->message_type(42);
  static const int Array2Float32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float32, element_),
  };
  Array2Float32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Float32_descriptor_,
      Array2Float32::default_instance_,
      Array2Float32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Float32));
  Array2Float64_descriptor_ = file->message_type(43);
  static const int Array2Float64_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float64, element_),
  };
  Array2Float64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Float64_descriptor_,
      Array2Float64::default_instance_,
      Array2Float64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Float64));
  Array2Float_descriptor_ = file->message_type(44);
  static const int Array2Float_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float, element_),
  };
  Array2Float_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Float_descriptor_,
      Array2Float::default_instance_,
      Array2Float_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Float, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Float));
  Array2Double_descriptor_ = file->message_type(45);
  static const int Array2Double_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Double, element_),
  };
  Array2Double_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Double_descriptor_,
      Array2Double::default_instance_,
      Array2Double_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Double, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Double, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Double));
  Array2Bool_descriptor_ = file->message_type(46);
  static const int Array2Bool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Bool, element_),
  };
  Array2Bool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2Bool_descriptor_,
      Array2Bool::default_instance_,
      Array2Bool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Bool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2Bool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2Bool));
  Array2String_descriptor_ = file->message_type(47);
  static const int Array2String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2String, element_),
  };
  Array2String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array2String_descriptor_,
      Array2String::default_instance_,
      Array2String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array2String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array2String));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArrayTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArraySInt32_descriptor_, &ArraySInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayInt32_descriptor_, &ArrayInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayUInt32_descriptor_, &ArrayUInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArraySInt64_descriptor_, &ArraySInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayInt64_descriptor_, &ArrayInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayUInt64_descriptor_, &ArrayUInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayFloat32_descriptor_, &ArrayFloat32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayFloat64_descriptor_, &ArrayFloat64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayFloat_descriptor_, &ArrayFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayDouble_descriptor_, &ArrayDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayBool_descriptor_, &ArrayBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayString_descriptor_, &ArrayString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArraySInt32_descriptor_, &ArrayOfArraySInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayInt32_descriptor_, &ArrayOfArrayInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayUInt32_descriptor_, &ArrayOfArrayUInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArraySInt64_descriptor_, &ArrayOfArraySInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayInt64_descriptor_, &ArrayOfArrayInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayUInt64_descriptor_, &ArrayOfArrayUInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayFloat32_descriptor_, &ArrayOfArrayFloat32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayFloat64_descriptor_, &ArrayOfArrayFloat64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayFloat_descriptor_, &ArrayOfArrayFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayDouble_descriptor_, &ArrayOfArrayDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayBool_descriptor_, &ArrayOfArrayBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayOfArrayString_descriptor_, &ArrayOfArrayString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1SInt32_descriptor_, &Array1SInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Int32_descriptor_, &Array1Int32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1UInt32_descriptor_, &Array1UInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1SInt64_descriptor_, &Array1SInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Int64_descriptor_, &Array1Int64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1UInt64_descriptor_, &Array1UInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Float32_descriptor_, &Array1Float32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Float64_descriptor_, &Array1Float64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Float_descriptor_, &Array1Float::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Double_descriptor_, &Array1Double::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1Bool_descriptor_, &Array1Bool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array1String_descriptor_, &Array1String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2SInt32_descriptor_, &Array2SInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Int32_descriptor_, &Array2Int32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2UInt32_descriptor_, &Array2UInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2SInt64_descriptor_, &Array2SInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Int64_descriptor_, &Array2Int64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2UInt64_descriptor_, &Array2UInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Float32_descriptor_, &Array2Float32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Float64_descriptor_, &Array2Float64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Float_descriptor_, &Array2Float::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Double_descriptor_, &Array2Double::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2Bool_descriptor_, &Array2Bool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array2String_descriptor_, &Array2String::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArrayTypes_2eproto() {
  delete ArraySInt32::default_instance_;
  delete ArraySInt32_reflection_;
  delete ArrayInt32::default_instance_;
  delete ArrayInt32_reflection_;
  delete ArrayUInt32::default_instance_;
  delete ArrayUInt32_reflection_;
  delete ArraySInt64::default_instance_;
  delete ArraySInt64_reflection_;
  delete ArrayInt64::default_instance_;
  delete ArrayInt64_reflection_;
  delete ArrayUInt64::default_instance_;
  delete ArrayUInt64_reflection_;
  delete ArrayFloat32::default_instance_;
  delete ArrayFloat32_reflection_;
  delete ArrayFloat64::default_instance_;
  delete ArrayFloat64_reflection_;
  delete ArrayFloat::default_instance_;
  delete ArrayFloat_reflection_;
  delete ArrayDouble::default_instance_;
  delete ArrayDouble_reflection_;
  delete ArrayBool::default_instance_;
  delete ArrayBool_reflection_;
  delete ArrayString::default_instance_;
  delete ArrayString_reflection_;
  delete ArrayOfArraySInt32::default_instance_;
  delete ArrayOfArraySInt32_reflection_;
  delete ArrayOfArrayInt32::default_instance_;
  delete ArrayOfArrayInt32_reflection_;
  delete ArrayOfArrayUInt32::default_instance_;
  delete ArrayOfArrayUInt32_reflection_;
  delete ArrayOfArraySInt64::default_instance_;
  delete ArrayOfArraySInt64_reflection_;
  delete ArrayOfArrayInt64::default_instance_;
  delete ArrayOfArrayInt64_reflection_;
  delete ArrayOfArrayUInt64::default_instance_;
  delete ArrayOfArrayUInt64_reflection_;
  delete ArrayOfArrayFloat32::default_instance_;
  delete ArrayOfArrayFloat32_reflection_;
  delete ArrayOfArrayFloat64::default_instance_;
  delete ArrayOfArrayFloat64_reflection_;
  delete ArrayOfArrayFloat::default_instance_;
  delete ArrayOfArrayFloat_reflection_;
  delete ArrayOfArrayDouble::default_instance_;
  delete ArrayOfArrayDouble_reflection_;
  delete ArrayOfArrayBool::default_instance_;
  delete ArrayOfArrayBool_reflection_;
  delete ArrayOfArrayString::default_instance_;
  delete ArrayOfArrayString_reflection_;
  delete Array1SInt32::default_instance_;
  delete Array1SInt32_reflection_;
  delete Array1Int32::default_instance_;
  delete Array1Int32_reflection_;
  delete Array1UInt32::default_instance_;
  delete Array1UInt32_reflection_;
  delete Array1SInt64::default_instance_;
  delete Array1SInt64_reflection_;
  delete Array1Int64::default_instance_;
  delete Array1Int64_reflection_;
  delete Array1UInt64::default_instance_;
  delete Array1UInt64_reflection_;
  delete Array1Float32::default_instance_;
  delete Array1Float32_reflection_;
  delete Array1Float64::default_instance_;
  delete Array1Float64_reflection_;
  delete Array1Float::default_instance_;
  delete Array1Float_reflection_;
  delete Array1Double::default_instance_;
  delete Array1Double_reflection_;
  delete Array1Bool::default_instance_;
  delete Array1Bool_reflection_;
  delete Array1String::default_instance_;
  delete Array1String_reflection_;
  delete Array2SInt32::default_instance_;
  delete Array2SInt32_reflection_;
  delete Array2Int32::default_instance_;
  delete Array2Int32_reflection_;
  delete Array2UInt32::default_instance_;
  delete Array2UInt32_reflection_;
  delete Array2SInt64::default_instance_;
  delete Array2SInt64_reflection_;
  delete Array2Int64::default_instance_;
  delete Array2Int64_reflection_;
  delete Array2UInt64::default_instance_;
  delete Array2UInt64_reflection_;
  delete Array2Float32::default_instance_;
  delete Array2Float32_reflection_;
  delete Array2Float64::default_instance_;
  delete Array2Float64_reflection_;
  delete Array2Float::default_instance_;
  delete Array2Float_reflection_;
  delete Array2Double::default_instance_;
  delete Array2Double_reflection_;
  delete Array2Bool::default_instance_;
  delete Array2Bool_reflection_;
  delete Array2String::default_instance_;
  delete Array2String_reflection_;
}

void protobuf_AddDesc_ArrayTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ArrayTypes.proto\022\014MLB.ProtoBuf\"\036\n\013Arra"
    "ySInt32\022\017\n\007element\030\001 \003(\005\"\035\n\nArrayInt32\022\017"
    "\n\007element\030\001 \003(\005\"\036\n\013ArrayUInt32\022\017\n\007elemen"
    "t\030\001 \003(\r\"\036\n\013ArraySInt64\022\017\n\007element\030\001 \003(\003\""
    "\035\n\nArrayInt64\022\017\n\007element\030\001 \003(\003\"\036\n\013ArrayU"
    "Int64\022\017\n\007element\030\001 \003(\004\"\037\n\014ArrayFloat32\022\017"
    "\n\007element\030\001 \003(\002\"\037\n\014ArrayFloat64\022\017\n\007eleme"
    "nt\030\001 \003(\001\"\035\n\nArrayFloat\022\017\n\007element\030\001 \003(\002\""
    "\036\n\013ArrayDouble\022\017\n\007element\030\001 \003(\001\"\034\n\tArray"
    "Bool\022\017\n\007element\030\001 \003(\010\"\036\n\013ArrayString\022\017\n\007"
    "element\030\001 \003(\t\"@\n\022ArrayOfArraySInt32\022*\n\007e"
    "lement\030\001 \003(\0132\031.MLB.ProtoBuf.ArraySInt32\""
    ">\n\021ArrayOfArrayInt32\022)\n\007element\030\001 \003(\0132\030."
    "MLB.ProtoBuf.ArrayInt32\"@\n\022ArrayOfArrayU"
    "Int32\022*\n\007element\030\001 \003(\0132\031.MLB.ProtoBuf.Ar"
    "rayUInt32\"@\n\022ArrayOfArraySInt64\022*\n\007eleme"
    "nt\030\001 \003(\0132\031.MLB.ProtoBuf.ArraySInt64\">\n\021A"
    "rrayOfArrayInt64\022)\n\007element\030\001 \003(\0132\030.MLB."
    "ProtoBuf.ArrayInt64\"@\n\022ArrayOfArrayUInt6"
    "4\022*\n\007element\030\001 \003(\0132\031.MLB.ProtoBuf.ArrayU"
    "Int64\"B\n\023ArrayOfArrayFloat32\022+\n\007element\030"
    "\001 \003(\0132\032.MLB.ProtoBuf.ArrayFloat32\"B\n\023Arr"
    "ayOfArrayFloat64\022+\n\007element\030\001 \003(\0132\032.MLB."
    "ProtoBuf.ArrayFloat64\">\n\021ArrayOfArrayFlo"
    "at\022)\n\007element\030\001 \003(\0132\030.MLB.ProtoBuf.Array"
    "Float\"@\n\022ArrayOfArrayDouble\022*\n\007element\030\001"
    " \003(\0132\031.MLB.ProtoBuf.ArrayDouble\"<\n\020Array"
    "OfArrayBool\022(\n\007element\030\001 \003(\0132\027.MLB.Proto"
    "Buf.ArrayBool\"@\n\022ArrayOfArrayString\022*\n\007e"
    "lement\030\001 \003(\0132\031.MLB.ProtoBuf.ArrayString\""
    "\037\n\014Array1SInt32\022\017\n\007element\030\001 \003(\005\"\036\n\013Arra"
    "y1Int32\022\017\n\007element\030\001 \003(\005\"\037\n\014Array1UInt32"
    "\022\017\n\007element\030\001 \003(\r\"\037\n\014Array1SInt64\022\017\n\007ele"
    "ment\030\001 \003(\003\"\036\n\013Array1Int64\022\017\n\007element\030\001 \003"
    "(\003\"\037\n\014Array1UInt64\022\017\n\007element\030\001 \003(\004\" \n\rA"
    "rray1Float32\022\017\n\007element\030\001 \003(\002\" \n\rArray1F"
    "loat64\022\017\n\007element\030\001 \003(\001\"\036\n\013Array1Float\022\017"
    "\n\007element\030\001 \003(\002\"\037\n\014Array1Double\022\017\n\007eleme"
    "nt\030\001 \003(\001\"\035\n\nArray1Bool\022\017\n\007element\030\001 \003(\010\""
    "\037\n\014Array1String\022\017\n\007element\030\001 \003(\t\";\n\014Arra"
    "y2SInt32\022+\n\007element\030\001 \003(\0132\032.MLB.ProtoBuf"
    ".Array1SInt32\"9\n\013Array2Int32\022*\n\007element\030"
    "\001 \003(\0132\031.MLB.ProtoBuf.Array1Int32\";\n\014Arra"
    "y2UInt32\022+\n\007element\030\001 \003(\0132\032.MLB.ProtoBuf"
    ".Array1UInt32\";\n\014Array2SInt64\022+\n\007element"
    "\030\001 \003(\0132\032.MLB.ProtoBuf.Array1SInt64\"9\n\013Ar"
    "ray2Int64\022*\n\007element\030\001 \003(\0132\031.MLB.ProtoBu"
    "f.Array1Int64\";\n\014Array2UInt64\022+\n\007element"
    "\030\001 \003(\0132\032.MLB.ProtoBuf.Array1UInt64\"=\n\rAr"
    "ray2Float32\022,\n\007element\030\001 \003(\0132\033.MLB.Proto"
    "Buf.Array1Float32\"=\n\rArray2Float64\022,\n\007el"
    "ement\030\001 \003(\0132\033.MLB.ProtoBuf.Array1Float64"
    "\"9\n\013Array2Float\022*\n\007element\030\001 \003(\0132\031.MLB.P"
    "rotoBuf.Array1Float\";\n\014Array2Double\022+\n\007e"
    "lement\030\001 \003(\0132\032.MLB.ProtoBuf.Array1Double"
    "\"7\n\nArray2Bool\022)\n\007element\030\001 \003(\0132\030.MLB.Pr"
    "otoBuf.Array1Bool\";\n\014Array2String\022+\n\007ele"
    "ment\030\001 \003(\0132\032.MLB.ProtoBuf.Array1String", 2318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArrayTypes.proto", &protobuf_RegisterTypes);
  ArraySInt32::default_instance_ = new ArraySInt32();
  ArrayInt32::default_instance_ = new ArrayInt32();
  ArrayUInt32::default_instance_ = new ArrayUInt32();
  ArraySInt64::default_instance_ = new ArraySInt64();
  ArrayInt64::default_instance_ = new ArrayInt64();
  ArrayUInt64::default_instance_ = new ArrayUInt64();
  ArrayFloat32::default_instance_ = new ArrayFloat32();
  ArrayFloat64::default_instance_ = new ArrayFloat64();
  ArrayFloat::default_instance_ = new ArrayFloat();
  ArrayDouble::default_instance_ = new ArrayDouble();
  ArrayBool::default_instance_ = new ArrayBool();
  ArrayString::default_instance_ = new ArrayString();
  ArrayOfArraySInt32::default_instance_ = new ArrayOfArraySInt32();
  ArrayOfArrayInt32::default_instance_ = new ArrayOfArrayInt32();
  ArrayOfArrayUInt32::default_instance_ = new ArrayOfArrayUInt32();
  ArrayOfArraySInt64::default_instance_ = new ArrayOfArraySInt64();
  ArrayOfArrayInt64::default_instance_ = new ArrayOfArrayInt64();
  ArrayOfArrayUInt64::default_instance_ = new ArrayOfArrayUInt64();
  ArrayOfArrayFloat32::default_instance_ = new ArrayOfArrayFloat32();
  ArrayOfArrayFloat64::default_instance_ = new ArrayOfArrayFloat64();
  ArrayOfArrayFloat::default_instance_ = new ArrayOfArrayFloat();
  ArrayOfArrayDouble::default_instance_ = new ArrayOfArrayDouble();
  ArrayOfArrayBool::default_instance_ = new ArrayOfArrayBool();
  ArrayOfArrayString::default_instance_ = new ArrayOfArrayString();
  Array1SInt32::default_instance_ = new Array1SInt32();
  Array1Int32::default_instance_ = new Array1Int32();
  Array1UInt32::default_instance_ = new Array1UInt32();
  Array1SInt64::default_instance_ = new Array1SInt64();
  Array1Int64::default_instance_ = new Array1Int64();
  Array1UInt64::default_instance_ = new Array1UInt64();
  Array1Float32::default_instance_ = new Array1Float32();
  Array1Float64::default_instance_ = new Array1Float64();
  Array1Float::default_instance_ = new Array1Float();
  Array1Double::default_instance_ = new Array1Double();
  Array1Bool::default_instance_ = new Array1Bool();
  Array1String::default_instance_ = new Array1String();
  Array2SInt32::default_instance_ = new Array2SInt32();
  Array2Int32::default_instance_ = new Array2Int32();
  Array2UInt32::default_instance_ = new Array2UInt32();
  Array2SInt64::default_instance_ = new Array2SInt64();
  Array2Int64::default_instance_ = new Array2Int64();
  Array2UInt64::default_instance_ = new Array2UInt64();
  Array2Float32::default_instance_ = new Array2Float32();
  Array2Float64::default_instance_ = new Array2Float64();
  Array2Float::default_instance_ = new Array2Float();
  Array2Double::default_instance_ = new Array2Double();
  Array2Bool::default_instance_ = new Array2Bool();
  Array2String::default_instance_ = new Array2String();
  ArraySInt32::default_instance_->InitAsDefaultInstance();
  ArrayInt32::default_instance_->InitAsDefaultInstance();
  ArrayUInt32::default_instance_->InitAsDefaultInstance();
  ArraySInt64::default_instance_->InitAsDefaultInstance();
  ArrayInt64::default_instance_->InitAsDefaultInstance();
  ArrayUInt64::default_instance_->InitAsDefaultInstance();
  ArrayFloat32::default_instance_->InitAsDefaultInstance();
  ArrayFloat64::default_instance_->InitAsDefaultInstance();
  ArrayFloat::default_instance_->InitAsDefaultInstance();
  ArrayDouble::default_instance_->InitAsDefaultInstance();
  ArrayBool::default_instance_->InitAsDefaultInstance();
  ArrayString::default_instance_->InitAsDefaultInstance();
  ArrayOfArraySInt32::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayInt32::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayUInt32::default_instance_->InitAsDefaultInstance();
  ArrayOfArraySInt64::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayInt64::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayUInt64::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayFloat32::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayFloat64::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayFloat::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayDouble::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayBool::default_instance_->InitAsDefaultInstance();
  ArrayOfArrayString::default_instance_->InitAsDefaultInstance();
  Array1SInt32::default_instance_->InitAsDefaultInstance();
  Array1Int32::default_instance_->InitAsDefaultInstance();
  Array1UInt32::default_instance_->InitAsDefaultInstance();
  Array1SInt64::default_instance_->InitAsDefaultInstance();
  Array1Int64::default_instance_->InitAsDefaultInstance();
  Array1UInt64::default_instance_->InitAsDefaultInstance();
  Array1Float32::default_instance_->InitAsDefaultInstance();
  Array1Float64::default_instance_->InitAsDefaultInstance();
  Array1Float::default_instance_->InitAsDefaultInstance();
  Array1Double::default_instance_->InitAsDefaultInstance();
  Array1Bool::default_instance_->InitAsDefaultInstance();
  Array1String::default_instance_->InitAsDefaultInstance();
  Array2SInt32::default_instance_->InitAsDefaultInstance();
  Array2Int32::default_instance_->InitAsDefaultInstance();
  Array2UInt32::default_instance_->InitAsDefaultInstance();
  Array2SInt64::default_instance_->InitAsDefaultInstance();
  Array2Int64::default_instance_->InitAsDefaultInstance();
  Array2UInt64::default_instance_->InitAsDefaultInstance();
  Array2Float32::default_instance_->InitAsDefaultInstance();
  Array2Float64::default_instance_->InitAsDefaultInstance();
  Array2Float::default_instance_->InitAsDefaultInstance();
  Array2Double::default_instance_->InitAsDefaultInstance();
  Array2Bool::default_instance_->InitAsDefaultInstance();
  Array2String::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArrayTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArrayTypes_2eproto {
  StaticDescriptorInitializer_ArrayTypes_2eproto() {
    protobuf_AddDesc_ArrayTypes_2eproto();
  }
} static_descriptor_initializer_ArrayTypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArraySInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArraySInt32::ArraySInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArraySInt32)
}

void ArraySInt32::InitAsDefaultInstance() {
}

ArraySInt32::ArraySInt32(const ArraySInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArraySInt32)
}

void ArraySInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArraySInt32::~ArraySInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArraySInt32)
  SharedDtor();
}

void ArraySInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArraySInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArraySInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArraySInt32_descriptor_;
}

const ArraySInt32& ArraySInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArraySInt32* ArraySInt32::default_instance_ = NULL;

ArraySInt32* ArraySInt32::New() const {
  return new ArraySInt32;
}

void ArraySInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArraySInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArraySInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArraySInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArraySInt32)
  return false;
#undef DO_
}

void ArraySInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArraySInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArraySInt32)
}

::google::protobuf::uint8* ArraySInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArraySInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArraySInt32)
  return target;
}

int ArraySInt32::ByteSize() const {
  int total_size = 0;

  // repeated int32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArraySInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArraySInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArraySInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArraySInt32::MergeFrom(const ArraySInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArraySInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArraySInt32::CopyFrom(const ArraySInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArraySInt32::IsInitialized() const {

  return true;
}

void ArraySInt32::Swap(ArraySInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArraySInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArraySInt32_descriptor_;
  metadata.reflection = ArraySInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayInt32::ArrayInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayInt32)
}

void ArrayInt32::InitAsDefaultInstance() {
}

ArrayInt32::ArrayInt32(const ArrayInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayInt32)
}

void ArrayInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayInt32::~ArrayInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayInt32)
  SharedDtor();
}

void ArrayInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayInt32_descriptor_;
}

const ArrayInt32& ArrayInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayInt32* ArrayInt32::default_instance_ = NULL;

ArrayInt32* ArrayInt32::New() const {
  return new ArrayInt32;
}

void ArrayInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayInt32)
  return false;
#undef DO_
}

void ArrayInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayInt32)
}

::google::protobuf::uint8* ArrayInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayInt32)
  return target;
}

int ArrayInt32::ByteSize() const {
  int total_size = 0;

  // repeated int32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayInt32::MergeFrom(const ArrayInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayInt32::CopyFrom(const ArrayInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayInt32::IsInitialized() const {

  return true;
}

void ArrayInt32::Swap(ArrayInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayInt32_descriptor_;
  metadata.reflection = ArrayInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayUInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayUInt32::ArrayUInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayUInt32)
}

void ArrayUInt32::InitAsDefaultInstance() {
}

ArrayUInt32::ArrayUInt32(const ArrayUInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayUInt32)
}

void ArrayUInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayUInt32::~ArrayUInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayUInt32)
  SharedDtor();
}

void ArrayUInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayUInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayUInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayUInt32_descriptor_;
}

const ArrayUInt32& ArrayUInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayUInt32* ArrayUInt32::default_instance_ = NULL;

ArrayUInt32* ArrayUInt32::New() const {
  return new ArrayUInt32;
}

void ArrayUInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayUInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayUInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayUInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayUInt32)
  return false;
#undef DO_
}

void ArrayUInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayUInt32)
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayUInt32)
}

::google::protobuf::uint8* ArrayUInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayUInt32)
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayUInt32)
  return target;
}

int ArrayUInt32::ByteSize() const {
  int total_size = 0;

  // repeated uint32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayUInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayUInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayUInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayUInt32::MergeFrom(const ArrayUInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayUInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayUInt32::CopyFrom(const ArrayUInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayUInt32::IsInitialized() const {

  return true;
}

void ArrayUInt32::Swap(ArrayUInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayUInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayUInt32_descriptor_;
  metadata.reflection = ArrayUInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArraySInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArraySInt64::ArraySInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArraySInt64)
}

void ArraySInt64::InitAsDefaultInstance() {
}

ArraySInt64::ArraySInt64(const ArraySInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArraySInt64)
}

void ArraySInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArraySInt64::~ArraySInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArraySInt64)
  SharedDtor();
}

void ArraySInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArraySInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArraySInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArraySInt64_descriptor_;
}

const ArraySInt64& ArraySInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArraySInt64* ArraySInt64::default_instance_ = NULL;

ArraySInt64* ArraySInt64::New() const {
  return new ArraySInt64;
}

void ArraySInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArraySInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArraySInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArraySInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArraySInt64)
  return false;
#undef DO_
}

void ArraySInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArraySInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArraySInt64)
}

::google::protobuf::uint8* ArraySInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArraySInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArraySInt64)
  return target;
}

int ArraySInt64::ByteSize() const {
  int total_size = 0;

  // repeated int64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArraySInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArraySInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArraySInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArraySInt64::MergeFrom(const ArraySInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArraySInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArraySInt64::CopyFrom(const ArraySInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArraySInt64::IsInitialized() const {

  return true;
}

void ArraySInt64::Swap(ArraySInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArraySInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArraySInt64_descriptor_;
  metadata.reflection = ArraySInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayInt64::ArrayInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayInt64)
}

void ArrayInt64::InitAsDefaultInstance() {
}

ArrayInt64::ArrayInt64(const ArrayInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayInt64)
}

void ArrayInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayInt64::~ArrayInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayInt64)
  SharedDtor();
}

void ArrayInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayInt64_descriptor_;
}

const ArrayInt64& ArrayInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayInt64* ArrayInt64::default_instance_ = NULL;

ArrayInt64* ArrayInt64::New() const {
  return new ArrayInt64;
}

void ArrayInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayInt64)
  return false;
#undef DO_
}

void ArrayInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayInt64)
}

::google::protobuf::uint8* ArrayInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayInt64)
  return target;
}

int ArrayInt64::ByteSize() const {
  int total_size = 0;

  // repeated int64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayInt64::MergeFrom(const ArrayInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayInt64::CopyFrom(const ArrayInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayInt64::IsInitialized() const {

  return true;
}

void ArrayInt64::Swap(ArrayInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayInt64_descriptor_;
  metadata.reflection = ArrayInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayUInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayUInt64::ArrayUInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayUInt64)
}

void ArrayUInt64::InitAsDefaultInstance() {
}

ArrayUInt64::ArrayUInt64(const ArrayUInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayUInt64)
}

void ArrayUInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayUInt64::~ArrayUInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayUInt64)
  SharedDtor();
}

void ArrayUInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayUInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayUInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayUInt64_descriptor_;
}

const ArrayUInt64& ArrayUInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayUInt64* ArrayUInt64::default_instance_ = NULL;

ArrayUInt64* ArrayUInt64::New() const {
  return new ArrayUInt64;
}

void ArrayUInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayUInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayUInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayUInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayUInt64)
  return false;
#undef DO_
}

void ArrayUInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayUInt64)
  // repeated uint64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayUInt64)
}

::google::protobuf::uint8* ArrayUInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayUInt64)
  // repeated uint64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayUInt64)
  return target;
}

int ArrayUInt64::ByteSize() const {
  int total_size = 0;

  // repeated uint64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayUInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayUInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayUInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayUInt64::MergeFrom(const ArrayUInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayUInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayUInt64::CopyFrom(const ArrayUInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayUInt64::IsInitialized() const {

  return true;
}

void ArrayUInt64::Swap(ArrayUInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayUInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayUInt64_descriptor_;
  metadata.reflection = ArrayUInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayFloat32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayFloat32::ArrayFloat32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayFloat32)
}

void ArrayFloat32::InitAsDefaultInstance() {
}

ArrayFloat32::ArrayFloat32(const ArrayFloat32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayFloat32)
}

void ArrayFloat32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayFloat32::~ArrayFloat32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayFloat32)
  SharedDtor();
}

void ArrayFloat32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayFloat32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayFloat32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayFloat32_descriptor_;
}

const ArrayFloat32& ArrayFloat32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayFloat32* ArrayFloat32::default_instance_ = NULL;

ArrayFloat32* ArrayFloat32::New() const {
  return new ArrayFloat32;
}

void ArrayFloat32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayFloat32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayFloat32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 13) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayFloat32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayFloat32)
  return false;
#undef DO_
}

void ArrayFloat32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayFloat32)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayFloat32)
}

::google::protobuf::uint8* ArrayFloat32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayFloat32)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayFloat32)
  return target;
}

int ArrayFloat32::ByteSize() const {
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayFloat32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayFloat32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayFloat32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayFloat32::MergeFrom(const ArrayFloat32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayFloat32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayFloat32::CopyFrom(const ArrayFloat32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayFloat32::IsInitialized() const {

  return true;
}

void ArrayFloat32::Swap(ArrayFloat32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayFloat32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayFloat32_descriptor_;
  metadata.reflection = ArrayFloat32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayFloat64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayFloat64::ArrayFloat64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayFloat64)
}

void ArrayFloat64::InitAsDefaultInstance() {
}

ArrayFloat64::ArrayFloat64(const ArrayFloat64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayFloat64)
}

void ArrayFloat64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayFloat64::~ArrayFloat64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayFloat64)
  SharedDtor();
}

void ArrayFloat64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayFloat64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayFloat64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayFloat64_descriptor_;
}

const ArrayFloat64& ArrayFloat64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayFloat64* ArrayFloat64::default_instance_ = NULL;

ArrayFloat64* ArrayFloat64::New() const {
  return new ArrayFloat64;
}

void ArrayFloat64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayFloat64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayFloat64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double element = 1;
      case 1: {
        if (tag == 9) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayFloat64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayFloat64)
  return false;
#undef DO_
}

void ArrayFloat64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayFloat64)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayFloat64)
}

::google::protobuf::uint8* ArrayFloat64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayFloat64)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayFloat64)
  return target;
}

int ArrayFloat64::ByteSize() const {
  int total_size = 0;

  // repeated double element = 1;
  {
    int data_size = 0;
    data_size = 8 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayFloat64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayFloat64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayFloat64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayFloat64::MergeFrom(const ArrayFloat64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayFloat64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayFloat64::CopyFrom(const ArrayFloat64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayFloat64::IsInitialized() const {

  return true;
}

void ArrayFloat64::Swap(ArrayFloat64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayFloat64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayFloat64_descriptor_;
  metadata.reflection = ArrayFloat64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayFloat::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayFloat::ArrayFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayFloat)
}

void ArrayFloat::InitAsDefaultInstance() {
}

ArrayFloat::ArrayFloat(const ArrayFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayFloat)
}

void ArrayFloat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayFloat::~ArrayFloat() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayFloat)
  SharedDtor();
}

void ArrayFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayFloat_descriptor_;
}

const ArrayFloat& ArrayFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayFloat* ArrayFloat::default_instance_ = NULL;

ArrayFloat* ArrayFloat::New() const {
  return new ArrayFloat;
}

void ArrayFloat::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 13) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayFloat)
  return false;
#undef DO_
}

void ArrayFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayFloat)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayFloat)
}

::google::protobuf::uint8* ArrayFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayFloat)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayFloat)
  return target;
}

int ArrayFloat::ByteSize() const {
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayFloat::MergeFrom(const ArrayFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayFloat::CopyFrom(const ArrayFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayFloat::IsInitialized() const {

  return true;
}

void ArrayFloat::Swap(ArrayFloat* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayFloat_descriptor_;
  metadata.reflection = ArrayFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayDouble::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayDouble::ArrayDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayDouble)
}

void ArrayDouble::InitAsDefaultInstance() {
}

ArrayDouble::ArrayDouble(const ArrayDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayDouble)
}

void ArrayDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayDouble::~ArrayDouble() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayDouble)
  SharedDtor();
}

void ArrayDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayDouble_descriptor_;
}

const ArrayDouble& ArrayDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayDouble* ArrayDouble::default_instance_ = NULL;

ArrayDouble* ArrayDouble::New() const {
  return new ArrayDouble;
}

void ArrayDouble::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double element = 1;
      case 1: {
        if (tag == 9) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayDouble)
  return false;
#undef DO_
}

void ArrayDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayDouble)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayDouble)
}

::google::protobuf::uint8* ArrayDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayDouble)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayDouble)
  return target;
}

int ArrayDouble::ByteSize() const {
  int total_size = 0;

  // repeated double element = 1;
  {
    int data_size = 0;
    data_size = 8 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayDouble::MergeFrom(const ArrayDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayDouble::CopyFrom(const ArrayDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayDouble::IsInitialized() const {

  return true;
}

void ArrayDouble::Swap(ArrayDouble* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayDouble_descriptor_;
  metadata.reflection = ArrayDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayBool::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayBool::ArrayBool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayBool)
}

void ArrayBool::InitAsDefaultInstance() {
}

ArrayBool::ArrayBool(const ArrayBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayBool)
}

void ArrayBool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayBool::~ArrayBool() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayBool)
  SharedDtor();
}

void ArrayBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayBool_descriptor_;
}

const ArrayBool& ArrayBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayBool* ArrayBool::default_instance_ = NULL;

ArrayBool* ArrayBool::New() const {
  return new ArrayBool;
}

void ArrayBool::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayBool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayBool)
  return false;
#undef DO_
}

void ArrayBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayBool)
  // repeated bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayBool)
}

::google::protobuf::uint8* ArrayBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayBool)
  // repeated bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayBool)
  return target;
}

int ArrayBool::ByteSize() const {
  int total_size = 0;

  // repeated bool element = 1;
  {
    int data_size = 0;
    data_size = 1 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayBool::MergeFrom(const ArrayBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayBool::CopyFrom(const ArrayBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayBool::IsInitialized() const {

  return true;
}

void ArrayBool::Swap(ArrayBool* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayBool_descriptor_;
  metadata.reflection = ArrayBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayString::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayString::ArrayString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayString)
}

void ArrayString::InitAsDefaultInstance() {
}

ArrayString::ArrayString(const ArrayString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayString)
}

void ArrayString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayString::~ArrayString() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayString)
  SharedDtor();
}

void ArrayString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayString_descriptor_;
}

const ArrayString& ArrayString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayString* ArrayString::default_instance_ = NULL;

ArrayString* ArrayString::New() const {
  return new ArrayString;
}

void ArrayString::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_element()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->element(this->element_size() - 1).data(),
            this->element(this->element_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "element");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayString)
  return false;
#undef DO_
}

void ArrayString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayString)
  // repeated string element = 1;
  for (int i = 0; i < this->element_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->element(i).data(), this->element(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "element");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayString)
}

::google::protobuf::uint8* ArrayString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayString)
  // repeated string element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element(i).data(), this->element(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "element");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayString)
  return target;
}

int ArrayString::ByteSize() const {
  int total_size = 0;

  // repeated string element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayString::MergeFrom(const ArrayString& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayString::CopyFrom(const ArrayString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayString::IsInitialized() const {

  return true;
}

void ArrayString::Swap(ArrayString* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayString_descriptor_;
  metadata.reflection = ArrayString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArraySInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArraySInt32::ArrayOfArraySInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArraySInt32)
}

void ArrayOfArraySInt32::InitAsDefaultInstance() {
}

ArrayOfArraySInt32::ArrayOfArraySInt32(const ArrayOfArraySInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArraySInt32)
}

void ArrayOfArraySInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArraySInt32::~ArrayOfArraySInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArraySInt32)
  SharedDtor();
}

void ArrayOfArraySInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArraySInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArraySInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArraySInt32_descriptor_;
}

const ArrayOfArraySInt32& ArrayOfArraySInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArraySInt32* ArrayOfArraySInt32::default_instance_ = NULL;

ArrayOfArraySInt32* ArrayOfArraySInt32::New() const {
  return new ArrayOfArraySInt32;
}

void ArrayOfArraySInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArraySInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArraySInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArraySInt32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArraySInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArraySInt32)
  return false;
#undef DO_
}

void ArrayOfArraySInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArraySInt32)
  // repeated .MLB.ProtoBuf.ArraySInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArraySInt32)
}

::google::protobuf::uint8* ArrayOfArraySInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArraySInt32)
  // repeated .MLB.ProtoBuf.ArraySInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArraySInt32)
  return target;
}

int ArrayOfArraySInt32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArraySInt32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArraySInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArraySInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArraySInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArraySInt32::MergeFrom(const ArrayOfArraySInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArraySInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArraySInt32::CopyFrom(const ArrayOfArraySInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArraySInt32::IsInitialized() const {

  return true;
}

void ArrayOfArraySInt32::Swap(ArrayOfArraySInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArraySInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArraySInt32_descriptor_;
  metadata.reflection = ArrayOfArraySInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayInt32::ArrayOfArrayInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayInt32)
}

void ArrayOfArrayInt32::InitAsDefaultInstance() {
}

ArrayOfArrayInt32::ArrayOfArrayInt32(const ArrayOfArrayInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayInt32)
}

void ArrayOfArrayInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayInt32::~ArrayOfArrayInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayInt32)
  SharedDtor();
}

void ArrayOfArrayInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayInt32_descriptor_;
}

const ArrayOfArrayInt32& ArrayOfArrayInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayInt32* ArrayOfArrayInt32::default_instance_ = NULL;

ArrayOfArrayInt32* ArrayOfArrayInt32::New() const {
  return new ArrayOfArrayInt32;
}

void ArrayOfArrayInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayInt32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayInt32)
  return false;
#undef DO_
}

void ArrayOfArrayInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayInt32)
  // repeated .MLB.ProtoBuf.ArrayInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayInt32)
}

::google::protobuf::uint8* ArrayOfArrayInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayInt32)
  // repeated .MLB.ProtoBuf.ArrayInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayInt32)
  return target;
}

int ArrayOfArrayInt32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayInt32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayInt32::MergeFrom(const ArrayOfArrayInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayInt32::CopyFrom(const ArrayOfArrayInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayInt32::IsInitialized() const {

  return true;
}

void ArrayOfArrayInt32::Swap(ArrayOfArrayInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayInt32_descriptor_;
  metadata.reflection = ArrayOfArrayInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayUInt32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayUInt32::ArrayOfArrayUInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayUInt32)
}

void ArrayOfArrayUInt32::InitAsDefaultInstance() {
}

ArrayOfArrayUInt32::ArrayOfArrayUInt32(const ArrayOfArrayUInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayUInt32)
}

void ArrayOfArrayUInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayUInt32::~ArrayOfArrayUInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayUInt32)
  SharedDtor();
}

void ArrayOfArrayUInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayUInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayUInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayUInt32_descriptor_;
}

const ArrayOfArrayUInt32& ArrayOfArrayUInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayUInt32* ArrayOfArrayUInt32::default_instance_ = NULL;

ArrayOfArrayUInt32* ArrayOfArrayUInt32::New() const {
  return new ArrayOfArrayUInt32;
}

void ArrayOfArrayUInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayUInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayUInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayUInt32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayUInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayUInt32)
  return false;
#undef DO_
}

void ArrayOfArrayUInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayUInt32)
  // repeated .MLB.ProtoBuf.ArrayUInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayUInt32)
}

::google::protobuf::uint8* ArrayOfArrayUInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayUInt32)
  // repeated .MLB.ProtoBuf.ArrayUInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayUInt32)
  return target;
}

int ArrayOfArrayUInt32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayUInt32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayUInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayUInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayUInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayUInt32::MergeFrom(const ArrayOfArrayUInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayUInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayUInt32::CopyFrom(const ArrayOfArrayUInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayUInt32::IsInitialized() const {

  return true;
}

void ArrayOfArrayUInt32::Swap(ArrayOfArrayUInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayUInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayUInt32_descriptor_;
  metadata.reflection = ArrayOfArrayUInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArraySInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArraySInt64::ArrayOfArraySInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArraySInt64)
}

void ArrayOfArraySInt64::InitAsDefaultInstance() {
}

ArrayOfArraySInt64::ArrayOfArraySInt64(const ArrayOfArraySInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArraySInt64)
}

void ArrayOfArraySInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArraySInt64::~ArrayOfArraySInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArraySInt64)
  SharedDtor();
}

void ArrayOfArraySInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArraySInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArraySInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArraySInt64_descriptor_;
}

const ArrayOfArraySInt64& ArrayOfArraySInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArraySInt64* ArrayOfArraySInt64::default_instance_ = NULL;

ArrayOfArraySInt64* ArrayOfArraySInt64::New() const {
  return new ArrayOfArraySInt64;
}

void ArrayOfArraySInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArraySInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArraySInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArraySInt64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArraySInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArraySInt64)
  return false;
#undef DO_
}

void ArrayOfArraySInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArraySInt64)
  // repeated .MLB.ProtoBuf.ArraySInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArraySInt64)
}

::google::protobuf::uint8* ArrayOfArraySInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArraySInt64)
  // repeated .MLB.ProtoBuf.ArraySInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArraySInt64)
  return target;
}

int ArrayOfArraySInt64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArraySInt64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArraySInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArraySInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArraySInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArraySInt64::MergeFrom(const ArrayOfArraySInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArraySInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArraySInt64::CopyFrom(const ArrayOfArraySInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArraySInt64::IsInitialized() const {

  return true;
}

void ArrayOfArraySInt64::Swap(ArrayOfArraySInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArraySInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArraySInt64_descriptor_;
  metadata.reflection = ArrayOfArraySInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayInt64::ArrayOfArrayInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayInt64)
}

void ArrayOfArrayInt64::InitAsDefaultInstance() {
}

ArrayOfArrayInt64::ArrayOfArrayInt64(const ArrayOfArrayInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayInt64)
}

void ArrayOfArrayInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayInt64::~ArrayOfArrayInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayInt64)
  SharedDtor();
}

void ArrayOfArrayInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayInt64_descriptor_;
}

const ArrayOfArrayInt64& ArrayOfArrayInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayInt64* ArrayOfArrayInt64::default_instance_ = NULL;

ArrayOfArrayInt64* ArrayOfArrayInt64::New() const {
  return new ArrayOfArrayInt64;
}

void ArrayOfArrayInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayInt64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayInt64)
  return false;
#undef DO_
}

void ArrayOfArrayInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayInt64)
  // repeated .MLB.ProtoBuf.ArrayInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayInt64)
}

::google::protobuf::uint8* ArrayOfArrayInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayInt64)
  // repeated .MLB.ProtoBuf.ArrayInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayInt64)
  return target;
}

int ArrayOfArrayInt64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayInt64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayInt64::MergeFrom(const ArrayOfArrayInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayInt64::CopyFrom(const ArrayOfArrayInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayInt64::IsInitialized() const {

  return true;
}

void ArrayOfArrayInt64::Swap(ArrayOfArrayInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayInt64_descriptor_;
  metadata.reflection = ArrayOfArrayInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayUInt64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayUInt64::ArrayOfArrayUInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayUInt64)
}

void ArrayOfArrayUInt64::InitAsDefaultInstance() {
}

ArrayOfArrayUInt64::ArrayOfArrayUInt64(const ArrayOfArrayUInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayUInt64)
}

void ArrayOfArrayUInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayUInt64::~ArrayOfArrayUInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayUInt64)
  SharedDtor();
}

void ArrayOfArrayUInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayUInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayUInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayUInt64_descriptor_;
}

const ArrayOfArrayUInt64& ArrayOfArrayUInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayUInt64* ArrayOfArrayUInt64::default_instance_ = NULL;

ArrayOfArrayUInt64* ArrayOfArrayUInt64::New() const {
  return new ArrayOfArrayUInt64;
}

void ArrayOfArrayUInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayUInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayUInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayUInt64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayUInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayUInt64)
  return false;
#undef DO_
}

void ArrayOfArrayUInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayUInt64)
  // repeated .MLB.ProtoBuf.ArrayUInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayUInt64)
}

::google::protobuf::uint8* ArrayOfArrayUInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayUInt64)
  // repeated .MLB.ProtoBuf.ArrayUInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayUInt64)
  return target;
}

int ArrayOfArrayUInt64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayUInt64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayUInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayUInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayUInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayUInt64::MergeFrom(const ArrayOfArrayUInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayUInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayUInt64::CopyFrom(const ArrayOfArrayUInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayUInt64::IsInitialized() const {

  return true;
}

void ArrayOfArrayUInt64::Swap(ArrayOfArrayUInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayUInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayUInt64_descriptor_;
  metadata.reflection = ArrayOfArrayUInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayFloat32::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayFloat32::ArrayOfArrayFloat32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayFloat32)
}

void ArrayOfArrayFloat32::InitAsDefaultInstance() {
}

ArrayOfArrayFloat32::ArrayOfArrayFloat32(const ArrayOfArrayFloat32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayFloat32)
}

void ArrayOfArrayFloat32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayFloat32::~ArrayOfArrayFloat32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayFloat32)
  SharedDtor();
}

void ArrayOfArrayFloat32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayFloat32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayFloat32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayFloat32_descriptor_;
}

const ArrayOfArrayFloat32& ArrayOfArrayFloat32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayFloat32* ArrayOfArrayFloat32::default_instance_ = NULL;

ArrayOfArrayFloat32* ArrayOfArrayFloat32::New() const {
  return new ArrayOfArrayFloat32;
}

void ArrayOfArrayFloat32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayFloat32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayFloat32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayFloat32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayFloat32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayFloat32)
  return false;
#undef DO_
}

void ArrayOfArrayFloat32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayFloat32)
  // repeated .MLB.ProtoBuf.ArrayFloat32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayFloat32)
}

::google::protobuf::uint8* ArrayOfArrayFloat32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayFloat32)
  // repeated .MLB.ProtoBuf.ArrayFloat32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayFloat32)
  return target;
}

int ArrayOfArrayFloat32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayFloat32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayFloat32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayFloat32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayFloat32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayFloat32::MergeFrom(const ArrayOfArrayFloat32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayFloat32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayFloat32::CopyFrom(const ArrayOfArrayFloat32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayFloat32::IsInitialized() const {

  return true;
}

void ArrayOfArrayFloat32::Swap(ArrayOfArrayFloat32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayFloat32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayFloat32_descriptor_;
  metadata.reflection = ArrayOfArrayFloat32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayFloat64::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayFloat64::ArrayOfArrayFloat64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayFloat64)
}

void ArrayOfArrayFloat64::InitAsDefaultInstance() {
}

ArrayOfArrayFloat64::ArrayOfArrayFloat64(const ArrayOfArrayFloat64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayFloat64)
}

void ArrayOfArrayFloat64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayFloat64::~ArrayOfArrayFloat64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayFloat64)
  SharedDtor();
}

void ArrayOfArrayFloat64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayFloat64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayFloat64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayFloat64_descriptor_;
}

const ArrayOfArrayFloat64& ArrayOfArrayFloat64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayFloat64* ArrayOfArrayFloat64::default_instance_ = NULL;

ArrayOfArrayFloat64* ArrayOfArrayFloat64::New() const {
  return new ArrayOfArrayFloat64;
}

void ArrayOfArrayFloat64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayFloat64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayFloat64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayFloat64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayFloat64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayFloat64)
  return false;
#undef DO_
}

void ArrayOfArrayFloat64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayFloat64)
  // repeated .MLB.ProtoBuf.ArrayFloat64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayFloat64)
}

::google::protobuf::uint8* ArrayOfArrayFloat64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayFloat64)
  // repeated .MLB.ProtoBuf.ArrayFloat64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayFloat64)
  return target;
}

int ArrayOfArrayFloat64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayFloat64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayFloat64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayFloat64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayFloat64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayFloat64::MergeFrom(const ArrayOfArrayFloat64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayFloat64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayFloat64::CopyFrom(const ArrayOfArrayFloat64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayFloat64::IsInitialized() const {

  return true;
}

void ArrayOfArrayFloat64::Swap(ArrayOfArrayFloat64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayFloat64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayFloat64_descriptor_;
  metadata.reflection = ArrayOfArrayFloat64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayFloat::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayFloat::ArrayOfArrayFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayFloat)
}

void ArrayOfArrayFloat::InitAsDefaultInstance() {
}

ArrayOfArrayFloat::ArrayOfArrayFloat(const ArrayOfArrayFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayFloat)
}

void ArrayOfArrayFloat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayFloat::~ArrayOfArrayFloat() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayFloat)
  SharedDtor();
}

void ArrayOfArrayFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayFloat_descriptor_;
}

const ArrayOfArrayFloat& ArrayOfArrayFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayFloat* ArrayOfArrayFloat::default_instance_ = NULL;

ArrayOfArrayFloat* ArrayOfArrayFloat::New() const {
  return new ArrayOfArrayFloat;
}

void ArrayOfArrayFloat::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayFloat element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayFloat)
  return false;
#undef DO_
}

void ArrayOfArrayFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayFloat)
  // repeated .MLB.ProtoBuf.ArrayFloat element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayFloat)
}

::google::protobuf::uint8* ArrayOfArrayFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayFloat)
  // repeated .MLB.ProtoBuf.ArrayFloat element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayFloat)
  return target;
}

int ArrayOfArrayFloat::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayFloat element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayFloat::MergeFrom(const ArrayOfArrayFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayFloat::CopyFrom(const ArrayOfArrayFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayFloat::IsInitialized() const {

  return true;
}

void ArrayOfArrayFloat::Swap(ArrayOfArrayFloat* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayFloat_descriptor_;
  metadata.reflection = ArrayOfArrayFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayDouble::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayDouble::ArrayOfArrayDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayDouble)
}

void ArrayOfArrayDouble::InitAsDefaultInstance() {
}

ArrayOfArrayDouble::ArrayOfArrayDouble(const ArrayOfArrayDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayDouble)
}

void ArrayOfArrayDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayDouble::~ArrayOfArrayDouble() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayDouble)
  SharedDtor();
}

void ArrayOfArrayDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayDouble_descriptor_;
}

const ArrayOfArrayDouble& ArrayOfArrayDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayDouble* ArrayOfArrayDouble::default_instance_ = NULL;

ArrayOfArrayDouble* ArrayOfArrayDouble::New() const {
  return new ArrayOfArrayDouble;
}

void ArrayOfArrayDouble::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayDouble element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayDouble)
  return false;
#undef DO_
}

void ArrayOfArrayDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayDouble)
  // repeated .MLB.ProtoBuf.ArrayDouble element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayDouble)
}

::google::protobuf::uint8* ArrayOfArrayDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayDouble)
  // repeated .MLB.ProtoBuf.ArrayDouble element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayDouble)
  return target;
}

int ArrayOfArrayDouble::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayDouble element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayDouble::MergeFrom(const ArrayOfArrayDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayDouble::CopyFrom(const ArrayOfArrayDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayDouble::IsInitialized() const {

  return true;
}

void ArrayOfArrayDouble::Swap(ArrayOfArrayDouble* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayDouble_descriptor_;
  metadata.reflection = ArrayOfArrayDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayBool::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayBool::ArrayOfArrayBool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayBool)
}

void ArrayOfArrayBool::InitAsDefaultInstance() {
}

ArrayOfArrayBool::ArrayOfArrayBool(const ArrayOfArrayBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayBool)
}

void ArrayOfArrayBool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayBool::~ArrayOfArrayBool() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayBool)
  SharedDtor();
}

void ArrayOfArrayBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayBool_descriptor_;
}

const ArrayOfArrayBool& ArrayOfArrayBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayBool* ArrayOfArrayBool::default_instance_ = NULL;

ArrayOfArrayBool* ArrayOfArrayBool::New() const {
  return new ArrayOfArrayBool;
}

void ArrayOfArrayBool::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayBool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayBool element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayBool)
  return false;
#undef DO_
}

void ArrayOfArrayBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayBool)
  // repeated .MLB.ProtoBuf.ArrayBool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayBool)
}

::google::protobuf::uint8* ArrayOfArrayBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayBool)
  // repeated .MLB.ProtoBuf.ArrayBool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayBool)
  return target;
}

int ArrayOfArrayBool::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayBool element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayBool::MergeFrom(const ArrayOfArrayBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayBool::CopyFrom(const ArrayOfArrayBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayBool::IsInitialized() const {

  return true;
}

void ArrayOfArrayBool::Swap(ArrayOfArrayBool* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayBool_descriptor_;
  metadata.reflection = ArrayOfArrayBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayOfArrayString::kElementFieldNumber;
#endif  // !_MSC_VER

ArrayOfArrayString::ArrayOfArrayString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.ArrayOfArrayString)
}

void ArrayOfArrayString::InitAsDefaultInstance() {
}

ArrayOfArrayString::ArrayOfArrayString(const ArrayOfArrayString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.ArrayOfArrayString)
}

void ArrayOfArrayString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayOfArrayString::~ArrayOfArrayString() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.ArrayOfArrayString)
  SharedDtor();
}

void ArrayOfArrayString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayOfArrayString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayOfArrayString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayOfArrayString_descriptor_;
}

const ArrayOfArrayString& ArrayOfArrayString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

ArrayOfArrayString* ArrayOfArrayString::default_instance_ = NULL;

ArrayOfArrayString* ArrayOfArrayString::New() const {
  return new ArrayOfArrayString;
}

void ArrayOfArrayString::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayOfArrayString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.ArrayOfArrayString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.ArrayString element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.ArrayOfArrayString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.ArrayOfArrayString)
  return false;
#undef DO_
}

void ArrayOfArrayString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.ArrayOfArrayString)
  // repeated .MLB.ProtoBuf.ArrayString element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.ArrayOfArrayString)
}

::google::protobuf::uint8* ArrayOfArrayString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.ArrayOfArrayString)
  // repeated .MLB.ProtoBuf.ArrayString element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.ArrayOfArrayString)
  return target;
}

int ArrayOfArrayString::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.ArrayString element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayOfArrayString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayOfArrayString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayOfArrayString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayOfArrayString::MergeFrom(const ArrayOfArrayString& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayOfArrayString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayOfArrayString::CopyFrom(const ArrayOfArrayString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayOfArrayString::IsInitialized() const {

  return true;
}

void ArrayOfArrayString::Swap(ArrayOfArrayString* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayOfArrayString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayOfArrayString_descriptor_;
  metadata.reflection = ArrayOfArrayString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1SInt32::kElementFieldNumber;
#endif  // !_MSC_VER

Array1SInt32::Array1SInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1SInt32)
}

void Array1SInt32::InitAsDefaultInstance() {
}

Array1SInt32::Array1SInt32(const Array1SInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1SInt32)
}

void Array1SInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1SInt32::~Array1SInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1SInt32)
  SharedDtor();
}

void Array1SInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1SInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1SInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1SInt32_descriptor_;
}

const Array1SInt32& Array1SInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1SInt32* Array1SInt32::default_instance_ = NULL;

Array1SInt32* Array1SInt32::New() const {
  return new Array1SInt32;
}

void Array1SInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1SInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1SInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1SInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1SInt32)
  return false;
#undef DO_
}

void Array1SInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1SInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1SInt32)
}

::google::protobuf::uint8* Array1SInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1SInt32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1SInt32)
  return target;
}

int Array1SInt32::ByteSize() const {
  int total_size = 0;

  // repeated int32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1SInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1SInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1SInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1SInt32::MergeFrom(const Array1SInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1SInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1SInt32::CopyFrom(const Array1SInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1SInt32::IsInitialized() const {

  return true;
}

void Array1SInt32::Swap(Array1SInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1SInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1SInt32_descriptor_;
  metadata.reflection = Array1SInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Int32::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Int32::Array1Int32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Int32)
}

void Array1Int32::InitAsDefaultInstance() {
}

Array1Int32::Array1Int32(const Array1Int32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Int32)
}

void Array1Int32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Int32::~Array1Int32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Int32)
  SharedDtor();
}

void Array1Int32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Int32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Int32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Int32_descriptor_;
}

const Array1Int32& Array1Int32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Int32* Array1Int32::default_instance_ = NULL;

Array1Int32* Array1Int32::New() const {
  return new Array1Int32;
}

void Array1Int32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Int32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Int32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Int32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Int32)
  return false;
#undef DO_
}

void Array1Int32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Int32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Int32)
}

::google::protobuf::uint8* Array1Int32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Int32)
  // repeated int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Int32)
  return target;
}

int Array1Int32::ByteSize() const {
  int total_size = 0;

  // repeated int32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Int32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Int32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Int32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Int32::MergeFrom(const Array1Int32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Int32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Int32::CopyFrom(const Array1Int32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Int32::IsInitialized() const {

  return true;
}

void Array1Int32::Swap(Array1Int32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Int32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Int32_descriptor_;
  metadata.reflection = Array1Int32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1UInt32::kElementFieldNumber;
#endif  // !_MSC_VER

Array1UInt32::Array1UInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1UInt32)
}

void Array1UInt32::InitAsDefaultInstance() {
}

Array1UInt32::Array1UInt32(const Array1UInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1UInt32)
}

void Array1UInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1UInt32::~Array1UInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1UInt32)
  SharedDtor();
}

void Array1UInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1UInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1UInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1UInt32_descriptor_;
}

const Array1UInt32& Array1UInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1UInt32* Array1UInt32::default_instance_ = NULL;

Array1UInt32* Array1UInt32::New() const {
  return new Array1UInt32;
}

void Array1UInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1UInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1UInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1UInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1UInt32)
  return false;
#undef DO_
}

void Array1UInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1UInt32)
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1UInt32)
}

::google::protobuf::uint8* Array1UInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1UInt32)
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1UInt32)
  return target;
}

int Array1UInt32::ByteSize() const {
  int total_size = 0;

  // repeated uint32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1UInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1UInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1UInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1UInt32::MergeFrom(const Array1UInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1UInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1UInt32::CopyFrom(const Array1UInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1UInt32::IsInitialized() const {

  return true;
}

void Array1UInt32::Swap(Array1UInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1UInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1UInt32_descriptor_;
  metadata.reflection = Array1UInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1SInt64::kElementFieldNumber;
#endif  // !_MSC_VER

Array1SInt64::Array1SInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1SInt64)
}

void Array1SInt64::InitAsDefaultInstance() {
}

Array1SInt64::Array1SInt64(const Array1SInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1SInt64)
}

void Array1SInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1SInt64::~Array1SInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1SInt64)
  SharedDtor();
}

void Array1SInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1SInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1SInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1SInt64_descriptor_;
}

const Array1SInt64& Array1SInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1SInt64* Array1SInt64::default_instance_ = NULL;

Array1SInt64* Array1SInt64::New() const {
  return new Array1SInt64;
}

void Array1SInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1SInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1SInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1SInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1SInt64)
  return false;
#undef DO_
}

void Array1SInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1SInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1SInt64)
}

::google::protobuf::uint8* Array1SInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1SInt64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1SInt64)
  return target;
}

int Array1SInt64::ByteSize() const {
  int total_size = 0;

  // repeated int64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1SInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1SInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1SInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1SInt64::MergeFrom(const Array1SInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1SInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1SInt64::CopyFrom(const Array1SInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1SInt64::IsInitialized() const {

  return true;
}

void Array1SInt64::Swap(Array1SInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1SInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1SInt64_descriptor_;
  metadata.reflection = Array1SInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Int64::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Int64::Array1Int64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Int64)
}

void Array1Int64::InitAsDefaultInstance() {
}

Array1Int64::Array1Int64(const Array1Int64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Int64)
}

void Array1Int64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Int64::~Array1Int64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Int64)
  SharedDtor();
}

void Array1Int64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Int64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Int64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Int64_descriptor_;
}

const Array1Int64& Array1Int64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Int64* Array1Int64::default_instance_ = NULL;

Array1Int64* Array1Int64::New() const {
  return new Array1Int64;
}

void Array1Int64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Int64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Int64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Int64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Int64)
  return false;
#undef DO_
}

void Array1Int64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Int64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Int64)
}

::google::protobuf::uint8* Array1Int64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Int64)
  // repeated int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Int64)
  return target;
}

int Array1Int64::ByteSize() const {
  int total_size = 0;

  // repeated int64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Int64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Int64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Int64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Int64::MergeFrom(const Array1Int64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Int64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Int64::CopyFrom(const Array1Int64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Int64::IsInitialized() const {

  return true;
}

void Array1Int64::Swap(Array1Int64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Int64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Int64_descriptor_;
  metadata.reflection = Array1Int64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1UInt64::kElementFieldNumber;
#endif  // !_MSC_VER

Array1UInt64::Array1UInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1UInt64)
}

void Array1UInt64::InitAsDefaultInstance() {
}

Array1UInt64::Array1UInt64(const Array1UInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1UInt64)
}

void Array1UInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1UInt64::~Array1UInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1UInt64)
  SharedDtor();
}

void Array1UInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1UInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1UInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1UInt64_descriptor_;
}

const Array1UInt64& Array1UInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1UInt64* Array1UInt64::default_instance_ = NULL;

Array1UInt64* Array1UInt64::New() const {
  return new Array1UInt64;
}

void Array1UInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1UInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1UInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1UInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1UInt64)
  return false;
#undef DO_
}

void Array1UInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1UInt64)
  // repeated uint64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1UInt64)
}

::google::protobuf::uint8* Array1UInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1UInt64)
  // repeated uint64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1UInt64)
  return target;
}

int Array1UInt64::ByteSize() const {
  int total_size = 0;

  // repeated uint64 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1UInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1UInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1UInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1UInt64::MergeFrom(const Array1UInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1UInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1UInt64::CopyFrom(const Array1UInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1UInt64::IsInitialized() const {

  return true;
}

void Array1UInt64::Swap(Array1UInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1UInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1UInt64_descriptor_;
  metadata.reflection = Array1UInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Float32::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Float32::Array1Float32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Float32)
}

void Array1Float32::InitAsDefaultInstance() {
}

Array1Float32::Array1Float32(const Array1Float32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Float32)
}

void Array1Float32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Float32::~Array1Float32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Float32)
  SharedDtor();
}

void Array1Float32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Float32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Float32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Float32_descriptor_;
}

const Array1Float32& Array1Float32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Float32* Array1Float32::default_instance_ = NULL;

Array1Float32* Array1Float32::New() const {
  return new Array1Float32;
}

void Array1Float32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Float32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Float32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 13) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Float32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Float32)
  return false;
#undef DO_
}

void Array1Float32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Float32)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Float32)
}

::google::protobuf::uint8* Array1Float32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Float32)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Float32)
  return target;
}

int Array1Float32::ByteSize() const {
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Float32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Float32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Float32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Float32::MergeFrom(const Array1Float32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Float32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Float32::CopyFrom(const Array1Float32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Float32::IsInitialized() const {

  return true;
}

void Array1Float32::Swap(Array1Float32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Float32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Float32_descriptor_;
  metadata.reflection = Array1Float32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Float64::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Float64::Array1Float64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Float64)
}

void Array1Float64::InitAsDefaultInstance() {
}

Array1Float64::Array1Float64(const Array1Float64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Float64)
}

void Array1Float64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Float64::~Array1Float64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Float64)
  SharedDtor();
}

void Array1Float64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Float64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Float64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Float64_descriptor_;
}

const Array1Float64& Array1Float64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Float64* Array1Float64::default_instance_ = NULL;

Array1Float64* Array1Float64::New() const {
  return new Array1Float64;
}

void Array1Float64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Float64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Float64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double element = 1;
      case 1: {
        if (tag == 9) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Float64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Float64)
  return false;
#undef DO_
}

void Array1Float64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Float64)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Float64)
}

::google::protobuf::uint8* Array1Float64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Float64)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Float64)
  return target;
}

int Array1Float64::ByteSize() const {
  int total_size = 0;

  // repeated double element = 1;
  {
    int data_size = 0;
    data_size = 8 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Float64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Float64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Float64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Float64::MergeFrom(const Array1Float64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Float64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Float64::CopyFrom(const Array1Float64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Float64::IsInitialized() const {

  return true;
}

void Array1Float64::Swap(Array1Float64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Float64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Float64_descriptor_;
  metadata.reflection = Array1Float64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Float::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Float::Array1Float()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Float)
}

void Array1Float::InitAsDefaultInstance() {
}

Array1Float::Array1Float(const Array1Float& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Float)
}

void Array1Float::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Float::~Array1Float() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Float)
  SharedDtor();
}

void Array1Float::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Float::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Float::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Float_descriptor_;
}

const Array1Float& Array1Float::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Float* Array1Float::default_instance_ = NULL;

Array1Float* Array1Float::New() const {
  return new Array1Float;
}

void Array1Float::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Float)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float element = 1;
      case 1: {
        if (tag == 13) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Float)
  return false;
#undef DO_
}

void Array1Float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Float)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Float)
}

::google::protobuf::uint8* Array1Float::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Float)
  // repeated float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Float)
  return target;
}

int Array1Float::ByteSize() const {
  int total_size = 0;

  // repeated float element = 1;
  {
    int data_size = 0;
    data_size = 4 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Float::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Float* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Float*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Float::MergeFrom(const Array1Float& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Float::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Float::CopyFrom(const Array1Float& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Float::IsInitialized() const {

  return true;
}

void Array1Float::Swap(Array1Float* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Float::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Float_descriptor_;
  metadata.reflection = Array1Float_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Double::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Double::Array1Double()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Double)
}

void Array1Double::InitAsDefaultInstance() {
}

Array1Double::Array1Double(const Array1Double& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Double)
}

void Array1Double::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Double::~Array1Double() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Double)
  SharedDtor();
}

void Array1Double::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Double::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Double_descriptor_;
}

const Array1Double& Array1Double::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Double* Array1Double::default_instance_ = NULL;

Array1Double* Array1Double::New() const {
  return new Array1Double;
}

void Array1Double::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Double)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double element = 1;
      case 1: {
        if (tag == 9) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Double)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Double)
  return false;
#undef DO_
}

void Array1Double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Double)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Double)
}

::google::protobuf::uint8* Array1Double::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Double)
  // repeated double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Double)
  return target;
}

int Array1Double::ByteSize() const {
  int total_size = 0;

  // repeated double element = 1;
  {
    int data_size = 0;
    data_size = 8 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Double::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Double* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Double*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Double::MergeFrom(const Array1Double& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Double::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Double::CopyFrom(const Array1Double& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Double::IsInitialized() const {

  return true;
}

void Array1Double::Swap(Array1Double* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Double::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Double_descriptor_;
  metadata.reflection = Array1Double_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1Bool::kElementFieldNumber;
#endif  // !_MSC_VER

Array1Bool::Array1Bool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1Bool)
}

void Array1Bool::InitAsDefaultInstance() {
}

Array1Bool::Array1Bool(const Array1Bool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1Bool)
}

void Array1Bool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1Bool::~Array1Bool() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1Bool)
  SharedDtor();
}

void Array1Bool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1Bool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1Bool_descriptor_;
}

const Array1Bool& Array1Bool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1Bool* Array1Bool::default_instance_ = NULL;

Array1Bool* Array1Bool::New() const {
  return new Array1Bool;
}

void Array1Bool::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1Bool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool element = 1;
      case 1: {
        if (tag == 8) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_element())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1Bool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1Bool)
  return false;
#undef DO_
}

void Array1Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1Bool)
  // repeated bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1Bool)
}

::google::protobuf::uint8* Array1Bool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1Bool)
  // repeated bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1Bool)
  return target;
}

int Array1Bool::ByteSize() const {
  int total_size = 0;

  // repeated bool element = 1;
  {
    int data_size = 0;
    data_size = 1 * this->element_size();
    total_size += 1 * this->element_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1Bool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1Bool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1Bool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1Bool::MergeFrom(const Array1Bool& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1Bool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1Bool::CopyFrom(const Array1Bool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1Bool::IsInitialized() const {

  return true;
}

void Array1Bool::Swap(Array1Bool* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1Bool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1Bool_descriptor_;
  metadata.reflection = Array1Bool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array1String::kElementFieldNumber;
#endif  // !_MSC_VER

Array1String::Array1String()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array1String)
}

void Array1String::InitAsDefaultInstance() {
}

Array1String::Array1String(const Array1String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array1String)
}

void Array1String::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array1String::~Array1String() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array1String)
  SharedDtor();
}

void Array1String::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array1String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array1String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array1String_descriptor_;
}

const Array1String& Array1String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array1String* Array1String::default_instance_ = NULL;

Array1String* Array1String::New() const {
  return new Array1String;
}

void Array1String::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array1String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array1String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_element()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->element(this->element_size() - 1).data(),
            this->element(this->element_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "element");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array1String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array1String)
  return false;
#undef DO_
}

void Array1String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array1String)
  // repeated string element = 1;
  for (int i = 0; i < this->element_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->element(i).data(), this->element(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "element");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array1String)
}

::google::protobuf::uint8* Array1String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array1String)
  // repeated string element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element(i).data(), this->element(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "element");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array1String)
  return target;
}

int Array1String::ByteSize() const {
  int total_size = 0;

  // repeated string element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array1String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array1String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array1String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array1String::MergeFrom(const Array1String& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array1String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array1String::CopyFrom(const Array1String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array1String::IsInitialized() const {

  return true;
}

void Array1String::Swap(Array1String* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array1String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array1String_descriptor_;
  metadata.reflection = Array1String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2SInt32::kElementFieldNumber;
#endif  // !_MSC_VER

Array2SInt32::Array2SInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2SInt32)
}

void Array2SInt32::InitAsDefaultInstance() {
}

Array2SInt32::Array2SInt32(const Array2SInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2SInt32)
}

void Array2SInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2SInt32::~Array2SInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2SInt32)
  SharedDtor();
}

void Array2SInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2SInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2SInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2SInt32_descriptor_;
}

const Array2SInt32& Array2SInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2SInt32* Array2SInt32::default_instance_ = NULL;

Array2SInt32* Array2SInt32::New() const {
  return new Array2SInt32;
}

void Array2SInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2SInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2SInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1SInt32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2SInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2SInt32)
  return false;
#undef DO_
}

void Array2SInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2SInt32)
  // repeated .MLB.ProtoBuf.Array1SInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2SInt32)
}

::google::protobuf::uint8* Array2SInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2SInt32)
  // repeated .MLB.ProtoBuf.Array1SInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2SInt32)
  return target;
}

int Array2SInt32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1SInt32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2SInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2SInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2SInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2SInt32::MergeFrom(const Array2SInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2SInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2SInt32::CopyFrom(const Array2SInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2SInt32::IsInitialized() const {

  return true;
}

void Array2SInt32::Swap(Array2SInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2SInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2SInt32_descriptor_;
  metadata.reflection = Array2SInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Int32::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Int32::Array2Int32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Int32)
}

void Array2Int32::InitAsDefaultInstance() {
}

Array2Int32::Array2Int32(const Array2Int32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Int32)
}

void Array2Int32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Int32::~Array2Int32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Int32)
  SharedDtor();
}

void Array2Int32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Int32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Int32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Int32_descriptor_;
}

const Array2Int32& Array2Int32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Int32* Array2Int32::default_instance_ = NULL;

Array2Int32* Array2Int32::New() const {
  return new Array2Int32;
}

void Array2Int32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Int32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Int32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Int32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Int32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Int32)
  return false;
#undef DO_
}

void Array2Int32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Int32)
  // repeated .MLB.ProtoBuf.Array1Int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Int32)
}

::google::protobuf::uint8* Array2Int32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Int32)
  // repeated .MLB.ProtoBuf.Array1Int32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Int32)
  return target;
}

int Array2Int32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Int32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Int32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Int32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Int32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Int32::MergeFrom(const Array2Int32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Int32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Int32::CopyFrom(const Array2Int32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Int32::IsInitialized() const {

  return true;
}

void Array2Int32::Swap(Array2Int32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Int32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Int32_descriptor_;
  metadata.reflection = Array2Int32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2UInt32::kElementFieldNumber;
#endif  // !_MSC_VER

Array2UInt32::Array2UInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2UInt32)
}

void Array2UInt32::InitAsDefaultInstance() {
}

Array2UInt32::Array2UInt32(const Array2UInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2UInt32)
}

void Array2UInt32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2UInt32::~Array2UInt32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2UInt32)
  SharedDtor();
}

void Array2UInt32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2UInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2UInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2UInt32_descriptor_;
}

const Array2UInt32& Array2UInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2UInt32* Array2UInt32::default_instance_ = NULL;

Array2UInt32* Array2UInt32::New() const {
  return new Array2UInt32;
}

void Array2UInt32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2UInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2UInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1UInt32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2UInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2UInt32)
  return false;
#undef DO_
}

void Array2UInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2UInt32)
  // repeated .MLB.ProtoBuf.Array1UInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2UInt32)
}

::google::protobuf::uint8* Array2UInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2UInt32)
  // repeated .MLB.ProtoBuf.Array1UInt32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2UInt32)
  return target;
}

int Array2UInt32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1UInt32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2UInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2UInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2UInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2UInt32::MergeFrom(const Array2UInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2UInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2UInt32::CopyFrom(const Array2UInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2UInt32::IsInitialized() const {

  return true;
}

void Array2UInt32::Swap(Array2UInt32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2UInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2UInt32_descriptor_;
  metadata.reflection = Array2UInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2SInt64::kElementFieldNumber;
#endif  // !_MSC_VER

Array2SInt64::Array2SInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2SInt64)
}

void Array2SInt64::InitAsDefaultInstance() {
}

Array2SInt64::Array2SInt64(const Array2SInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2SInt64)
}

void Array2SInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2SInt64::~Array2SInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2SInt64)
  SharedDtor();
}

void Array2SInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2SInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2SInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2SInt64_descriptor_;
}

const Array2SInt64& Array2SInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2SInt64* Array2SInt64::default_instance_ = NULL;

Array2SInt64* Array2SInt64::New() const {
  return new Array2SInt64;
}

void Array2SInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2SInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2SInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1SInt64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2SInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2SInt64)
  return false;
#undef DO_
}

void Array2SInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2SInt64)
  // repeated .MLB.ProtoBuf.Array1SInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2SInt64)
}

::google::protobuf::uint8* Array2SInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2SInt64)
  // repeated .MLB.ProtoBuf.Array1SInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2SInt64)
  return target;
}

int Array2SInt64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1SInt64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2SInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2SInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2SInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2SInt64::MergeFrom(const Array2SInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2SInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2SInt64::CopyFrom(const Array2SInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2SInt64::IsInitialized() const {

  return true;
}

void Array2SInt64::Swap(Array2SInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2SInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2SInt64_descriptor_;
  metadata.reflection = Array2SInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Int64::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Int64::Array2Int64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Int64)
}

void Array2Int64::InitAsDefaultInstance() {
}

Array2Int64::Array2Int64(const Array2Int64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Int64)
}

void Array2Int64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Int64::~Array2Int64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Int64)
  SharedDtor();
}

void Array2Int64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Int64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Int64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Int64_descriptor_;
}

const Array2Int64& Array2Int64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Int64* Array2Int64::default_instance_ = NULL;

Array2Int64* Array2Int64::New() const {
  return new Array2Int64;
}

void Array2Int64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Int64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Int64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Int64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Int64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Int64)
  return false;
#undef DO_
}

void Array2Int64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Int64)
  // repeated .MLB.ProtoBuf.Array1Int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Int64)
}

::google::protobuf::uint8* Array2Int64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Int64)
  // repeated .MLB.ProtoBuf.Array1Int64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Int64)
  return target;
}

int Array2Int64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Int64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Int64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Int64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Int64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Int64::MergeFrom(const Array2Int64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Int64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Int64::CopyFrom(const Array2Int64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Int64::IsInitialized() const {

  return true;
}

void Array2Int64::Swap(Array2Int64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Int64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Int64_descriptor_;
  metadata.reflection = Array2Int64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2UInt64::kElementFieldNumber;
#endif  // !_MSC_VER

Array2UInt64::Array2UInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2UInt64)
}

void Array2UInt64::InitAsDefaultInstance() {
}

Array2UInt64::Array2UInt64(const Array2UInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2UInt64)
}

void Array2UInt64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2UInt64::~Array2UInt64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2UInt64)
  SharedDtor();
}

void Array2UInt64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2UInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2UInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2UInt64_descriptor_;
}

const Array2UInt64& Array2UInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2UInt64* Array2UInt64::default_instance_ = NULL;

Array2UInt64* Array2UInt64::New() const {
  return new Array2UInt64;
}

void Array2UInt64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2UInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2UInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1UInt64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2UInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2UInt64)
  return false;
#undef DO_
}

void Array2UInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2UInt64)
  // repeated .MLB.ProtoBuf.Array1UInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2UInt64)
}

::google::protobuf::uint8* Array2UInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2UInt64)
  // repeated .MLB.ProtoBuf.Array1UInt64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2UInt64)
  return target;
}

int Array2UInt64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1UInt64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2UInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2UInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2UInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2UInt64::MergeFrom(const Array2UInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2UInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2UInt64::CopyFrom(const Array2UInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2UInt64::IsInitialized() const {

  return true;
}

void Array2UInt64::Swap(Array2UInt64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2UInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2UInt64_descriptor_;
  metadata.reflection = Array2UInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Float32::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Float32::Array2Float32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Float32)
}

void Array2Float32::InitAsDefaultInstance() {
}

Array2Float32::Array2Float32(const Array2Float32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Float32)
}

void Array2Float32::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Float32::~Array2Float32() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Float32)
  SharedDtor();
}

void Array2Float32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Float32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Float32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Float32_descriptor_;
}

const Array2Float32& Array2Float32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Float32* Array2Float32::default_instance_ = NULL;

Array2Float32* Array2Float32::New() const {
  return new Array2Float32;
}

void Array2Float32::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Float32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Float32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Float32 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Float32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Float32)
  return false;
#undef DO_
}

void Array2Float32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Float32)
  // repeated .MLB.ProtoBuf.Array1Float32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Float32)
}

::google::protobuf::uint8* Array2Float32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Float32)
  // repeated .MLB.ProtoBuf.Array1Float32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Float32)
  return target;
}

int Array2Float32::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Float32 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Float32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Float32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Float32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Float32::MergeFrom(const Array2Float32& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Float32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Float32::CopyFrom(const Array2Float32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Float32::IsInitialized() const {

  return true;
}

void Array2Float32::Swap(Array2Float32* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Float32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Float32_descriptor_;
  metadata.reflection = Array2Float32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Float64::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Float64::Array2Float64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Float64)
}

void Array2Float64::InitAsDefaultInstance() {
}

Array2Float64::Array2Float64(const Array2Float64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Float64)
}

void Array2Float64::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Float64::~Array2Float64() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Float64)
  SharedDtor();
}

void Array2Float64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Float64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Float64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Float64_descriptor_;
}

const Array2Float64& Array2Float64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Float64* Array2Float64::default_instance_ = NULL;

Array2Float64* Array2Float64::New() const {
  return new Array2Float64;
}

void Array2Float64::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Float64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Float64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Float64 element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Float64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Float64)
  return false;
#undef DO_
}

void Array2Float64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Float64)
  // repeated .MLB.ProtoBuf.Array1Float64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Float64)
}

::google::protobuf::uint8* Array2Float64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Float64)
  // repeated .MLB.ProtoBuf.Array1Float64 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Float64)
  return target;
}

int Array2Float64::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Float64 element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Float64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Float64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Float64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Float64::MergeFrom(const Array2Float64& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Float64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Float64::CopyFrom(const Array2Float64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Float64::IsInitialized() const {

  return true;
}

void Array2Float64::Swap(Array2Float64* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Float64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Float64_descriptor_;
  metadata.reflection = Array2Float64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Float::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Float::Array2Float()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Float)
}

void Array2Float::InitAsDefaultInstance() {
}

Array2Float::Array2Float(const Array2Float& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Float)
}

void Array2Float::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Float::~Array2Float() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Float)
  SharedDtor();
}

void Array2Float::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Float::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Float::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Float_descriptor_;
}

const Array2Float& Array2Float::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Float* Array2Float::default_instance_ = NULL;

Array2Float* Array2Float::New() const {
  return new Array2Float;
}

void Array2Float::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Float)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Float element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Float)
  return false;
#undef DO_
}

void Array2Float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Float)
  // repeated .MLB.ProtoBuf.Array1Float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Float)
}

::google::protobuf::uint8* Array2Float::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Float)
  // repeated .MLB.ProtoBuf.Array1Float element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Float)
  return target;
}

int Array2Float::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Float element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Float::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Float* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Float*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Float::MergeFrom(const Array2Float& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Float::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Float::CopyFrom(const Array2Float& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Float::IsInitialized() const {

  return true;
}

void Array2Float::Swap(Array2Float* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Float::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Float_descriptor_;
  metadata.reflection = Array2Float_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Double::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Double::Array2Double()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Double)
}

void Array2Double::InitAsDefaultInstance() {
}

Array2Double::Array2Double(const Array2Double& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Double)
}

void Array2Double::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Double::~Array2Double() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Double)
  SharedDtor();
}

void Array2Double::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Double::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Double_descriptor_;
}

const Array2Double& Array2Double::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Double* Array2Double::default_instance_ = NULL;

Array2Double* Array2Double::New() const {
  return new Array2Double;
}

void Array2Double::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Double)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Double element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Double)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Double)
  return false;
#undef DO_
}

void Array2Double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Double)
  // repeated .MLB.ProtoBuf.Array1Double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Double)
}

::google::protobuf::uint8* Array2Double::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Double)
  // repeated .MLB.ProtoBuf.Array1Double element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Double)
  return target;
}

int Array2Double::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Double element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Double::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Double* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Double*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Double::MergeFrom(const Array2Double& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Double::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Double::CopyFrom(const Array2Double& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Double::IsInitialized() const {

  return true;
}

void Array2Double::Swap(Array2Double* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Double::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Double_descriptor_;
  metadata.reflection = Array2Double_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2Bool::kElementFieldNumber;
#endif  // !_MSC_VER

Array2Bool::Array2Bool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2Bool)
}

void Array2Bool::InitAsDefaultInstance() {
}

Array2Bool::Array2Bool(const Array2Bool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2Bool)
}

void Array2Bool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2Bool::~Array2Bool() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2Bool)
  SharedDtor();
}

void Array2Bool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2Bool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2Bool_descriptor_;
}

const Array2Bool& Array2Bool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2Bool* Array2Bool::default_instance_ = NULL;

Array2Bool* Array2Bool::New() const {
  return new Array2Bool;
}

void Array2Bool::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2Bool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1Bool element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2Bool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2Bool)
  return false;
#undef DO_
}

void Array2Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2Bool)
  // repeated .MLB.ProtoBuf.Array1Bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2Bool)
}

::google::protobuf::uint8* Array2Bool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2Bool)
  // repeated .MLB.ProtoBuf.Array1Bool element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2Bool)
  return target;
}

int Array2Bool::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1Bool element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2Bool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2Bool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2Bool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2Bool::MergeFrom(const Array2Bool& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2Bool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2Bool::CopyFrom(const Array2Bool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2Bool::IsInitialized() const {

  return true;
}

void Array2Bool::Swap(Array2Bool* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2Bool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2Bool_descriptor_;
  metadata.reflection = Array2Bool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array2String::kElementFieldNumber;
#endif  // !_MSC_VER

Array2String::Array2String()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLB.ProtoBuf.Array2String)
}

void Array2String::InitAsDefaultInstance() {
}

Array2String::Array2String(const Array2String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MLB.ProtoBuf.Array2String)
}

void Array2String::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array2String::~Array2String() {
  // @@protoc_insertion_point(destructor:MLB.ProtoBuf.Array2String)
  SharedDtor();
}

void Array2String::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array2String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array2String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array2String_descriptor_;
}

const Array2String& Array2String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArrayTypes_2eproto();
  return *default_instance_;
}

Array2String* Array2String::default_instance_ = NULL;

Array2String* Array2String::New() const {
  return new Array2String;
}

void Array2String::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array2String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLB.ProtoBuf.Array2String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MLB.ProtoBuf.Array1String element = 1;
      case 1: {
        if (tag == 10) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLB.ProtoBuf.Array2String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLB.ProtoBuf.Array2String)
  return false;
#undef DO_
}

void Array2String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLB.ProtoBuf.Array2String)
  // repeated .MLB.ProtoBuf.Array1String element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLB.ProtoBuf.Array2String)
}

::google::protobuf::uint8* Array2String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MLB.ProtoBuf.Array2String)
  // repeated .MLB.ProtoBuf.Array1String element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLB.ProtoBuf.Array2String)
  return target;
}

int Array2String::ByteSize() const {
  int total_size = 0;

  // repeated .MLB.ProtoBuf.Array1String element = 1;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array2String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array2String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array2String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array2String::MergeFrom(const Array2String& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array2String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array2String::CopyFrom(const Array2String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array2String::IsInitialized() const {

  return true;
}

void Array2String::Swap(Array2String* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array2String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array2String_descriptor_;
  metadata.reflection = Array2String_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace MLB

// @@protoc_insertion_point(global_scope)
