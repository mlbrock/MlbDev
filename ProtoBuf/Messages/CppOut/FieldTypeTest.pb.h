// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FieldTypeTest.proto

#ifndef PROTOBUF_FieldTypeTest_2eproto__INCLUDED
#define PROTOBUF_FieldTypeTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ArrayTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace MLB {
namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FieldTypeTest_2eproto();
void protobuf_AssignDesc_FieldTypeTest_2eproto();
void protobuf_ShutdownFile_FieldTypeTest_2eproto();

class PhoneNumber;
class PersonOne;
class AddressBookOne;
class PersonTwo;
class AddressBookTwo;
class FieldTypeTest;
class FieldTypeTest_BigCurrencyPosition;

enum FieldTypeTest_BigCurrency {
  FieldTypeTest_BigCurrency_USD = 1,
  FieldTypeTest_BigCurrency_GBP = 2,
  FieldTypeTest_BigCurrency_EUR = 3,
  FieldTypeTest_BigCurrency_JPY = 4
};
bool FieldTypeTest_BigCurrency_IsValid(int value);
const FieldTypeTest_BigCurrency FieldTypeTest_BigCurrency_BigCurrency_MIN = FieldTypeTest_BigCurrency_USD;
const FieldTypeTest_BigCurrency FieldTypeTest_BigCurrency_BigCurrency_MAX = FieldTypeTest_BigCurrency_JPY;
const int FieldTypeTest_BigCurrency_BigCurrency_ARRAYSIZE = FieldTypeTest_BigCurrency_BigCurrency_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldTypeTest_BigCurrency_descriptor();
inline const ::std::string& FieldTypeTest_BigCurrency_Name(FieldTypeTest_BigCurrency value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldTypeTest_BigCurrency_descriptor(), value);
}
inline bool FieldTypeTest_BigCurrency_Parse(
    const ::std::string& name, FieldTypeTest_BigCurrency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldTypeTest_BigCurrency>(
    FieldTypeTest_BigCurrency_descriptor(), name, value);
}
enum PhoneType {
  MOBILE = 0,
  HOME = 1,
  WORK = 2
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = MOBILE;
const PhoneType PhoneType_MAX = WORK;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class PhoneNumber : public ::google::protobuf::Message {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumber& default_instance();

  void Swap(PhoneNumber* other);

  // implements Message ----------------------------------------------

  PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MLB::ProtoBuf::PhoneType type() const;
  inline void set_type(::MLB::ProtoBuf::PhoneType value);

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* number_;
  int type_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class PersonOne : public ::google::protobuf::Message {
 public:
  PersonOne();
  virtual ~PersonOne();

  PersonOne(const PersonOne& from);

  inline PersonOne& operator=(const PersonOne& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonOne& default_instance();

  void Swap(PersonOne* other);

  // implements Message ----------------------------------------------

  PersonOne* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonOne& from);
  void MergeFrom(const PersonOne& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::MLB::ProtoBuf::PhoneNumber& phone(int index) const;
  inline ::MLB::ProtoBuf::PhoneNumber* mutable_phone(int index);
  inline ::MLB::ProtoBuf::PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >*
      mutable_phone();

  // optional int32 different_datum = 5;
  inline bool has_different_datum() const;
  inline void clear_different_datum();
  static const int kDifferentDatumFieldNumber = 5;
  inline ::google::protobuf::int32 different_datum() const;
  inline void set_different_datum(::google::protobuf::int32 value);

  // optional int32 name_different_1 = 6;
  inline bool has_name_different_1() const;
  inline void clear_name_different_1();
  static const int kNameDifferent1FieldNumber = 6;
  inline ::google::protobuf::int32 name_different_1() const;
  inline void set_name_different_1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.PersonOne)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_different_datum();
  inline void clear_has_different_datum();
  inline void set_has_name_different_1();
  inline void clear_has_name_different_1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 different_datum_;
  ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber > phone_;
  ::google::protobuf::int32 name_different_1_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static PersonOne* default_instance_;
};
// -------------------------------------------------------------------

class AddressBookOne : public ::google::protobuf::Message {
 public:
  AddressBookOne();
  virtual ~AddressBookOne();

  AddressBookOne(const AddressBookOne& from);

  inline AddressBookOne& operator=(const AddressBookOne& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBookOne& default_instance();

  void Swap(AddressBookOne* other);

  // implements Message ----------------------------------------------

  AddressBookOne* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBookOne& from);
  void MergeFrom(const AddressBookOne& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MLB.ProtoBuf.PersonOne person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::MLB::ProtoBuf::PersonOne& person(int index) const;
  inline ::MLB::ProtoBuf::PersonOne* mutable_person(int index);
  inline ::MLB::ProtoBuf::PersonOne* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonOne >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonOne >*
      mutable_person();

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.AddressBookOne)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonOne > person_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static AddressBookOne* default_instance_;
};
// -------------------------------------------------------------------

class PersonTwo : public ::google::protobuf::Message {
 public:
  PersonTwo();
  virtual ~PersonTwo();

  PersonTwo(const PersonTwo& from);

  inline PersonTwo& operator=(const PersonTwo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonTwo& default_instance();

  void Swap(PersonTwo* other);

  // implements Message ----------------------------------------------

  PersonTwo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonTwo& from);
  void MergeFrom(const PersonTwo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::MLB::ProtoBuf::PhoneNumber& phone(int index) const;
  inline ::MLB::ProtoBuf::PhoneNumber* mutable_phone(int index);
  inline ::MLB::ProtoBuf::PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >*
      mutable_phone();

  // optional uint32 different_datum = 5;
  inline bool has_different_datum() const;
  inline void clear_different_datum();
  static const int kDifferentDatumFieldNumber = 5;
  inline ::google::protobuf::uint32 different_datum() const;
  inline void set_different_datum(::google::protobuf::uint32 value);

  // optional int32 name_different_2 = 6;
  inline bool has_name_different_2() const;
  inline void clear_name_different_2();
  static const int kNameDifferent2FieldNumber = 6;
  inline ::google::protobuf::int32 name_different_2() const;
  inline void set_name_different_2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.PersonTwo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_different_datum();
  inline void clear_has_different_datum();
  inline void set_has_name_different_2();
  inline void clear_has_name_different_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 different_datum_;
  ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber > phone_;
  ::google::protobuf::int32 name_different_2_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static PersonTwo* default_instance_;
};
// -------------------------------------------------------------------

class AddressBookTwo : public ::google::protobuf::Message {
 public:
  AddressBookTwo();
  virtual ~AddressBookTwo();

  AddressBookTwo(const AddressBookTwo& from);

  inline AddressBookTwo& operator=(const AddressBookTwo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBookTwo& default_instance();

  void Swap(AddressBookTwo* other);

  // implements Message ----------------------------------------------

  AddressBookTwo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBookTwo& from);
  void MergeFrom(const AddressBookTwo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MLB.ProtoBuf.PersonTwo person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::MLB::ProtoBuf::PersonTwo& person(int index) const;
  inline ::MLB::ProtoBuf::PersonTwo* mutable_person(int index);
  inline ::MLB::ProtoBuf::PersonTwo* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonTwo >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonTwo >*
      mutable_person();

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.AddressBookTwo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonTwo > person_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static AddressBookTwo* default_instance_;
};
// -------------------------------------------------------------------

class FieldTypeTest_BigCurrencyPosition : public ::google::protobuf::Message {
 public:
  FieldTypeTest_BigCurrencyPosition();
  virtual ~FieldTypeTest_BigCurrencyPosition();

  FieldTypeTest_BigCurrencyPosition(const FieldTypeTest_BigCurrencyPosition& from);

  inline FieldTypeTest_BigCurrencyPosition& operator=(const FieldTypeTest_BigCurrencyPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldTypeTest_BigCurrencyPosition& default_instance();

  void Swap(FieldTypeTest_BigCurrencyPosition* other);

  // implements Message ----------------------------------------------

  FieldTypeTest_BigCurrencyPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldTypeTest_BigCurrencyPosition& from);
  void MergeFrom(const FieldTypeTest_BigCurrencyPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency currency() const;
  inline void set_currency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value);

  // optional double position = 2 [default = 0];
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline double position() const;
  inline void set_position(double value);

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition)
 private:
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double position_;
  int currency_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static FieldTypeTest_BigCurrencyPosition* default_instance_;
};
// -------------------------------------------------------------------

class FieldTypeTest : public ::google::protobuf::Message {
 public:
  FieldTypeTest();
  virtual ~FieldTypeTest();

  FieldTypeTest(const FieldTypeTest& from);

  inline FieldTypeTest& operator=(const FieldTypeTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldTypeTest& default_instance();

  void Swap(FieldTypeTest* other);

  // implements Message ----------------------------------------------

  FieldTypeTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldTypeTest& from);
  void MergeFrom(const FieldTypeTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FieldTypeTest_BigCurrencyPosition BigCurrencyPosition;

  typedef FieldTypeTest_BigCurrency BigCurrency;
  static const BigCurrency USD = FieldTypeTest_BigCurrency_USD;
  static const BigCurrency GBP = FieldTypeTest_BigCurrency_GBP;
  static const BigCurrency EUR = FieldTypeTest_BigCurrency_EUR;
  static const BigCurrency JPY = FieldTypeTest_BigCurrency_JPY;
  static inline bool BigCurrency_IsValid(int value) {
    return FieldTypeTest_BigCurrency_IsValid(value);
  }
  static const BigCurrency BigCurrency_MIN =
    FieldTypeTest_BigCurrency_BigCurrency_MIN;
  static const BigCurrency BigCurrency_MAX =
    FieldTypeTest_BigCurrency_BigCurrency_MAX;
  static const int BigCurrency_ARRAYSIZE =
    FieldTypeTest_BigCurrency_BigCurrency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BigCurrency_descriptor() {
    return FieldTypeTest_BigCurrency_descriptor();
  }
  static inline const ::std::string& BigCurrency_Name(BigCurrency value) {
    return FieldTypeTest_BigCurrency_Name(value);
  }
  static inline bool BigCurrency_Parse(const ::std::string& name,
      BigCurrency* value) {
    return FieldTypeTest_BigCurrency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional double scalar_double = 101;
  inline bool has_scalar_double() const;
  inline void clear_scalar_double();
  static const int kScalarDoubleFieldNumber = 101;
  inline double scalar_double() const;
  inline void set_scalar_double(double value);

  // optional float scalar_float = 102;
  inline bool has_scalar_float() const;
  inline void clear_scalar_float();
  static const int kScalarFloatFieldNumber = 102;
  inline float scalar_float() const;
  inline void set_scalar_float(float value);

  // optional int32 scalar_int32 = 103;
  inline bool has_scalar_int32() const;
  inline void clear_scalar_int32();
  static const int kScalarInt32FieldNumber = 103;
  inline ::google::protobuf::int32 scalar_int32() const;
  inline void set_scalar_int32(::google::protobuf::int32 value);

  // optional int64 scalar_int64 = 104;
  inline bool has_scalar_int64() const;
  inline void clear_scalar_int64();
  static const int kScalarInt64FieldNumber = 104;
  inline ::google::protobuf::int64 scalar_int64() const;
  inline void set_scalar_int64(::google::protobuf::int64 value);

  // optional uint32 scalar_uint32 = 105;
  inline bool has_scalar_uint32() const;
  inline void clear_scalar_uint32();
  static const int kScalarUint32FieldNumber = 105;
  inline ::google::protobuf::uint32 scalar_uint32() const;
  inline void set_scalar_uint32(::google::protobuf::uint32 value);

  // optional uint64 scalar_uint64 = 106;
  inline bool has_scalar_uint64() const;
  inline void clear_scalar_uint64();
  static const int kScalarUint64FieldNumber = 106;
  inline ::google::protobuf::uint64 scalar_uint64() const;
  inline void set_scalar_uint64(::google::protobuf::uint64 value);

  // optional sint32 scalar_sint32 = 107;
  inline bool has_scalar_sint32() const;
  inline void clear_scalar_sint32();
  static const int kScalarSint32FieldNumber = 107;
  inline ::google::protobuf::int32 scalar_sint32() const;
  inline void set_scalar_sint32(::google::protobuf::int32 value);

  // optional sint64 scalar_sint64 = 108;
  inline bool has_scalar_sint64() const;
  inline void clear_scalar_sint64();
  static const int kScalarSint64FieldNumber = 108;
  inline ::google::protobuf::int64 scalar_sint64() const;
  inline void set_scalar_sint64(::google::protobuf::int64 value);

  // optional fixed32 scalar_fixed32 = 109;
  inline bool has_scalar_fixed32() const;
  inline void clear_scalar_fixed32();
  static const int kScalarFixed32FieldNumber = 109;
  inline ::google::protobuf::uint32 scalar_fixed32() const;
  inline void set_scalar_fixed32(::google::protobuf::uint32 value);

  // optional fixed64 scalar_fixed64 = 110;
  inline bool has_scalar_fixed64() const;
  inline void clear_scalar_fixed64();
  static const int kScalarFixed64FieldNumber = 110;
  inline ::google::protobuf::uint64 scalar_fixed64() const;
  inline void set_scalar_fixed64(::google::protobuf::uint64 value);

  // optional sfixed32 scalar_sfixed32 = 111;
  inline bool has_scalar_sfixed32() const;
  inline void clear_scalar_sfixed32();
  static const int kScalarSfixed32FieldNumber = 111;
  inline ::google::protobuf::int32 scalar_sfixed32() const;
  inline void set_scalar_sfixed32(::google::protobuf::int32 value);

  // optional sfixed64 scalar_sfixed64 = 112;
  inline bool has_scalar_sfixed64() const;
  inline void clear_scalar_sfixed64();
  static const int kScalarSfixed64FieldNumber = 112;
  inline ::google::protobuf::int64 scalar_sfixed64() const;
  inline void set_scalar_sfixed64(::google::protobuf::int64 value);

  // optional bool scalar_bool = 113;
  inline bool has_scalar_bool() const;
  inline void clear_scalar_bool();
  static const int kScalarBoolFieldNumber = 113;
  inline bool scalar_bool() const;
  inline void set_scalar_bool(bool value);

  // optional string scalar_string = 114;
  inline bool has_scalar_string() const;
  inline void clear_scalar_string();
  static const int kScalarStringFieldNumber = 114;
  inline const ::std::string& scalar_string() const;
  inline void set_scalar_string(const ::std::string& value);
  inline void set_scalar_string(const char* value);
  inline void set_scalar_string(const char* value, size_t size);
  inline ::std::string* mutable_scalar_string();
  inline ::std::string* release_scalar_string();
  inline void set_allocated_scalar_string(::std::string* scalar_string);

  // optional bytes scalar_bytes = 115;
  inline bool has_scalar_bytes() const;
  inline void clear_scalar_bytes();
  static const int kScalarBytesFieldNumber = 115;
  inline const ::std::string& scalar_bytes() const;
  inline void set_scalar_bytes(const ::std::string& value);
  inline void set_scalar_bytes(const char* value);
  inline void set_scalar_bytes(const void* value, size_t size);
  inline ::std::string* mutable_scalar_bytes();
  inline ::std::string* release_scalar_bytes();
  inline void set_allocated_scalar_bytes(::std::string* scalar_bytes);

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
  inline bool has_scalar_bigcurrency() const;
  inline void clear_scalar_bigcurrency();
  static const int kScalarBigCurrencyFieldNumber = 116;
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency scalar_bigcurrency() const;
  inline void set_scalar_bigcurrency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value);

  // optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
  inline bool has_scalar_bigcurrencyposition() const;
  inline void clear_scalar_bigcurrencyposition();
  static const int kScalarBigCurrencyPositionFieldNumber = 117;
  inline const ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition& scalar_bigcurrencyposition() const;
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* mutable_scalar_bigcurrencyposition();
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* release_scalar_bigcurrencyposition();
  inline void set_allocated_scalar_bigcurrencyposition(::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* scalar_bigcurrencyposition);

  // repeated double vector_double = 201;
  inline int vector_double_size() const;
  inline void clear_vector_double();
  static const int kVectorDoubleFieldNumber = 201;
  inline double vector_double(int index) const;
  inline void set_vector_double(int index, double value);
  inline void add_vector_double(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      vector_double() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_vector_double();

  // repeated float vector_float = 202;
  inline int vector_float_size() const;
  inline void clear_vector_float();
  static const int kVectorFloatFieldNumber = 202;
  inline float vector_float(int index) const;
  inline void set_vector_float(int index, float value);
  inline void add_vector_float(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      vector_float() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_vector_float();

  // repeated int32 vector_int32 = 203;
  inline int vector_int32_size() const;
  inline void clear_vector_int32();
  static const int kVectorInt32FieldNumber = 203;
  inline ::google::protobuf::int32 vector_int32(int index) const;
  inline void set_vector_int32(int index, ::google::protobuf::int32 value);
  inline void add_vector_int32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vector_int32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vector_int32();

  // repeated int64 vector_int64 = 204;
  inline int vector_int64_size() const;
  inline void clear_vector_int64();
  static const int kVectorInt64FieldNumber = 204;
  inline ::google::protobuf::int64 vector_int64(int index) const;
  inline void set_vector_int64(int index, ::google::protobuf::int64 value);
  inline void add_vector_int64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      vector_int64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_vector_int64();

  // repeated uint32 vector_uint32 = 205;
  inline int vector_uint32_size() const;
  inline void clear_vector_uint32();
  static const int kVectorUint32FieldNumber = 205;
  inline ::google::protobuf::uint32 vector_uint32(int index) const;
  inline void set_vector_uint32(int index, ::google::protobuf::uint32 value);
  inline void add_vector_uint32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vector_uint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vector_uint32();

  // repeated uint64 vector_uint64 = 206;
  inline int vector_uint64_size() const;
  inline void clear_vector_uint64();
  static const int kVectorUint64FieldNumber = 206;
  inline ::google::protobuf::uint64 vector_uint64(int index) const;
  inline void set_vector_uint64(int index, ::google::protobuf::uint64 value);
  inline void add_vector_uint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      vector_uint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_vector_uint64();

  // repeated sint32 vector_sint32 = 207;
  inline int vector_sint32_size() const;
  inline void clear_vector_sint32();
  static const int kVectorSint32FieldNumber = 207;
  inline ::google::protobuf::int32 vector_sint32(int index) const;
  inline void set_vector_sint32(int index, ::google::protobuf::int32 value);
  inline void add_vector_sint32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vector_sint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vector_sint32();

  // repeated sint64 vector_sint64 = 208;
  inline int vector_sint64_size() const;
  inline void clear_vector_sint64();
  static const int kVectorSint64FieldNumber = 208;
  inline ::google::protobuf::int64 vector_sint64(int index) const;
  inline void set_vector_sint64(int index, ::google::protobuf::int64 value);
  inline void add_vector_sint64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      vector_sint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_vector_sint64();

  // repeated fixed32 vector_fixed32 = 209;
  inline int vector_fixed32_size() const;
  inline void clear_vector_fixed32();
  static const int kVectorFixed32FieldNumber = 209;
  inline ::google::protobuf::uint32 vector_fixed32(int index) const;
  inline void set_vector_fixed32(int index, ::google::protobuf::uint32 value);
  inline void add_vector_fixed32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vector_fixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vector_fixed32();

  // repeated fixed64 vector_fixed64 = 210;
  inline int vector_fixed64_size() const;
  inline void clear_vector_fixed64();
  static const int kVectorFixed64FieldNumber = 210;
  inline ::google::protobuf::uint64 vector_fixed64(int index) const;
  inline void set_vector_fixed64(int index, ::google::protobuf::uint64 value);
  inline void add_vector_fixed64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      vector_fixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_vector_fixed64();

  // repeated sfixed32 vector_sfixed32 = 211;
  inline int vector_sfixed32_size() const;
  inline void clear_vector_sfixed32();
  static const int kVectorSfixed32FieldNumber = 211;
  inline ::google::protobuf::int32 vector_sfixed32(int index) const;
  inline void set_vector_sfixed32(int index, ::google::protobuf::int32 value);
  inline void add_vector_sfixed32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vector_sfixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vector_sfixed32();

  // repeated sfixed64 vector_sfixed64 = 212;
  inline int vector_sfixed64_size() const;
  inline void clear_vector_sfixed64();
  static const int kVectorSfixed64FieldNumber = 212;
  inline ::google::protobuf::int64 vector_sfixed64(int index) const;
  inline void set_vector_sfixed64(int index, ::google::protobuf::int64 value);
  inline void add_vector_sfixed64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      vector_sfixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_vector_sfixed64();

  // repeated bool vector_bool = 213;
  inline int vector_bool_size() const;
  inline void clear_vector_bool();
  static const int kVectorBoolFieldNumber = 213;
  inline bool vector_bool(int index) const;
  inline void set_vector_bool(int index, bool value);
  inline void add_vector_bool(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      vector_bool() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_vector_bool();

  // repeated string vector_string = 214;
  inline int vector_string_size() const;
  inline void clear_vector_string();
  static const int kVectorStringFieldNumber = 214;
  inline const ::std::string& vector_string(int index) const;
  inline ::std::string* mutable_vector_string(int index);
  inline void set_vector_string(int index, const ::std::string& value);
  inline void set_vector_string(int index, const char* value);
  inline void set_vector_string(int index, const char* value, size_t size);
  inline ::std::string* add_vector_string();
  inline void add_vector_string(const ::std::string& value);
  inline void add_vector_string(const char* value);
  inline void add_vector_string(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& vector_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vector_string();

  // repeated bytes vector_bytes = 215;
  inline int vector_bytes_size() const;
  inline void clear_vector_bytes();
  static const int kVectorBytesFieldNumber = 215;
  inline const ::std::string& vector_bytes(int index) const;
  inline ::std::string* mutable_vector_bytes(int index);
  inline void set_vector_bytes(int index, const ::std::string& value);
  inline void set_vector_bytes(int index, const char* value);
  inline void set_vector_bytes(int index, const void* value, size_t size);
  inline ::std::string* add_vector_bytes();
  inline void add_vector_bytes(const ::std::string& value);
  inline void add_vector_bytes(const char* value);
  inline void add_vector_bytes(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& vector_bytes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vector_bytes();

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
  inline int vector_bigcurrency_size() const;
  inline void clear_vector_bigcurrency();
  static const int kVectorBigCurrencyFieldNumber = 216;
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency vector_bigcurrency(int index) const;
  inline void set_vector_bigcurrency(int index, ::MLB::ProtoBuf::FieldTypeTest_BigCurrency value);
  inline void add_vector_bigcurrency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value);
  inline const ::google::protobuf::RepeatedField<int>& vector_bigcurrency() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_vector_bigcurrency();

  // repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
  inline int vector_bigcurrencyposition_size() const;
  inline void clear_vector_bigcurrencyposition();
  static const int kVectorBigCurrencyPositionFieldNumber = 217;
  inline const ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition& vector_bigcurrencyposition(int index) const;
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* mutable_vector_bigcurrencyposition(int index);
  inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* add_vector_bigcurrencyposition();
  inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition >&
      vector_bigcurrencyposition() const;
  inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition >*
      mutable_vector_bigcurrencyposition();

  // optional .MLB.ProtoBuf.Array1Double array1_double = 301;
  inline bool has_array1_double() const;
  inline void clear_array1_double();
  static const int kArray1DoubleFieldNumber = 301;
  inline const ::MLB::ProtoBuf::Array1Double& array1_double() const;
  inline ::MLB::ProtoBuf::Array1Double* mutable_array1_double();
  inline ::MLB::ProtoBuf::Array1Double* release_array1_double();
  inline void set_allocated_array1_double(::MLB::ProtoBuf::Array1Double* array1_double);

  // optional .MLB.ProtoBuf.Array1Float array1_float = 302;
  inline bool has_array1_float() const;
  inline void clear_array1_float();
  static const int kArray1FloatFieldNumber = 302;
  inline const ::MLB::ProtoBuf::Array1Float& array1_float() const;
  inline ::MLB::ProtoBuf::Array1Float* mutable_array1_float();
  inline ::MLB::ProtoBuf::Array1Float* release_array1_float();
  inline void set_allocated_array1_float(::MLB::ProtoBuf::Array1Float* array1_float);

  // optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
  inline bool has_array1_int32() const;
  inline void clear_array1_int32();
  static const int kArray1Int32FieldNumber = 303;
  inline const ::MLB::ProtoBuf::Array1Int32& array1_int32() const;
  inline ::MLB::ProtoBuf::Array1Int32* mutable_array1_int32();
  inline ::MLB::ProtoBuf::Array1Int32* release_array1_int32();
  inline void set_allocated_array1_int32(::MLB::ProtoBuf::Array1Int32* array1_int32);

  // optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
  inline bool has_array1_int64() const;
  inline void clear_array1_int64();
  static const int kArray1Int64FieldNumber = 304;
  inline const ::MLB::ProtoBuf::Array1Int64& array1_int64() const;
  inline ::MLB::ProtoBuf::Array1Int64* mutable_array1_int64();
  inline ::MLB::ProtoBuf::Array1Int64* release_array1_int64();
  inline void set_allocated_array1_int64(::MLB::ProtoBuf::Array1Int64* array1_int64);

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
  inline bool has_array1_uint32() const;
  inline void clear_array1_uint32();
  static const int kArray1Uint32FieldNumber = 305;
  inline const ::MLB::ProtoBuf::Array1UInt32& array1_uint32() const;
  inline ::MLB::ProtoBuf::Array1UInt32* mutable_array1_uint32();
  inline ::MLB::ProtoBuf::Array1UInt32* release_array1_uint32();
  inline void set_allocated_array1_uint32(::MLB::ProtoBuf::Array1UInt32* array1_uint32);

  // optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
  inline bool has_array1_uint64() const;
  inline void clear_array1_uint64();
  static const int kArray1Uint64FieldNumber = 306;
  inline const ::MLB::ProtoBuf::Array1UInt32& array1_uint64() const;
  inline ::MLB::ProtoBuf::Array1UInt32* mutable_array1_uint64();
  inline ::MLB::ProtoBuf::Array1UInt32* release_array1_uint64();
  inline void set_allocated_array1_uint64(::MLB::ProtoBuf::Array1UInt32* array1_uint64);

  // optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
  inline bool has_array1_bool() const;
  inline void clear_array1_bool();
  static const int kArray1BoolFieldNumber = 313;
  inline const ::MLB::ProtoBuf::Array1Bool& array1_bool() const;
  inline ::MLB::ProtoBuf::Array1Bool* mutable_array1_bool();
  inline ::MLB::ProtoBuf::Array1Bool* release_array1_bool();
  inline void set_allocated_array1_bool(::MLB::ProtoBuf::Array1Bool* array1_bool);

  // optional .MLB.ProtoBuf.Array1String array1_string = 314;
  inline bool has_array1_string() const;
  inline void clear_array1_string();
  static const int kArray1StringFieldNumber = 314;
  inline const ::MLB::ProtoBuf::Array1String& array1_string() const;
  inline ::MLB::ProtoBuf::Array1String* mutable_array1_string();
  inline ::MLB::ProtoBuf::Array1String* release_array1_string();
  inline void set_allocated_array1_string(::MLB::ProtoBuf::Array1String* array1_string);

  // optional .MLB.ProtoBuf.Array2Double array2_double = 401;
  inline bool has_array2_double() const;
  inline void clear_array2_double();
  static const int kArray2DoubleFieldNumber = 401;
  inline const ::MLB::ProtoBuf::Array2Double& array2_double() const;
  inline ::MLB::ProtoBuf::Array2Double* mutable_array2_double();
  inline ::MLB::ProtoBuf::Array2Double* release_array2_double();
  inline void set_allocated_array2_double(::MLB::ProtoBuf::Array2Double* array2_double);

  // optional .MLB.ProtoBuf.Array2Float array2_float = 402;
  inline bool has_array2_float() const;
  inline void clear_array2_float();
  static const int kArray2FloatFieldNumber = 402;
  inline const ::MLB::ProtoBuf::Array2Float& array2_float() const;
  inline ::MLB::ProtoBuf::Array2Float* mutable_array2_float();
  inline ::MLB::ProtoBuf::Array2Float* release_array2_float();
  inline void set_allocated_array2_float(::MLB::ProtoBuf::Array2Float* array2_float);

  // optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
  inline bool has_array2_int32() const;
  inline void clear_array2_int32();
  static const int kArray2Int32FieldNumber = 403;
  inline const ::MLB::ProtoBuf::Array2Int32& array2_int32() const;
  inline ::MLB::ProtoBuf::Array2Int32* mutable_array2_int32();
  inline ::MLB::ProtoBuf::Array2Int32* release_array2_int32();
  inline void set_allocated_array2_int32(::MLB::ProtoBuf::Array2Int32* array2_int32);

  // optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
  inline bool has_array2_int64() const;
  inline void clear_array2_int64();
  static const int kArray2Int64FieldNumber = 404;
  inline const ::MLB::ProtoBuf::Array2Int64& array2_int64() const;
  inline ::MLB::ProtoBuf::Array2Int64* mutable_array2_int64();
  inline ::MLB::ProtoBuf::Array2Int64* release_array2_int64();
  inline void set_allocated_array2_int64(::MLB::ProtoBuf::Array2Int64* array2_int64);

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
  inline bool has_array2_uint32() const;
  inline void clear_array2_uint32();
  static const int kArray2Uint32FieldNumber = 405;
  inline const ::MLB::ProtoBuf::Array2UInt32& array2_uint32() const;
  inline ::MLB::ProtoBuf::Array2UInt32* mutable_array2_uint32();
  inline ::MLB::ProtoBuf::Array2UInt32* release_array2_uint32();
  inline void set_allocated_array2_uint32(::MLB::ProtoBuf::Array2UInt32* array2_uint32);

  // optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
  inline bool has_array2_uint64() const;
  inline void clear_array2_uint64();
  static const int kArray2Uint64FieldNumber = 406;
  inline const ::MLB::ProtoBuf::Array2UInt32& array2_uint64() const;
  inline ::MLB::ProtoBuf::Array2UInt32* mutable_array2_uint64();
  inline ::MLB::ProtoBuf::Array2UInt32* release_array2_uint64();
  inline void set_allocated_array2_uint64(::MLB::ProtoBuf::Array2UInt32* array2_uint64);

  // optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
  inline bool has_array2_bool() const;
  inline void clear_array2_bool();
  static const int kArray2BoolFieldNumber = 413;
  inline const ::MLB::ProtoBuf::Array2Bool& array2_bool() const;
  inline ::MLB::ProtoBuf::Array2Bool* mutable_array2_bool();
  inline ::MLB::ProtoBuf::Array2Bool* release_array2_bool();
  inline void set_allocated_array2_bool(::MLB::ProtoBuf::Array2Bool* array2_bool);

  // optional .MLB.ProtoBuf.Array2String array2_string = 414;
  inline bool has_array2_string() const;
  inline void clear_array2_string();
  static const int kArray2StringFieldNumber = 414;
  inline const ::MLB::ProtoBuf::Array2String& array2_string() const;
  inline ::MLB::ProtoBuf::Array2String* mutable_array2_string();
  inline ::MLB::ProtoBuf::Array2String* release_array2_string();
  inline void set_allocated_array2_string(::MLB::ProtoBuf::Array2String* array2_string);

  // @@protoc_insertion_point(class_scope:MLB.ProtoBuf.FieldTypeTest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scalar_double();
  inline void clear_has_scalar_double();
  inline void set_has_scalar_float();
  inline void clear_has_scalar_float();
  inline void set_has_scalar_int32();
  inline void clear_has_scalar_int32();
  inline void set_has_scalar_int64();
  inline void clear_has_scalar_int64();
  inline void set_has_scalar_uint32();
  inline void clear_has_scalar_uint32();
  inline void set_has_scalar_uint64();
  inline void clear_has_scalar_uint64();
  inline void set_has_scalar_sint32();
  inline void clear_has_scalar_sint32();
  inline void set_has_scalar_sint64();
  inline void clear_has_scalar_sint64();
  inline void set_has_scalar_fixed32();
  inline void clear_has_scalar_fixed32();
  inline void set_has_scalar_fixed64();
  inline void clear_has_scalar_fixed64();
  inline void set_has_scalar_sfixed32();
  inline void clear_has_scalar_sfixed32();
  inline void set_has_scalar_sfixed64();
  inline void clear_has_scalar_sfixed64();
  inline void set_has_scalar_bool();
  inline void clear_has_scalar_bool();
  inline void set_has_scalar_string();
  inline void clear_has_scalar_string();
  inline void set_has_scalar_bytes();
  inline void clear_has_scalar_bytes();
  inline void set_has_scalar_bigcurrency();
  inline void clear_has_scalar_bigcurrency();
  inline void set_has_scalar_bigcurrencyposition();
  inline void clear_has_scalar_bigcurrencyposition();
  inline void set_has_array1_double();
  inline void clear_has_array1_double();
  inline void set_has_array1_float();
  inline void clear_has_array1_float();
  inline void set_has_array1_int32();
  inline void clear_has_array1_int32();
  inline void set_has_array1_int64();
  inline void clear_has_array1_int64();
  inline void set_has_array1_uint32();
  inline void clear_has_array1_uint32();
  inline void set_has_array1_uint64();
  inline void clear_has_array1_uint64();
  inline void set_has_array1_bool();
  inline void clear_has_array1_bool();
  inline void set_has_array1_string();
  inline void clear_has_array1_string();
  inline void set_has_array2_double();
  inline void clear_has_array2_double();
  inline void set_has_array2_float();
  inline void clear_has_array2_float();
  inline void set_has_array2_int32();
  inline void clear_has_array2_int32();
  inline void set_has_array2_int64();
  inline void clear_has_array2_int64();
  inline void set_has_array2_uint32();
  inline void clear_has_array2_uint32();
  inline void set_has_array2_uint64();
  inline void clear_has_array2_uint64();
  inline void set_has_array2_bool();
  inline void clear_has_array2_bool();
  inline void set_has_array2_string();
  inline void clear_has_array2_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 id_;
  double scalar_double_;
  float scalar_float_;
  ::google::protobuf::int32 scalar_int32_;
  ::google::protobuf::int64 scalar_int64_;
  ::google::protobuf::uint64 scalar_uint64_;
  ::google::protobuf::uint32 scalar_uint32_;
  ::google::protobuf::int32 scalar_sint32_;
  ::google::protobuf::int64 scalar_sint64_;
  ::google::protobuf::uint64 scalar_fixed64_;
  ::google::protobuf::uint32 scalar_fixed32_;
  ::google::protobuf::int32 scalar_sfixed32_;
  ::google::protobuf::int64 scalar_sfixed64_;
  ::std::string* scalar_string_;
  bool scalar_bool_;
  int scalar_bigcurrency_;
  ::std::string* scalar_bytes_;
  ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* scalar_bigcurrencyposition_;
  ::google::protobuf::RepeatedField< double > vector_double_;
  ::google::protobuf::RepeatedField< float > vector_float_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vector_int32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > vector_int64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vector_uint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > vector_uint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vector_sint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > vector_sint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vector_fixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > vector_fixed64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vector_sfixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > vector_sfixed64_;
  ::google::protobuf::RepeatedField< bool > vector_bool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vector_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vector_bytes_;
  ::google::protobuf::RepeatedField<int> vector_bigcurrency_;
  ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition > vector_bigcurrencyposition_;
  ::MLB::ProtoBuf::Array1Double* array1_double_;
  ::MLB::ProtoBuf::Array1Float* array1_float_;
  ::MLB::ProtoBuf::Array1Int32* array1_int32_;
  ::MLB::ProtoBuf::Array1Int64* array1_int64_;
  ::MLB::ProtoBuf::Array1UInt32* array1_uint32_;
  ::MLB::ProtoBuf::Array1UInt32* array1_uint64_;
  ::MLB::ProtoBuf::Array1Bool* array1_bool_;
  ::MLB::ProtoBuf::Array1String* array1_string_;
  ::MLB::ProtoBuf::Array2Double* array2_double_;
  ::MLB::ProtoBuf::Array2Float* array2_float_;
  ::MLB::ProtoBuf::Array2Int32* array2_int32_;
  ::MLB::ProtoBuf::Array2Int64* array2_int64_;
  ::MLB::ProtoBuf::Array2UInt32* array2_uint32_;
  ::MLB::ProtoBuf::Array2UInt32* array2_uint64_;
  ::MLB::ProtoBuf::Array2Bool* array2_bool_;
  ::MLB::ProtoBuf::Array2String* array2_string_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_FieldTypeTest_2eproto();
  friend void protobuf_AssignDesc_FieldTypeTest_2eproto();
  friend void protobuf_ShutdownFile_FieldTypeTest_2eproto();

  void InitAsDefaultInstance();
  static FieldTypeTest* default_instance_;
};
// ===================================================================


// ===================================================================

// PhoneNumber

// required string number = 1;
inline bool PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PhoneNumber.number)
  return *number_;
}
inline void PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.PhoneNumber.number)
}
inline ::std::string* PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PhoneNumber.number)
  return number_;
}
inline ::std::string* PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.PhoneNumber.number)
}

// optional .MLB.ProtoBuf.PhoneType type = 2 [default = HOME];
inline bool PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MLB::ProtoBuf::PhoneType PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PhoneNumber.type)
  return static_cast< ::MLB::ProtoBuf::PhoneType >(type_);
}
inline void PhoneNumber::set_type(::MLB::ProtoBuf::PhoneType value) {
  assert(::MLB::ProtoBuf::PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PhoneNumber.type)
}

// -------------------------------------------------------------------

// PersonOne

// required string name = 1;
inline bool PersonOne::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonOne::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonOne::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonOne::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PersonOne::name() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.name)
  return *name_;
}
inline void PersonOne::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonOne.name)
}
inline void PersonOne::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.PersonOne.name)
}
inline void PersonOne::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.PersonOne.name)
}
inline ::std::string* PersonOne::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonOne.name)
  return name_;
}
inline ::std::string* PersonOne::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonOne::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.PersonOne.name)
}

// required int32 id = 2;
inline bool PersonOne::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonOne::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonOne::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonOne::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PersonOne::id() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.id)
  return id_;
}
inline void PersonOne::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonOne.id)
}

// optional string email = 3;
inline bool PersonOne::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonOne::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonOne::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonOne::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PersonOne::email() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.email)
  return *email_;
}
inline void PersonOne::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonOne.email)
}
inline void PersonOne::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.PersonOne.email)
}
inline void PersonOne::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.PersonOne.email)
}
inline ::std::string* PersonOne::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonOne.email)
  return email_;
}
inline ::std::string* PersonOne::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonOne::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.PersonOne.email)
}

// repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
inline int PersonOne::phone_size() const {
  return phone_.size();
}
inline void PersonOne::clear_phone() {
  phone_.Clear();
}
inline const ::MLB::ProtoBuf::PhoneNumber& PersonOne::phone(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.phone)
  return phone_.Get(index);
}
inline ::MLB::ProtoBuf::PhoneNumber* PersonOne::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonOne.phone)
  return phone_.Mutable(index);
}
inline ::MLB::ProtoBuf::PhoneNumber* PersonOne::add_phone() {
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.PersonOne.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >&
PersonOne::phone() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.PersonOne.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >*
PersonOne::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.PersonOne.phone)
  return &phone_;
}

// optional int32 different_datum = 5;
inline bool PersonOne::has_different_datum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersonOne::set_has_different_datum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersonOne::clear_has_different_datum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersonOne::clear_different_datum() {
  different_datum_ = 0;
  clear_has_different_datum();
}
inline ::google::protobuf::int32 PersonOne::different_datum() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.different_datum)
  return different_datum_;
}
inline void PersonOne::set_different_datum(::google::protobuf::int32 value) {
  set_has_different_datum();
  different_datum_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonOne.different_datum)
}

// optional int32 name_different_1 = 6;
inline bool PersonOne::has_name_different_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersonOne::set_has_name_different_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersonOne::clear_has_name_different_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersonOne::clear_name_different_1() {
  name_different_1_ = 0;
  clear_has_name_different_1();
}
inline ::google::protobuf::int32 PersonOne::name_different_1() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonOne.name_different_1)
  return name_different_1_;
}
inline void PersonOne::set_name_different_1(::google::protobuf::int32 value) {
  set_has_name_different_1();
  name_different_1_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonOne.name_different_1)
}

// -------------------------------------------------------------------

// AddressBookOne

// repeated .MLB.ProtoBuf.PersonOne person = 1;
inline int AddressBookOne::person_size() const {
  return person_.size();
}
inline void AddressBookOne::clear_person() {
  person_.Clear();
}
inline const ::MLB::ProtoBuf::PersonOne& AddressBookOne::person(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.AddressBookOne.person)
  return person_.Get(index);
}
inline ::MLB::ProtoBuf::PersonOne* AddressBookOne::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.AddressBookOne.person)
  return person_.Mutable(index);
}
inline ::MLB::ProtoBuf::PersonOne* AddressBookOne::add_person() {
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.AddressBookOne.person)
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonOne >&
AddressBookOne::person() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.AddressBookOne.person)
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonOne >*
AddressBookOne::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.AddressBookOne.person)
  return &person_;
}

// -------------------------------------------------------------------

// PersonTwo

// required string name = 1;
inline bool PersonTwo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonTwo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonTwo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonTwo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PersonTwo::name() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.name)
  return *name_;
}
inline void PersonTwo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonTwo.name)
}
inline void PersonTwo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.PersonTwo.name)
}
inline void PersonTwo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.PersonTwo.name)
}
inline ::std::string* PersonTwo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonTwo.name)
  return name_;
}
inline ::std::string* PersonTwo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonTwo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.PersonTwo.name)
}

// required int32 id = 2;
inline bool PersonTwo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonTwo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonTwo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonTwo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PersonTwo::id() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.id)
  return id_;
}
inline void PersonTwo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonTwo.id)
}

// optional string email = 3;
inline bool PersonTwo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonTwo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonTwo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonTwo::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PersonTwo::email() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.email)
  return *email_;
}
inline void PersonTwo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonTwo.email)
}
inline void PersonTwo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.PersonTwo.email)
}
inline void PersonTwo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.PersonTwo.email)
}
inline ::std::string* PersonTwo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonTwo.email)
  return email_;
}
inline ::std::string* PersonTwo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonTwo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.PersonTwo.email)
}

// repeated .MLB.ProtoBuf.PhoneNumber phone = 4;
inline int PersonTwo::phone_size() const {
  return phone_.size();
}
inline void PersonTwo::clear_phone() {
  phone_.Clear();
}
inline const ::MLB::ProtoBuf::PhoneNumber& PersonTwo::phone(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.phone)
  return phone_.Get(index);
}
inline ::MLB::ProtoBuf::PhoneNumber* PersonTwo::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.PersonTwo.phone)
  return phone_.Mutable(index);
}
inline ::MLB::ProtoBuf::PhoneNumber* PersonTwo::add_phone() {
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.PersonTwo.phone)
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >&
PersonTwo::phone() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.PersonTwo.phone)
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PhoneNumber >*
PersonTwo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.PersonTwo.phone)
  return &phone_;
}

// optional uint32 different_datum = 5;
inline bool PersonTwo::has_different_datum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersonTwo::set_has_different_datum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersonTwo::clear_has_different_datum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersonTwo::clear_different_datum() {
  different_datum_ = 0u;
  clear_has_different_datum();
}
inline ::google::protobuf::uint32 PersonTwo::different_datum() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.different_datum)
  return different_datum_;
}
inline void PersonTwo::set_different_datum(::google::protobuf::uint32 value) {
  set_has_different_datum();
  different_datum_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonTwo.different_datum)
}

// optional int32 name_different_2 = 6;
inline bool PersonTwo::has_name_different_2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersonTwo::set_has_name_different_2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersonTwo::clear_has_name_different_2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersonTwo::clear_name_different_2() {
  name_different_2_ = 0;
  clear_has_name_different_2();
}
inline ::google::protobuf::int32 PersonTwo::name_different_2() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.PersonTwo.name_different_2)
  return name_different_2_;
}
inline void PersonTwo::set_name_different_2(::google::protobuf::int32 value) {
  set_has_name_different_2();
  name_different_2_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.PersonTwo.name_different_2)
}

// -------------------------------------------------------------------

// AddressBookTwo

// repeated .MLB.ProtoBuf.PersonTwo person = 1;
inline int AddressBookTwo::person_size() const {
  return person_.size();
}
inline void AddressBookTwo::clear_person() {
  person_.Clear();
}
inline const ::MLB::ProtoBuf::PersonTwo& AddressBookTwo::person(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.AddressBookTwo.person)
  return person_.Get(index);
}
inline ::MLB::ProtoBuf::PersonTwo* AddressBookTwo::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.AddressBookTwo.person)
  return person_.Mutable(index);
}
inline ::MLB::ProtoBuf::PersonTwo* AddressBookTwo::add_person() {
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.AddressBookTwo.person)
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonTwo >&
AddressBookTwo::person() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.AddressBookTwo.person)
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::PersonTwo >*
AddressBookTwo::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.AddressBookTwo.person)
  return &person_;
}

// -------------------------------------------------------------------

// FieldTypeTest_BigCurrencyPosition

// required .MLB.ProtoBuf.FieldTypeTest.BigCurrency currency = 1;
inline bool FieldTypeTest_BigCurrencyPosition::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldTypeTest_BigCurrencyPosition::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldTypeTest_BigCurrencyPosition::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldTypeTest_BigCurrencyPosition::clear_currency() {
  currency_ = 1;
  clear_has_currency();
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency FieldTypeTest_BigCurrencyPosition::currency() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition.currency)
  return static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(currency_);
}
inline void FieldTypeTest_BigCurrencyPosition::set_currency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value) {
  assert(::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value));
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition.currency)
}

// optional double position = 2 [default = 0];
inline bool FieldTypeTest_BigCurrencyPosition::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldTypeTest_BigCurrencyPosition::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldTypeTest_BigCurrencyPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldTypeTest_BigCurrencyPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline double FieldTypeTest_BigCurrencyPosition::position() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition.position)
  return position_;
}
inline void FieldTypeTest_BigCurrencyPosition::set_position(double value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition.position)
}

// -------------------------------------------------------------------

// FieldTypeTest

// required uint64 id = 1;
inline bool FieldTypeTest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldTypeTest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldTypeTest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldTypeTest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 FieldTypeTest::id() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.id)
  return id_;
}
inline void FieldTypeTest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.id)
}

// optional double scalar_double = 101;
inline bool FieldTypeTest::has_scalar_double() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldTypeTest::set_has_scalar_double() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldTypeTest::clear_has_scalar_double() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldTypeTest::clear_scalar_double() {
  scalar_double_ = 0;
  clear_has_scalar_double();
}
inline double FieldTypeTest::scalar_double() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_double)
  return scalar_double_;
}
inline void FieldTypeTest::set_scalar_double(double value) {
  set_has_scalar_double();
  scalar_double_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_double)
}

// optional float scalar_float = 102;
inline bool FieldTypeTest::has_scalar_float() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldTypeTest::set_has_scalar_float() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldTypeTest::clear_has_scalar_float() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldTypeTest::clear_scalar_float() {
  scalar_float_ = 0;
  clear_has_scalar_float();
}
inline float FieldTypeTest::scalar_float() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_float)
  return scalar_float_;
}
inline void FieldTypeTest::set_scalar_float(float value) {
  set_has_scalar_float();
  scalar_float_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_float)
}

// optional int32 scalar_int32 = 103;
inline bool FieldTypeTest::has_scalar_int32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldTypeTest::set_has_scalar_int32() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldTypeTest::clear_has_scalar_int32() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldTypeTest::clear_scalar_int32() {
  scalar_int32_ = 0;
  clear_has_scalar_int32();
}
inline ::google::protobuf::int32 FieldTypeTest::scalar_int32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_int32)
  return scalar_int32_;
}
inline void FieldTypeTest::set_scalar_int32(::google::protobuf::int32 value) {
  set_has_scalar_int32();
  scalar_int32_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_int32)
}

// optional int64 scalar_int64 = 104;
inline bool FieldTypeTest::has_scalar_int64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldTypeTest::set_has_scalar_int64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldTypeTest::clear_has_scalar_int64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldTypeTest::clear_scalar_int64() {
  scalar_int64_ = GOOGLE_LONGLONG(0);
  clear_has_scalar_int64();
}
inline ::google::protobuf::int64 FieldTypeTest::scalar_int64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_int64)
  return scalar_int64_;
}
inline void FieldTypeTest::set_scalar_int64(::google::protobuf::int64 value) {
  set_has_scalar_int64();
  scalar_int64_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_int64)
}

// optional uint32 scalar_uint32 = 105;
inline bool FieldTypeTest::has_scalar_uint32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FieldTypeTest::set_has_scalar_uint32() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FieldTypeTest::clear_has_scalar_uint32() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FieldTypeTest::clear_scalar_uint32() {
  scalar_uint32_ = 0u;
  clear_has_scalar_uint32();
}
inline ::google::protobuf::uint32 FieldTypeTest::scalar_uint32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_uint32)
  return scalar_uint32_;
}
inline void FieldTypeTest::set_scalar_uint32(::google::protobuf::uint32 value) {
  set_has_scalar_uint32();
  scalar_uint32_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_uint32)
}

// optional uint64 scalar_uint64 = 106;
inline bool FieldTypeTest::has_scalar_uint64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FieldTypeTest::set_has_scalar_uint64() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FieldTypeTest::clear_has_scalar_uint64() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FieldTypeTest::clear_scalar_uint64() {
  scalar_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_scalar_uint64();
}
inline ::google::protobuf::uint64 FieldTypeTest::scalar_uint64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_uint64)
  return scalar_uint64_;
}
inline void FieldTypeTest::set_scalar_uint64(::google::protobuf::uint64 value) {
  set_has_scalar_uint64();
  scalar_uint64_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_uint64)
}

// optional sint32 scalar_sint32 = 107;
inline bool FieldTypeTest::has_scalar_sint32() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FieldTypeTest::set_has_scalar_sint32() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FieldTypeTest::clear_has_scalar_sint32() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FieldTypeTest::clear_scalar_sint32() {
  scalar_sint32_ = 0;
  clear_has_scalar_sint32();
}
inline ::google::protobuf::int32 FieldTypeTest::scalar_sint32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_sint32)
  return scalar_sint32_;
}
inline void FieldTypeTest::set_scalar_sint32(::google::protobuf::int32 value) {
  set_has_scalar_sint32();
  scalar_sint32_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_sint32)
}

// optional sint64 scalar_sint64 = 108;
inline bool FieldTypeTest::has_scalar_sint64() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FieldTypeTest::set_has_scalar_sint64() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FieldTypeTest::clear_has_scalar_sint64() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FieldTypeTest::clear_scalar_sint64() {
  scalar_sint64_ = GOOGLE_LONGLONG(0);
  clear_has_scalar_sint64();
}
inline ::google::protobuf::int64 FieldTypeTest::scalar_sint64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_sint64)
  return scalar_sint64_;
}
inline void FieldTypeTest::set_scalar_sint64(::google::protobuf::int64 value) {
  set_has_scalar_sint64();
  scalar_sint64_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_sint64)
}

// optional fixed32 scalar_fixed32 = 109;
inline bool FieldTypeTest::has_scalar_fixed32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FieldTypeTest::set_has_scalar_fixed32() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FieldTypeTest::clear_has_scalar_fixed32() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FieldTypeTest::clear_scalar_fixed32() {
  scalar_fixed32_ = 0u;
  clear_has_scalar_fixed32();
}
inline ::google::protobuf::uint32 FieldTypeTest::scalar_fixed32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_fixed32)
  return scalar_fixed32_;
}
inline void FieldTypeTest::set_scalar_fixed32(::google::protobuf::uint32 value) {
  set_has_scalar_fixed32();
  scalar_fixed32_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_fixed32)
}

// optional fixed64 scalar_fixed64 = 110;
inline bool FieldTypeTest::has_scalar_fixed64() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FieldTypeTest::set_has_scalar_fixed64() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FieldTypeTest::clear_has_scalar_fixed64() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FieldTypeTest::clear_scalar_fixed64() {
  scalar_fixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_scalar_fixed64();
}
inline ::google::protobuf::uint64 FieldTypeTest::scalar_fixed64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_fixed64)
  return scalar_fixed64_;
}
inline void FieldTypeTest::set_scalar_fixed64(::google::protobuf::uint64 value) {
  set_has_scalar_fixed64();
  scalar_fixed64_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_fixed64)
}

// optional sfixed32 scalar_sfixed32 = 111;
inline bool FieldTypeTest::has_scalar_sfixed32() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FieldTypeTest::set_has_scalar_sfixed32() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FieldTypeTest::clear_has_scalar_sfixed32() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FieldTypeTest::clear_scalar_sfixed32() {
  scalar_sfixed32_ = 0;
  clear_has_scalar_sfixed32();
}
inline ::google::protobuf::int32 FieldTypeTest::scalar_sfixed32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_sfixed32)
  return scalar_sfixed32_;
}
inline void FieldTypeTest::set_scalar_sfixed32(::google::protobuf::int32 value) {
  set_has_scalar_sfixed32();
  scalar_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_sfixed32)
}

// optional sfixed64 scalar_sfixed64 = 112;
inline bool FieldTypeTest::has_scalar_sfixed64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_sfixed64() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FieldTypeTest::clear_has_scalar_sfixed64() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FieldTypeTest::clear_scalar_sfixed64() {
  scalar_sfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_scalar_sfixed64();
}
inline ::google::protobuf::int64 FieldTypeTest::scalar_sfixed64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_sfixed64)
  return scalar_sfixed64_;
}
inline void FieldTypeTest::set_scalar_sfixed64(::google::protobuf::int64 value) {
  set_has_scalar_sfixed64();
  scalar_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_sfixed64)
}

// optional bool scalar_bool = 113;
inline bool FieldTypeTest::has_scalar_bool() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_bool() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FieldTypeTest::clear_has_scalar_bool() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FieldTypeTest::clear_scalar_bool() {
  scalar_bool_ = false;
  clear_has_scalar_bool();
}
inline bool FieldTypeTest::scalar_bool() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_bool)
  return scalar_bool_;
}
inline void FieldTypeTest::set_scalar_bool(bool value) {
  set_has_scalar_bool();
  scalar_bool_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_bool)
}

// optional string scalar_string = 114;
inline bool FieldTypeTest::has_scalar_string() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_string() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FieldTypeTest::clear_has_scalar_string() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FieldTypeTest::clear_scalar_string() {
  if (scalar_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_string_->clear();
  }
  clear_has_scalar_string();
}
inline const ::std::string& FieldTypeTest::scalar_string() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_string)
  return *scalar_string_;
}
inline void FieldTypeTest::set_scalar_string(const ::std::string& value) {
  set_has_scalar_string();
  if (scalar_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_string_ = new ::std::string;
  }
  scalar_string_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_string)
}
inline void FieldTypeTest::set_scalar_string(const char* value) {
  set_has_scalar_string();
  if (scalar_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_string_ = new ::std::string;
  }
  scalar_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.FieldTypeTest.scalar_string)
}
inline void FieldTypeTest::set_scalar_string(const char* value, size_t size) {
  set_has_scalar_string();
  if (scalar_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_string_ = new ::std::string;
  }
  scalar_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.FieldTypeTest.scalar_string)
}
inline ::std::string* FieldTypeTest::mutable_scalar_string() {
  set_has_scalar_string();
  if (scalar_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.scalar_string)
  return scalar_string_;
}
inline ::std::string* FieldTypeTest::release_scalar_string() {
  clear_has_scalar_string();
  if (scalar_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scalar_string_;
    scalar_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FieldTypeTest::set_allocated_scalar_string(::std::string* scalar_string) {
  if (scalar_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scalar_string_;
  }
  if (scalar_string) {
    set_has_scalar_string();
    scalar_string_ = scalar_string;
  } else {
    clear_has_scalar_string();
    scalar_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.scalar_string)
}

// optional bytes scalar_bytes = 115;
inline bool FieldTypeTest::has_scalar_bytes() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_bytes() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FieldTypeTest::clear_has_scalar_bytes() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FieldTypeTest::clear_scalar_bytes() {
  if (scalar_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_bytes_->clear();
  }
  clear_has_scalar_bytes();
}
inline const ::std::string& FieldTypeTest::scalar_bytes() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
  return *scalar_bytes_;
}
inline void FieldTypeTest::set_scalar_bytes(const ::std::string& value) {
  set_has_scalar_bytes();
  if (scalar_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_bytes_ = new ::std::string;
  }
  scalar_bytes_->assign(value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
}
inline void FieldTypeTest::set_scalar_bytes(const char* value) {
  set_has_scalar_bytes();
  if (scalar_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_bytes_ = new ::std::string;
  }
  scalar_bytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
}
inline void FieldTypeTest::set_scalar_bytes(const void* value, size_t size) {
  set_has_scalar_bytes();
  if (scalar_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_bytes_ = new ::std::string;
  }
  scalar_bytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
}
inline ::std::string* FieldTypeTest::mutable_scalar_bytes() {
  set_has_scalar_bytes();
  if (scalar_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scalar_bytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
  return scalar_bytes_;
}
inline ::std::string* FieldTypeTest::release_scalar_bytes() {
  clear_has_scalar_bytes();
  if (scalar_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scalar_bytes_;
    scalar_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FieldTypeTest::set_allocated_scalar_bytes(::std::string* scalar_bytes) {
  if (scalar_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scalar_bytes_;
  }
  if (scalar_bytes) {
    set_has_scalar_bytes();
    scalar_bytes_ = scalar_bytes;
  } else {
    clear_has_scalar_bytes();
    scalar_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.scalar_bytes)
}

// optional .MLB.ProtoBuf.FieldTypeTest.BigCurrency scalar_BigCurrency = 116;
inline bool FieldTypeTest::has_scalar_bigcurrency() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_bigcurrency() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FieldTypeTest::clear_has_scalar_bigcurrency() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FieldTypeTest::clear_scalar_bigcurrency() {
  scalar_bigcurrency_ = 1;
  clear_has_scalar_bigcurrency();
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency FieldTypeTest::scalar_bigcurrency() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_BigCurrency)
  return static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(scalar_bigcurrency_);
}
inline void FieldTypeTest::set_scalar_bigcurrency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value) {
  assert(::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value));
  set_has_scalar_bigcurrency();
  scalar_bigcurrency_ = value;
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.scalar_BigCurrency)
}

// optional .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition scalar_BigCurrencyPosition = 117;
inline bool FieldTypeTest::has_scalar_bigcurrencyposition() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FieldTypeTest::set_has_scalar_bigcurrencyposition() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FieldTypeTest::clear_has_scalar_bigcurrencyposition() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FieldTypeTest::clear_scalar_bigcurrencyposition() {
  if (scalar_bigcurrencyposition_ != NULL) scalar_bigcurrencyposition_->::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition::Clear();
  clear_has_scalar_bigcurrencyposition();
}
inline const ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition& FieldTypeTest::scalar_bigcurrencyposition() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.scalar_BigCurrencyPosition)
  return scalar_bigcurrencyposition_ != NULL ? *scalar_bigcurrencyposition_ : *default_instance_->scalar_bigcurrencyposition_;
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* FieldTypeTest::mutable_scalar_bigcurrencyposition() {
  set_has_scalar_bigcurrencyposition();
  if (scalar_bigcurrencyposition_ == NULL) scalar_bigcurrencyposition_ = new ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.scalar_BigCurrencyPosition)
  return scalar_bigcurrencyposition_;
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* FieldTypeTest::release_scalar_bigcurrencyposition() {
  clear_has_scalar_bigcurrencyposition();
  ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* temp = scalar_bigcurrencyposition_;
  scalar_bigcurrencyposition_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_scalar_bigcurrencyposition(::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* scalar_bigcurrencyposition) {
  delete scalar_bigcurrencyposition_;
  scalar_bigcurrencyposition_ = scalar_bigcurrencyposition;
  if (scalar_bigcurrencyposition) {
    set_has_scalar_bigcurrencyposition();
  } else {
    clear_has_scalar_bigcurrencyposition();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.scalar_BigCurrencyPosition)
}

// repeated double vector_double = 201;
inline int FieldTypeTest::vector_double_size() const {
  return vector_double_.size();
}
inline void FieldTypeTest::clear_vector_double() {
  vector_double_.Clear();
}
inline double FieldTypeTest::vector_double(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_double)
  return vector_double_.Get(index);
}
inline void FieldTypeTest::set_vector_double(int index, double value) {
  vector_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_double)
}
inline void FieldTypeTest::add_vector_double(double value) {
  vector_double_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_double)
}
inline const ::google::protobuf::RepeatedField< double >&
FieldTypeTest::vector_double() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_double)
  return vector_double_;
}
inline ::google::protobuf::RepeatedField< double >*
FieldTypeTest::mutable_vector_double() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_double)
  return &vector_double_;
}

// repeated float vector_float = 202;
inline int FieldTypeTest::vector_float_size() const {
  return vector_float_.size();
}
inline void FieldTypeTest::clear_vector_float() {
  vector_float_.Clear();
}
inline float FieldTypeTest::vector_float(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_float)
  return vector_float_.Get(index);
}
inline void FieldTypeTest::set_vector_float(int index, float value) {
  vector_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_float)
}
inline void FieldTypeTest::add_vector_float(float value) {
  vector_float_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_float)
}
inline const ::google::protobuf::RepeatedField< float >&
FieldTypeTest::vector_float() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_float)
  return vector_float_;
}
inline ::google::protobuf::RepeatedField< float >*
FieldTypeTest::mutable_vector_float() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_float)
  return &vector_float_;
}

// repeated int32 vector_int32 = 203;
inline int FieldTypeTest::vector_int32_size() const {
  return vector_int32_.size();
}
inline void FieldTypeTest::clear_vector_int32() {
  vector_int32_.Clear();
}
inline ::google::protobuf::int32 FieldTypeTest::vector_int32(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_int32)
  return vector_int32_.Get(index);
}
inline void FieldTypeTest::set_vector_int32(int index, ::google::protobuf::int32 value) {
  vector_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_int32)
}
inline void FieldTypeTest::add_vector_int32(::google::protobuf::int32 value) {
  vector_int32_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FieldTypeTest::vector_int32() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_int32)
  return vector_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FieldTypeTest::mutable_vector_int32() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_int32)
  return &vector_int32_;
}

// repeated int64 vector_int64 = 204;
inline int FieldTypeTest::vector_int64_size() const {
  return vector_int64_.size();
}
inline void FieldTypeTest::clear_vector_int64() {
  vector_int64_.Clear();
}
inline ::google::protobuf::int64 FieldTypeTest::vector_int64(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_int64)
  return vector_int64_.Get(index);
}
inline void FieldTypeTest::set_vector_int64(int index, ::google::protobuf::int64 value) {
  vector_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_int64)
}
inline void FieldTypeTest::add_vector_int64(::google::protobuf::int64 value) {
  vector_int64_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_int64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FieldTypeTest::vector_int64() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_int64)
  return vector_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FieldTypeTest::mutable_vector_int64() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_int64)
  return &vector_int64_;
}

// repeated uint32 vector_uint32 = 205;
inline int FieldTypeTest::vector_uint32_size() const {
  return vector_uint32_.size();
}
inline void FieldTypeTest::clear_vector_uint32() {
  vector_uint32_.Clear();
}
inline ::google::protobuf::uint32 FieldTypeTest::vector_uint32(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_uint32)
  return vector_uint32_.Get(index);
}
inline void FieldTypeTest::set_vector_uint32(int index, ::google::protobuf::uint32 value) {
  vector_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_uint32)
}
inline void FieldTypeTest::add_vector_uint32(::google::protobuf::uint32 value) {
  vector_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_uint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FieldTypeTest::vector_uint32() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_uint32)
  return vector_uint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FieldTypeTest::mutable_vector_uint32() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_uint32)
  return &vector_uint32_;
}

// repeated uint64 vector_uint64 = 206;
inline int FieldTypeTest::vector_uint64_size() const {
  return vector_uint64_.size();
}
inline void FieldTypeTest::clear_vector_uint64() {
  vector_uint64_.Clear();
}
inline ::google::protobuf::uint64 FieldTypeTest::vector_uint64(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_uint64)
  return vector_uint64_.Get(index);
}
inline void FieldTypeTest::set_vector_uint64(int index, ::google::protobuf::uint64 value) {
  vector_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_uint64)
}
inline void FieldTypeTest::add_vector_uint64(::google::protobuf::uint64 value) {
  vector_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_uint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FieldTypeTest::vector_uint64() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_uint64)
  return vector_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FieldTypeTest::mutable_vector_uint64() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_uint64)
  return &vector_uint64_;
}

// repeated sint32 vector_sint32 = 207;
inline int FieldTypeTest::vector_sint32_size() const {
  return vector_sint32_.size();
}
inline void FieldTypeTest::clear_vector_sint32() {
  vector_sint32_.Clear();
}
inline ::google::protobuf::int32 FieldTypeTest::vector_sint32(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_sint32)
  return vector_sint32_.Get(index);
}
inline void FieldTypeTest::set_vector_sint32(int index, ::google::protobuf::int32 value) {
  vector_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_sint32)
}
inline void FieldTypeTest::add_vector_sint32(::google::protobuf::int32 value) {
  vector_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_sint32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FieldTypeTest::vector_sint32() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_sint32)
  return vector_sint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FieldTypeTest::mutable_vector_sint32() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_sint32)
  return &vector_sint32_;
}

// repeated sint64 vector_sint64 = 208;
inline int FieldTypeTest::vector_sint64_size() const {
  return vector_sint64_.size();
}
inline void FieldTypeTest::clear_vector_sint64() {
  vector_sint64_.Clear();
}
inline ::google::protobuf::int64 FieldTypeTest::vector_sint64(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_sint64)
  return vector_sint64_.Get(index);
}
inline void FieldTypeTest::set_vector_sint64(int index, ::google::protobuf::int64 value) {
  vector_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_sint64)
}
inline void FieldTypeTest::add_vector_sint64(::google::protobuf::int64 value) {
  vector_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_sint64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FieldTypeTest::vector_sint64() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_sint64)
  return vector_sint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FieldTypeTest::mutable_vector_sint64() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_sint64)
  return &vector_sint64_;
}

// repeated fixed32 vector_fixed32 = 209;
inline int FieldTypeTest::vector_fixed32_size() const {
  return vector_fixed32_.size();
}
inline void FieldTypeTest::clear_vector_fixed32() {
  vector_fixed32_.Clear();
}
inline ::google::protobuf::uint32 FieldTypeTest::vector_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_fixed32)
  return vector_fixed32_.Get(index);
}
inline void FieldTypeTest::set_vector_fixed32(int index, ::google::protobuf::uint32 value) {
  vector_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_fixed32)
}
inline void FieldTypeTest::add_vector_fixed32(::google::protobuf::uint32 value) {
  vector_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_fixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FieldTypeTest::vector_fixed32() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_fixed32)
  return vector_fixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FieldTypeTest::mutable_vector_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_fixed32)
  return &vector_fixed32_;
}

// repeated fixed64 vector_fixed64 = 210;
inline int FieldTypeTest::vector_fixed64_size() const {
  return vector_fixed64_.size();
}
inline void FieldTypeTest::clear_vector_fixed64() {
  vector_fixed64_.Clear();
}
inline ::google::protobuf::uint64 FieldTypeTest::vector_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_fixed64)
  return vector_fixed64_.Get(index);
}
inline void FieldTypeTest::set_vector_fixed64(int index, ::google::protobuf::uint64 value) {
  vector_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_fixed64)
}
inline void FieldTypeTest::add_vector_fixed64(::google::protobuf::uint64 value) {
  vector_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_fixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FieldTypeTest::vector_fixed64() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_fixed64)
  return vector_fixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FieldTypeTest::mutable_vector_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_fixed64)
  return &vector_fixed64_;
}

// repeated sfixed32 vector_sfixed32 = 211;
inline int FieldTypeTest::vector_sfixed32_size() const {
  return vector_sfixed32_.size();
}
inline void FieldTypeTest::clear_vector_sfixed32() {
  vector_sfixed32_.Clear();
}
inline ::google::protobuf::int32 FieldTypeTest::vector_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_sfixed32)
  return vector_sfixed32_.Get(index);
}
inline void FieldTypeTest::set_vector_sfixed32(int index, ::google::protobuf::int32 value) {
  vector_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_sfixed32)
}
inline void FieldTypeTest::add_vector_sfixed32(::google::protobuf::int32 value) {
  vector_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_sfixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FieldTypeTest::vector_sfixed32() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_sfixed32)
  return vector_sfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FieldTypeTest::mutable_vector_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_sfixed32)
  return &vector_sfixed32_;
}

// repeated sfixed64 vector_sfixed64 = 212;
inline int FieldTypeTest::vector_sfixed64_size() const {
  return vector_sfixed64_.size();
}
inline void FieldTypeTest::clear_vector_sfixed64() {
  vector_sfixed64_.Clear();
}
inline ::google::protobuf::int64 FieldTypeTest::vector_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_sfixed64)
  return vector_sfixed64_.Get(index);
}
inline void FieldTypeTest::set_vector_sfixed64(int index, ::google::protobuf::int64 value) {
  vector_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_sfixed64)
}
inline void FieldTypeTest::add_vector_sfixed64(::google::protobuf::int64 value) {
  vector_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_sfixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FieldTypeTest::vector_sfixed64() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_sfixed64)
  return vector_sfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FieldTypeTest::mutable_vector_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_sfixed64)
  return &vector_sfixed64_;
}

// repeated bool vector_bool = 213;
inline int FieldTypeTest::vector_bool_size() const {
  return vector_bool_.size();
}
inline void FieldTypeTest::clear_vector_bool() {
  vector_bool_.Clear();
}
inline bool FieldTypeTest::vector_bool(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_bool)
  return vector_bool_.Get(index);
}
inline void FieldTypeTest::set_vector_bool(int index, bool value) {
  vector_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_bool)
}
inline void FieldTypeTest::add_vector_bool(bool value) {
  vector_bool_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
FieldTypeTest::vector_bool() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_bool)
  return vector_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
FieldTypeTest::mutable_vector_bool() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_bool)
  return &vector_bool_;
}

// repeated string vector_string = 214;
inline int FieldTypeTest::vector_string_size() const {
  return vector_string_.size();
}
inline void FieldTypeTest::clear_vector_string() {
  vector_string_.Clear();
}
inline const ::std::string& FieldTypeTest::vector_string(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_string)
  return vector_string_.Get(index);
}
inline ::std::string* FieldTypeTest::mutable_vector_string(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.vector_string)
  return vector_string_.Mutable(index);
}
inline void FieldTypeTest::set_vector_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_string)
  vector_string_.Mutable(index)->assign(value);
}
inline void FieldTypeTest::set_vector_string(int index, const char* value) {
  vector_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.FieldTypeTest.vector_string)
}
inline void FieldTypeTest::set_vector_string(int index, const char* value, size_t size) {
  vector_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.FieldTypeTest.vector_string)
}
inline ::std::string* FieldTypeTest::add_vector_string() {
  return vector_string_.Add();
}
inline void FieldTypeTest::add_vector_string(const ::std::string& value) {
  vector_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_string)
}
inline void FieldTypeTest::add_vector_string(const char* value) {
  vector_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MLB.ProtoBuf.FieldTypeTest.vector_string)
}
inline void FieldTypeTest::add_vector_string(const char* value, size_t size) {
  vector_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MLB.ProtoBuf.FieldTypeTest.vector_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FieldTypeTest::vector_string() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_string)
  return vector_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FieldTypeTest::mutable_vector_string() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_string)
  return &vector_string_;
}

// repeated bytes vector_bytes = 215;
inline int FieldTypeTest::vector_bytes_size() const {
  return vector_bytes_.size();
}
inline void FieldTypeTest::clear_vector_bytes() {
  vector_bytes_.Clear();
}
inline const ::std::string& FieldTypeTest::vector_bytes(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
  return vector_bytes_.Get(index);
}
inline ::std::string* FieldTypeTest::mutable_vector_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
  return vector_bytes_.Mutable(index);
}
inline void FieldTypeTest::set_vector_bytes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
  vector_bytes_.Mutable(index)->assign(value);
}
inline void FieldTypeTest::set_vector_bytes(int index, const char* value) {
  vector_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
}
inline void FieldTypeTest::set_vector_bytes(int index, const void* value, size_t size) {
  vector_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
}
inline ::std::string* FieldTypeTest::add_vector_bytes() {
  return vector_bytes_.Add();
}
inline void FieldTypeTest::add_vector_bytes(const ::std::string& value) {
  vector_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
}
inline void FieldTypeTest::add_vector_bytes(const char* value) {
  vector_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
}
inline void FieldTypeTest::add_vector_bytes(const void* value, size_t size) {
  vector_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FieldTypeTest::vector_bytes() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
  return vector_bytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FieldTypeTest::mutable_vector_bytes() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_bytes)
  return &vector_bytes_;
}

// repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrency vector_BigCurrency = 216;
inline int FieldTypeTest::vector_bigcurrency_size() const {
  return vector_bigcurrency_.size();
}
inline void FieldTypeTest::clear_vector_bigcurrency() {
  vector_bigcurrency_.Clear();
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrency FieldTypeTest::vector_bigcurrency(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrency)
  return static_cast< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency >(vector_bigcurrency_.Get(index));
}
inline void FieldTypeTest::set_vector_bigcurrency(int index, ::MLB::ProtoBuf::FieldTypeTest_BigCurrency value) {
  assert(::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value));
  vector_bigcurrency_.Set(index, value);
  // @@protoc_insertion_point(field_set:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrency)
}
inline void FieldTypeTest::add_vector_bigcurrency(::MLB::ProtoBuf::FieldTypeTest_BigCurrency value) {
  assert(::MLB::ProtoBuf::FieldTypeTest_BigCurrency_IsValid(value));
  vector_bigcurrency_.Add(value);
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrency)
}
inline const ::google::protobuf::RepeatedField<int>&
FieldTypeTest::vector_bigcurrency() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrency)
  return vector_bigcurrency_;
}
inline ::google::protobuf::RepeatedField<int>*
FieldTypeTest::mutable_vector_bigcurrency() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrency)
  return &vector_bigcurrency_;
}

// repeated .MLB.ProtoBuf.FieldTypeTest.BigCurrencyPosition vector_BigCurrencyPosition = 217;
inline int FieldTypeTest::vector_bigcurrencyposition_size() const {
  return vector_bigcurrencyposition_.size();
}
inline void FieldTypeTest::clear_vector_bigcurrencyposition() {
  vector_bigcurrencyposition_.Clear();
}
inline const ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition& FieldTypeTest::vector_bigcurrencyposition(int index) const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrencyPosition)
  return vector_bigcurrencyposition_.Get(index);
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* FieldTypeTest::mutable_vector_bigcurrencyposition(int index) {
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrencyPosition)
  return vector_bigcurrencyposition_.Mutable(index);
}
inline ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition* FieldTypeTest::add_vector_bigcurrencyposition() {
  // @@protoc_insertion_point(field_add:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrencyPosition)
  return vector_bigcurrencyposition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition >&
FieldTypeTest::vector_bigcurrencyposition() const {
  // @@protoc_insertion_point(field_list:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrencyPosition)
  return vector_bigcurrencyposition_;
}
inline ::google::protobuf::RepeatedPtrField< ::MLB::ProtoBuf::FieldTypeTest_BigCurrencyPosition >*
FieldTypeTest::mutable_vector_bigcurrencyposition() {
  // @@protoc_insertion_point(field_mutable_list:MLB.ProtoBuf.FieldTypeTest.vector_BigCurrencyPosition)
  return &vector_bigcurrencyposition_;
}

// optional .MLB.ProtoBuf.Array1Double array1_double = 301;
inline bool FieldTypeTest::has_array1_double() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void FieldTypeTest::set_has_array1_double() {
  _has_bits_[1] |= 0x00000008u;
}
inline void FieldTypeTest::clear_has_array1_double() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void FieldTypeTest::clear_array1_double() {
  if (array1_double_ != NULL) array1_double_->::MLB::ProtoBuf::Array1Double::Clear();
  clear_has_array1_double();
}
inline const ::MLB::ProtoBuf::Array1Double& FieldTypeTest::array1_double() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_double)
  return array1_double_ != NULL ? *array1_double_ : *default_instance_->array1_double_;
}
inline ::MLB::ProtoBuf::Array1Double* FieldTypeTest::mutable_array1_double() {
  set_has_array1_double();
  if (array1_double_ == NULL) array1_double_ = new ::MLB::ProtoBuf::Array1Double;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_double)
  return array1_double_;
}
inline ::MLB::ProtoBuf::Array1Double* FieldTypeTest::release_array1_double() {
  clear_has_array1_double();
  ::MLB::ProtoBuf::Array1Double* temp = array1_double_;
  array1_double_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_double(::MLB::ProtoBuf::Array1Double* array1_double) {
  delete array1_double_;
  array1_double_ = array1_double;
  if (array1_double) {
    set_has_array1_double();
  } else {
    clear_has_array1_double();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_double)
}

// optional .MLB.ProtoBuf.Array1Float array1_float = 302;
inline bool FieldTypeTest::has_array1_float() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void FieldTypeTest::set_has_array1_float() {
  _has_bits_[1] |= 0x00000010u;
}
inline void FieldTypeTest::clear_has_array1_float() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void FieldTypeTest::clear_array1_float() {
  if (array1_float_ != NULL) array1_float_->::MLB::ProtoBuf::Array1Float::Clear();
  clear_has_array1_float();
}
inline const ::MLB::ProtoBuf::Array1Float& FieldTypeTest::array1_float() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_float)
  return array1_float_ != NULL ? *array1_float_ : *default_instance_->array1_float_;
}
inline ::MLB::ProtoBuf::Array1Float* FieldTypeTest::mutable_array1_float() {
  set_has_array1_float();
  if (array1_float_ == NULL) array1_float_ = new ::MLB::ProtoBuf::Array1Float;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_float)
  return array1_float_;
}
inline ::MLB::ProtoBuf::Array1Float* FieldTypeTest::release_array1_float() {
  clear_has_array1_float();
  ::MLB::ProtoBuf::Array1Float* temp = array1_float_;
  array1_float_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_float(::MLB::ProtoBuf::Array1Float* array1_float) {
  delete array1_float_;
  array1_float_ = array1_float;
  if (array1_float) {
    set_has_array1_float();
  } else {
    clear_has_array1_float();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_float)
}

// optional .MLB.ProtoBuf.Array1Int32 array1_int32 = 303;
inline bool FieldTypeTest::has_array1_int32() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void FieldTypeTest::set_has_array1_int32() {
  _has_bits_[1] |= 0x00000020u;
}
inline void FieldTypeTest::clear_has_array1_int32() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void FieldTypeTest::clear_array1_int32() {
  if (array1_int32_ != NULL) array1_int32_->::MLB::ProtoBuf::Array1Int32::Clear();
  clear_has_array1_int32();
}
inline const ::MLB::ProtoBuf::Array1Int32& FieldTypeTest::array1_int32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_int32)
  return array1_int32_ != NULL ? *array1_int32_ : *default_instance_->array1_int32_;
}
inline ::MLB::ProtoBuf::Array1Int32* FieldTypeTest::mutable_array1_int32() {
  set_has_array1_int32();
  if (array1_int32_ == NULL) array1_int32_ = new ::MLB::ProtoBuf::Array1Int32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_int32)
  return array1_int32_;
}
inline ::MLB::ProtoBuf::Array1Int32* FieldTypeTest::release_array1_int32() {
  clear_has_array1_int32();
  ::MLB::ProtoBuf::Array1Int32* temp = array1_int32_;
  array1_int32_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_int32(::MLB::ProtoBuf::Array1Int32* array1_int32) {
  delete array1_int32_;
  array1_int32_ = array1_int32;
  if (array1_int32) {
    set_has_array1_int32();
  } else {
    clear_has_array1_int32();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_int32)
}

// optional .MLB.ProtoBuf.Array1Int64 array1_int64 = 304;
inline bool FieldTypeTest::has_array1_int64() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void FieldTypeTest::set_has_array1_int64() {
  _has_bits_[1] |= 0x00000040u;
}
inline void FieldTypeTest::clear_has_array1_int64() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void FieldTypeTest::clear_array1_int64() {
  if (array1_int64_ != NULL) array1_int64_->::MLB::ProtoBuf::Array1Int64::Clear();
  clear_has_array1_int64();
}
inline const ::MLB::ProtoBuf::Array1Int64& FieldTypeTest::array1_int64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_int64)
  return array1_int64_ != NULL ? *array1_int64_ : *default_instance_->array1_int64_;
}
inline ::MLB::ProtoBuf::Array1Int64* FieldTypeTest::mutable_array1_int64() {
  set_has_array1_int64();
  if (array1_int64_ == NULL) array1_int64_ = new ::MLB::ProtoBuf::Array1Int64;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_int64)
  return array1_int64_;
}
inline ::MLB::ProtoBuf::Array1Int64* FieldTypeTest::release_array1_int64() {
  clear_has_array1_int64();
  ::MLB::ProtoBuf::Array1Int64* temp = array1_int64_;
  array1_int64_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_int64(::MLB::ProtoBuf::Array1Int64* array1_int64) {
  delete array1_int64_;
  array1_int64_ = array1_int64;
  if (array1_int64) {
    set_has_array1_int64();
  } else {
    clear_has_array1_int64();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_int64)
}

// optional .MLB.ProtoBuf.Array1UInt32 array1_uint32 = 305;
inline bool FieldTypeTest::has_array1_uint32() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void FieldTypeTest::set_has_array1_uint32() {
  _has_bits_[1] |= 0x00000080u;
}
inline void FieldTypeTest::clear_has_array1_uint32() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void FieldTypeTest::clear_array1_uint32() {
  if (array1_uint32_ != NULL) array1_uint32_->::MLB::ProtoBuf::Array1UInt32::Clear();
  clear_has_array1_uint32();
}
inline const ::MLB::ProtoBuf::Array1UInt32& FieldTypeTest::array1_uint32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_uint32)
  return array1_uint32_ != NULL ? *array1_uint32_ : *default_instance_->array1_uint32_;
}
inline ::MLB::ProtoBuf::Array1UInt32* FieldTypeTest::mutable_array1_uint32() {
  set_has_array1_uint32();
  if (array1_uint32_ == NULL) array1_uint32_ = new ::MLB::ProtoBuf::Array1UInt32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_uint32)
  return array1_uint32_;
}
inline ::MLB::ProtoBuf::Array1UInt32* FieldTypeTest::release_array1_uint32() {
  clear_has_array1_uint32();
  ::MLB::ProtoBuf::Array1UInt32* temp = array1_uint32_;
  array1_uint32_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_uint32(::MLB::ProtoBuf::Array1UInt32* array1_uint32) {
  delete array1_uint32_;
  array1_uint32_ = array1_uint32;
  if (array1_uint32) {
    set_has_array1_uint32();
  } else {
    clear_has_array1_uint32();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_uint32)
}

// optional .MLB.ProtoBuf.Array1UInt32 array1_uint64 = 306;
inline bool FieldTypeTest::has_array1_uint64() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void FieldTypeTest::set_has_array1_uint64() {
  _has_bits_[1] |= 0x00000100u;
}
inline void FieldTypeTest::clear_has_array1_uint64() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void FieldTypeTest::clear_array1_uint64() {
  if (array1_uint64_ != NULL) array1_uint64_->::MLB::ProtoBuf::Array1UInt32::Clear();
  clear_has_array1_uint64();
}
inline const ::MLB::ProtoBuf::Array1UInt32& FieldTypeTest::array1_uint64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_uint64)
  return array1_uint64_ != NULL ? *array1_uint64_ : *default_instance_->array1_uint64_;
}
inline ::MLB::ProtoBuf::Array1UInt32* FieldTypeTest::mutable_array1_uint64() {
  set_has_array1_uint64();
  if (array1_uint64_ == NULL) array1_uint64_ = new ::MLB::ProtoBuf::Array1UInt32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_uint64)
  return array1_uint64_;
}
inline ::MLB::ProtoBuf::Array1UInt32* FieldTypeTest::release_array1_uint64() {
  clear_has_array1_uint64();
  ::MLB::ProtoBuf::Array1UInt32* temp = array1_uint64_;
  array1_uint64_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_uint64(::MLB::ProtoBuf::Array1UInt32* array1_uint64) {
  delete array1_uint64_;
  array1_uint64_ = array1_uint64;
  if (array1_uint64) {
    set_has_array1_uint64();
  } else {
    clear_has_array1_uint64();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_uint64)
}

// optional .MLB.ProtoBuf.Array1Bool array1_bool = 313;
inline bool FieldTypeTest::has_array1_bool() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void FieldTypeTest::set_has_array1_bool() {
  _has_bits_[1] |= 0x00000200u;
}
inline void FieldTypeTest::clear_has_array1_bool() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void FieldTypeTest::clear_array1_bool() {
  if (array1_bool_ != NULL) array1_bool_->::MLB::ProtoBuf::Array1Bool::Clear();
  clear_has_array1_bool();
}
inline const ::MLB::ProtoBuf::Array1Bool& FieldTypeTest::array1_bool() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_bool)
  return array1_bool_ != NULL ? *array1_bool_ : *default_instance_->array1_bool_;
}
inline ::MLB::ProtoBuf::Array1Bool* FieldTypeTest::mutable_array1_bool() {
  set_has_array1_bool();
  if (array1_bool_ == NULL) array1_bool_ = new ::MLB::ProtoBuf::Array1Bool;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_bool)
  return array1_bool_;
}
inline ::MLB::ProtoBuf::Array1Bool* FieldTypeTest::release_array1_bool() {
  clear_has_array1_bool();
  ::MLB::ProtoBuf::Array1Bool* temp = array1_bool_;
  array1_bool_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_bool(::MLB::ProtoBuf::Array1Bool* array1_bool) {
  delete array1_bool_;
  array1_bool_ = array1_bool;
  if (array1_bool) {
    set_has_array1_bool();
  } else {
    clear_has_array1_bool();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_bool)
}

// optional .MLB.ProtoBuf.Array1String array1_string = 314;
inline bool FieldTypeTest::has_array1_string() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void FieldTypeTest::set_has_array1_string() {
  _has_bits_[1] |= 0x00000400u;
}
inline void FieldTypeTest::clear_has_array1_string() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void FieldTypeTest::clear_array1_string() {
  if (array1_string_ != NULL) array1_string_->::MLB::ProtoBuf::Array1String::Clear();
  clear_has_array1_string();
}
inline const ::MLB::ProtoBuf::Array1String& FieldTypeTest::array1_string() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array1_string)
  return array1_string_ != NULL ? *array1_string_ : *default_instance_->array1_string_;
}
inline ::MLB::ProtoBuf::Array1String* FieldTypeTest::mutable_array1_string() {
  set_has_array1_string();
  if (array1_string_ == NULL) array1_string_ = new ::MLB::ProtoBuf::Array1String;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array1_string)
  return array1_string_;
}
inline ::MLB::ProtoBuf::Array1String* FieldTypeTest::release_array1_string() {
  clear_has_array1_string();
  ::MLB::ProtoBuf::Array1String* temp = array1_string_;
  array1_string_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array1_string(::MLB::ProtoBuf::Array1String* array1_string) {
  delete array1_string_;
  array1_string_ = array1_string;
  if (array1_string) {
    set_has_array1_string();
  } else {
    clear_has_array1_string();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array1_string)
}

// optional .MLB.ProtoBuf.Array2Double array2_double = 401;
inline bool FieldTypeTest::has_array2_double() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void FieldTypeTest::set_has_array2_double() {
  _has_bits_[1] |= 0x00000800u;
}
inline void FieldTypeTest::clear_has_array2_double() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void FieldTypeTest::clear_array2_double() {
  if (array2_double_ != NULL) array2_double_->::MLB::ProtoBuf::Array2Double::Clear();
  clear_has_array2_double();
}
inline const ::MLB::ProtoBuf::Array2Double& FieldTypeTest::array2_double() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_double)
  return array2_double_ != NULL ? *array2_double_ : *default_instance_->array2_double_;
}
inline ::MLB::ProtoBuf::Array2Double* FieldTypeTest::mutable_array2_double() {
  set_has_array2_double();
  if (array2_double_ == NULL) array2_double_ = new ::MLB::ProtoBuf::Array2Double;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_double)
  return array2_double_;
}
inline ::MLB::ProtoBuf::Array2Double* FieldTypeTest::release_array2_double() {
  clear_has_array2_double();
  ::MLB::ProtoBuf::Array2Double* temp = array2_double_;
  array2_double_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_double(::MLB::ProtoBuf::Array2Double* array2_double) {
  delete array2_double_;
  array2_double_ = array2_double;
  if (array2_double) {
    set_has_array2_double();
  } else {
    clear_has_array2_double();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_double)
}

// optional .MLB.ProtoBuf.Array2Float array2_float = 402;
inline bool FieldTypeTest::has_array2_float() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void FieldTypeTest::set_has_array2_float() {
  _has_bits_[1] |= 0x00001000u;
}
inline void FieldTypeTest::clear_has_array2_float() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void FieldTypeTest::clear_array2_float() {
  if (array2_float_ != NULL) array2_float_->::MLB::ProtoBuf::Array2Float::Clear();
  clear_has_array2_float();
}
inline const ::MLB::ProtoBuf::Array2Float& FieldTypeTest::array2_float() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_float)
  return array2_float_ != NULL ? *array2_float_ : *default_instance_->array2_float_;
}
inline ::MLB::ProtoBuf::Array2Float* FieldTypeTest::mutable_array2_float() {
  set_has_array2_float();
  if (array2_float_ == NULL) array2_float_ = new ::MLB::ProtoBuf::Array2Float;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_float)
  return array2_float_;
}
inline ::MLB::ProtoBuf::Array2Float* FieldTypeTest::release_array2_float() {
  clear_has_array2_float();
  ::MLB::ProtoBuf::Array2Float* temp = array2_float_;
  array2_float_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_float(::MLB::ProtoBuf::Array2Float* array2_float) {
  delete array2_float_;
  array2_float_ = array2_float;
  if (array2_float) {
    set_has_array2_float();
  } else {
    clear_has_array2_float();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_float)
}

// optional .MLB.ProtoBuf.Array2Int32 array2_int32 = 403;
inline bool FieldTypeTest::has_array2_int32() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void FieldTypeTest::set_has_array2_int32() {
  _has_bits_[1] |= 0x00002000u;
}
inline void FieldTypeTest::clear_has_array2_int32() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void FieldTypeTest::clear_array2_int32() {
  if (array2_int32_ != NULL) array2_int32_->::MLB::ProtoBuf::Array2Int32::Clear();
  clear_has_array2_int32();
}
inline const ::MLB::ProtoBuf::Array2Int32& FieldTypeTest::array2_int32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_int32)
  return array2_int32_ != NULL ? *array2_int32_ : *default_instance_->array2_int32_;
}
inline ::MLB::ProtoBuf::Array2Int32* FieldTypeTest::mutable_array2_int32() {
  set_has_array2_int32();
  if (array2_int32_ == NULL) array2_int32_ = new ::MLB::ProtoBuf::Array2Int32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_int32)
  return array2_int32_;
}
inline ::MLB::ProtoBuf::Array2Int32* FieldTypeTest::release_array2_int32() {
  clear_has_array2_int32();
  ::MLB::ProtoBuf::Array2Int32* temp = array2_int32_;
  array2_int32_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_int32(::MLB::ProtoBuf::Array2Int32* array2_int32) {
  delete array2_int32_;
  array2_int32_ = array2_int32;
  if (array2_int32) {
    set_has_array2_int32();
  } else {
    clear_has_array2_int32();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_int32)
}

// optional .MLB.ProtoBuf.Array2Int64 array2_int64 = 404;
inline bool FieldTypeTest::has_array2_int64() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void FieldTypeTest::set_has_array2_int64() {
  _has_bits_[1] |= 0x00004000u;
}
inline void FieldTypeTest::clear_has_array2_int64() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void FieldTypeTest::clear_array2_int64() {
  if (array2_int64_ != NULL) array2_int64_->::MLB::ProtoBuf::Array2Int64::Clear();
  clear_has_array2_int64();
}
inline const ::MLB::ProtoBuf::Array2Int64& FieldTypeTest::array2_int64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_int64)
  return array2_int64_ != NULL ? *array2_int64_ : *default_instance_->array2_int64_;
}
inline ::MLB::ProtoBuf::Array2Int64* FieldTypeTest::mutable_array2_int64() {
  set_has_array2_int64();
  if (array2_int64_ == NULL) array2_int64_ = new ::MLB::ProtoBuf::Array2Int64;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_int64)
  return array2_int64_;
}
inline ::MLB::ProtoBuf::Array2Int64* FieldTypeTest::release_array2_int64() {
  clear_has_array2_int64();
  ::MLB::ProtoBuf::Array2Int64* temp = array2_int64_;
  array2_int64_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_int64(::MLB::ProtoBuf::Array2Int64* array2_int64) {
  delete array2_int64_;
  array2_int64_ = array2_int64;
  if (array2_int64) {
    set_has_array2_int64();
  } else {
    clear_has_array2_int64();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_int64)
}

// optional .MLB.ProtoBuf.Array2UInt32 array2_uint32 = 405;
inline bool FieldTypeTest::has_array2_uint32() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void FieldTypeTest::set_has_array2_uint32() {
  _has_bits_[1] |= 0x00008000u;
}
inline void FieldTypeTest::clear_has_array2_uint32() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void FieldTypeTest::clear_array2_uint32() {
  if (array2_uint32_ != NULL) array2_uint32_->::MLB::ProtoBuf::Array2UInt32::Clear();
  clear_has_array2_uint32();
}
inline const ::MLB::ProtoBuf::Array2UInt32& FieldTypeTest::array2_uint32() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_uint32)
  return array2_uint32_ != NULL ? *array2_uint32_ : *default_instance_->array2_uint32_;
}
inline ::MLB::ProtoBuf::Array2UInt32* FieldTypeTest::mutable_array2_uint32() {
  set_has_array2_uint32();
  if (array2_uint32_ == NULL) array2_uint32_ = new ::MLB::ProtoBuf::Array2UInt32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_uint32)
  return array2_uint32_;
}
inline ::MLB::ProtoBuf::Array2UInt32* FieldTypeTest::release_array2_uint32() {
  clear_has_array2_uint32();
  ::MLB::ProtoBuf::Array2UInt32* temp = array2_uint32_;
  array2_uint32_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_uint32(::MLB::ProtoBuf::Array2UInt32* array2_uint32) {
  delete array2_uint32_;
  array2_uint32_ = array2_uint32;
  if (array2_uint32) {
    set_has_array2_uint32();
  } else {
    clear_has_array2_uint32();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_uint32)
}

// optional .MLB.ProtoBuf.Array2UInt32 array2_uint64 = 406;
inline bool FieldTypeTest::has_array2_uint64() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void FieldTypeTest::set_has_array2_uint64() {
  _has_bits_[1] |= 0x00010000u;
}
inline void FieldTypeTest::clear_has_array2_uint64() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void FieldTypeTest::clear_array2_uint64() {
  if (array2_uint64_ != NULL) array2_uint64_->::MLB::ProtoBuf::Array2UInt32::Clear();
  clear_has_array2_uint64();
}
inline const ::MLB::ProtoBuf::Array2UInt32& FieldTypeTest::array2_uint64() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_uint64)
  return array2_uint64_ != NULL ? *array2_uint64_ : *default_instance_->array2_uint64_;
}
inline ::MLB::ProtoBuf::Array2UInt32* FieldTypeTest::mutable_array2_uint64() {
  set_has_array2_uint64();
  if (array2_uint64_ == NULL) array2_uint64_ = new ::MLB::ProtoBuf::Array2UInt32;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_uint64)
  return array2_uint64_;
}
inline ::MLB::ProtoBuf::Array2UInt32* FieldTypeTest::release_array2_uint64() {
  clear_has_array2_uint64();
  ::MLB::ProtoBuf::Array2UInt32* temp = array2_uint64_;
  array2_uint64_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_uint64(::MLB::ProtoBuf::Array2UInt32* array2_uint64) {
  delete array2_uint64_;
  array2_uint64_ = array2_uint64;
  if (array2_uint64) {
    set_has_array2_uint64();
  } else {
    clear_has_array2_uint64();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_uint64)
}

// optional .MLB.ProtoBuf.Array2Bool array2_bool = 413;
inline bool FieldTypeTest::has_array2_bool() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void FieldTypeTest::set_has_array2_bool() {
  _has_bits_[1] |= 0x00020000u;
}
inline void FieldTypeTest::clear_has_array2_bool() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void FieldTypeTest::clear_array2_bool() {
  if (array2_bool_ != NULL) array2_bool_->::MLB::ProtoBuf::Array2Bool::Clear();
  clear_has_array2_bool();
}
inline const ::MLB::ProtoBuf::Array2Bool& FieldTypeTest::array2_bool() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_bool)
  return array2_bool_ != NULL ? *array2_bool_ : *default_instance_->array2_bool_;
}
inline ::MLB::ProtoBuf::Array2Bool* FieldTypeTest::mutable_array2_bool() {
  set_has_array2_bool();
  if (array2_bool_ == NULL) array2_bool_ = new ::MLB::ProtoBuf::Array2Bool;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_bool)
  return array2_bool_;
}
inline ::MLB::ProtoBuf::Array2Bool* FieldTypeTest::release_array2_bool() {
  clear_has_array2_bool();
  ::MLB::ProtoBuf::Array2Bool* temp = array2_bool_;
  array2_bool_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_bool(::MLB::ProtoBuf::Array2Bool* array2_bool) {
  delete array2_bool_;
  array2_bool_ = array2_bool;
  if (array2_bool) {
    set_has_array2_bool();
  } else {
    clear_has_array2_bool();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_bool)
}

// optional .MLB.ProtoBuf.Array2String array2_string = 414;
inline bool FieldTypeTest::has_array2_string() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void FieldTypeTest::set_has_array2_string() {
  _has_bits_[1] |= 0x00040000u;
}
inline void FieldTypeTest::clear_has_array2_string() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void FieldTypeTest::clear_array2_string() {
  if (array2_string_ != NULL) array2_string_->::MLB::ProtoBuf::Array2String::Clear();
  clear_has_array2_string();
}
inline const ::MLB::ProtoBuf::Array2String& FieldTypeTest::array2_string() const {
  // @@protoc_insertion_point(field_get:MLB.ProtoBuf.FieldTypeTest.array2_string)
  return array2_string_ != NULL ? *array2_string_ : *default_instance_->array2_string_;
}
inline ::MLB::ProtoBuf::Array2String* FieldTypeTest::mutable_array2_string() {
  set_has_array2_string();
  if (array2_string_ == NULL) array2_string_ = new ::MLB::ProtoBuf::Array2String;
  // @@protoc_insertion_point(field_mutable:MLB.ProtoBuf.FieldTypeTest.array2_string)
  return array2_string_;
}
inline ::MLB::ProtoBuf::Array2String* FieldTypeTest::release_array2_string() {
  clear_has_array2_string();
  ::MLB::ProtoBuf::Array2String* temp = array2_string_;
  array2_string_ = NULL;
  return temp;
}
inline void FieldTypeTest::set_allocated_array2_string(::MLB::ProtoBuf::Array2String* array2_string) {
  delete array2_string_;
  array2_string_ = array2_string;
  if (array2_string) {
    set_has_array2_string();
  } else {
    clear_has_array2_string();
  }
  // @@protoc_insertion_point(field_set_allocated:MLB.ProtoBuf.FieldTypeTest.array2_string)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf
}  // namespace MLB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MLB::ProtoBuf::FieldTypeTest_BigCurrency>() {
  return ::MLB::ProtoBuf::FieldTypeTest_BigCurrency_descriptor();
}
template <> struct is_proto_enum< ::MLB::ProtoBuf::PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MLB::ProtoBuf::PhoneType>() {
  return ::MLB::ProtoBuf::PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FieldTypeTest_2eproto__INCLUDED
