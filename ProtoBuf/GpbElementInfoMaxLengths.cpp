//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	MLB Google Protocol Buffers Support Library
//	////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	GpbElementInfoMaxLengths.cpp

	File Description	:	Implementation of logic to create a copy of the
								prototype instance of a Google ProtoBuf message by
								name.

	Revision History	:	2016-06-06 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2016 - 2016.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	Include necessary header files...
//	////////////////////////////////////////////////////////////////////////////

#include <ProtoBuf/GpbElementInfoMaxLengths.hpp>

#include <Utility/Utility_Exception.hpp>

#include <sstream>

//	////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace ProtoBuf {

//	////////////////////////////////////////////////////////////////////////////
GpbElementInfoMaxLengths::GpbElementInfoMaxLengths()
{
	::memset(&max_length_, '\0', sizeof(max_length_));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void GpbElementInfoMaxLengths::FixMaxLengths(std::size_t max_depth,
	GpbEmitFlags::EmitFlags emit_flags)
{
	if (max_depth-- > 1) {
		max_depth *= 3;
		max_length_[TypeName]   +=
			(emit_flags & GpbEmitFlags::IndentType) ? max_depth : 0;
		max_length_[MemberName] +=
			(emit_flags & GpbEmitFlags::IndentName) ? max_depth : 0;
	}
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::size_t GpbElementInfoMaxLengths::CheckedIndex(MaxLengthsIndex idx) const
{
	if ((idx < Minimum) || (idx > Maximum)) {
		std::ostringstream o_str;
		o_str << "Specifed index (" << idx << ") is not within the permissible "
			"bounds (" << Minimum << " to " << Maximum << ", inclusive).";
		MLB::Utility::ThrowInvalidArgument(o_str.str());
	}

	return(idx);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
const std::size_t & GpbElementInfoMaxLengths::operator [](
	MaxLengthsIndex idx) const
{
	return(max_length_[CheckedIndex(idx)]);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::size_t & GpbElementInfoMaxLengths::operator [](MaxLengthsIndex idx)
{
	return(max_length_[CheckedIndex(idx)]);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::streamsize GpbElementInfoMaxLengths::width(MaxLengthsIndex idx) const
{
	return(static_cast<std::streamsize>(max_length_[idx]));
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace ProtoBuf

} // namespace MLB

