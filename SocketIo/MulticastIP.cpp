// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	SocketIo Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of multicast IP address checking
								support.

	Revision History	:	2008-12-20 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2008 - 2015.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <SocketIo/MulticastIP.hpp>

#include <Utility/Utility_Exception.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace SocketIo {

namespace {
// ////////////////////////////////////////////////////////////////////////////
template <typename AddressType>
	const AddressType &CheckIsMulticastIPBasic(const AddressType &ip_address)
{
	if (!IsMulticastIP(ip_address)) {
		std::ostringstream o_str;
		o_str << "The IP address '" << ip_address << "' is not a multicast "
			"address.";
		MLB::Utility::ThrowInvalidArgument(o_str.str());
	}

	return(ip_address);
}
// ////////////////////////////////////////////////////////////////////////////
} // Anonymous namespace

// ////////////////////////////////////////////////////////////////////////////
/**
	This forwarding function exists only to provide orthgonality.
*/
bool IsMulticastIP(const boost::asio::ip::address_v4 &ip_address)
{
	return(ip_address.is_multicast());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
/**
	This forwarding function exists only to provide orthgonality.
*/
bool IsMulticastIP(const boost::asio::ip::address_v6 &ip_address)
{
	return(ip_address.is_multicast());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool IsMulticastIP(const boost::asio::ip::address &ip_address)
{
	return((ip_address.is_v4()) ? IsMulticastIP(ip_address.to_v4()) :
		IsMulticastIP(ip_address.to_v6()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool IsMulticastIP(const char *ip_address)
{
	return(IsMulticastIP(boost::asio::ip::address::from_string(ip_address)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool IsMulticastIP(const std::string &ip_address)
{
	return(IsMulticastIP(ip_address.c_str()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const boost::asio::ip::address_v4 &CheckIsMulticastIP(
	const boost::asio::ip::address_v4 &ip_address)
{
	return(CheckIsMulticastIPBasic(ip_address));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const boost::asio::ip::address_v6 &CheckIsMulticastIP(
	const boost::asio::ip::address_v6 &ip_address)
{
	return(CheckIsMulticastIPBasic(ip_address));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const boost::asio::ip::address &CheckIsMulticastIP(
	const boost::asio::ip::address &ip_address)
{
	return(CheckIsMulticastIPBasic(ip_address));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *CheckIsMulticastIP(const char *ip_address)
{
	return(CheckIsMulticastIPBasic(ip_address));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const std::string &CheckIsMulticastIP(const std::string &ip_address)
{
	return(CheckIsMulticastIPBasic(ip_address));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace SocketIo

} // namespace MLB

