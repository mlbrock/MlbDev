// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	TibCo/Rendezvous Support Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Wrapper functions for the TibrvMsg class.

	Revision History	:	2001-10-01 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2001 - 2014.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <RvUtilX/RvMsgAdd.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace RvUtilX {

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddBool(TibrvMsg &msg, const char *field_name,
	bool field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addBool,
		(field_name, static_cast<tibrv_bool>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddBool(TibrvMsg &msg, const std::string &field_name,
	bool field_value, tibrv_u16 field_id)
{
	return(MsgAddBool(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddF32(TibrvMsg &msg, const char *field_name,
	float field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addF32,
		(field_name, static_cast<tibrv_f32>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddF32(TibrvMsg &msg, const std::string &field_name,
	float field_value, tibrv_u16 field_id)
{
	return(MsgAddF32(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddF64(TibrvMsg &msg, const char *field_name,
	double field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addF64,
		(field_name, static_cast<tibrv_f64>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddF64(TibrvMsg &msg, const std::string &field_name,
	double field_value, tibrv_u16 field_id)
{
	return(MsgAddF64(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI8(TibrvMsg &msg, const char *field_name,
	signed char field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addI8,
		(field_name, static_cast<tibrv_i8>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI8(TibrvMsg &msg, const std::string &field_name,
	signed char field_value, tibrv_u16 field_id)
{
	return(MsgAddI8(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI16(TibrvMsg &msg, const char *field_name,
	signed short field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addI16,
		(field_name, static_cast<tibrv_i16>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI16(TibrvMsg &msg, const std::string &field_name,
	signed short field_value, tibrv_u16 field_id)
{
	return(MsgAddI16(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI32(TibrvMsg &msg, const char *field_name,
	signed int field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addI32,
		(field_name, static_cast<tibrv_i32>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI32(TibrvMsg &msg, const std::string &field_name,
	signed int field_value, tibrv_u16 field_id)
{
	return(MsgAddI32(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI64(TibrvMsg &msg, const char *field_name,
	signed long long field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addI64,
		(field_name, static_cast<tibrv_i64>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddI64(TibrvMsg &msg, const std::string &field_name,
	signed long long field_value, tibrv_u16 field_id)
{
	return(MsgAddI64(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU8(TibrvMsg &msg, const char *field_name,
	unsigned char field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addU8,
		(field_name, static_cast<tibrv_u8>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU8(TibrvMsg &msg, const std::string &field_name,
	unsigned char field_value, tibrv_u16 field_id)
{
	return(MsgAddU8(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU16(TibrvMsg &msg, const char *field_name,
	unsigned short field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addU16,
		(field_name, static_cast<tibrv_u16>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU16(TibrvMsg &msg, const std::string &field_name,
	unsigned short field_value, tibrv_u16 field_id)
{
	return(MsgAddU16(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU32(TibrvMsg &msg, const char *field_name,
	unsigned int field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addU32,
		(field_name, static_cast<tibrv_u32>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU32(TibrvMsg &msg, const std::string &field_name,
	unsigned int field_value, tibrv_u16 field_id)
{
	return(MsgAddU32(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU64(TibrvMsg &msg, const char *field_name,
	unsigned long long field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addU64,
		(field_name, static_cast<tibrv_u64>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddU64(TibrvMsg &msg, const std::string &field_name,
	unsigned long long field_value, tibrv_u16 field_id)
{
	return(MsgAddU64(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddIPAddr32(TibrvMsg &msg, const char *field_name,
	unsigned int field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addIPAddr32,
		(field_name, static_cast<tibrv_ipaddr32>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddIPAddr32(TibrvMsg &msg, const std::string &field_name,
	unsigned int field_value, tibrv_u16 field_id)
{
	return(MsgAddIPAddr32(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddIPPort16(TibrvMsg &msg, const char *field_name,
	unsigned short field_value, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(msg.addIPPort16,
		(field_name, static_cast<tibrv_ipport16>(field_value), field_id));

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgAddIPPort16(TibrvMsg &msg, const std::string &field_name,
	unsigned short field_value, tibrv_u16 field_id)
{
	return(MsgAddIPPort16(msg, field_name.c_str(), field_value, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace RvUtilX

} // namespace MLB

