// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	TibCo/Rendezvous Support Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Converts a subject name to a vector of the concatenated
								elements of the subject name.

	Revision History	:	2001-10-01 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2001 - 2017.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <RvUtilX.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace RvUtilX {

// ////////////////////////////////////////////////////////////////////////////
void AppendSubjectNameToMultiPartList(const SubjectNameFlat &subject_name,
	MLB::Utility::StringVector &out_list)
{
	unsigned int count_1;

	out_list.reserve(std::max(out_list.capacity(),
		out_list.size() + subject_name.element_count_));

	for (count_1 = 0; count_1 < subject_name.element_count_; ++count_1)
		out_list.push_back(((count_1) ? (out_list[count_1 - 1] + ".") : "") +
			subject_name.element_list_[count_1]);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void AppendSubjectNameToMultiPartList(const SubjectNameWork &subject_name,
	MLB::Utility::StringVector &out_list)
{
	AppendSubjectNameToMultiPartList(SubjectNameFlat(subject_name), out_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void AppendSubjectNameToMultiPartList(const std::string &subject_name,
	MLB::Utility::StringVector &out_list)
{
	AppendSubjectNameToMultiPartList(SubjectNameFlat(subject_name), out_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void SubjectNameToMultiPartList(const SubjectNameFlat &subject_name,
	MLB::Utility::StringVector &out_list)
{
	MLB::Utility::StringVector tmp_list;

	AppendSubjectNameToMultiPartList(subject_name, tmp_list);

	std::swap(out_list, tmp_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void SubjectNameToMultiPartList(const SubjectNameWork &subject_name,
	MLB::Utility::StringVector &out_list)
{
	SubjectNameToMultiPartList(SubjectNameFlat(subject_name), out_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void SubjectNameToMultiPartList(const std::string &subject_name,
	MLB::Utility::StringVector &out_list)
{
	SubjectNameToMultiPartList(SubjectNameFlat(subject_name), out_list);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace RvUtilX

} // namespace MLB

