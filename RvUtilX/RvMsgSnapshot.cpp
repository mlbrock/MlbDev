// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	TibCo/Rendezvous Support Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Support for the manipulation of TibrvMsg snapshots.

	Revision History	:	2007-09-06 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2007 - 2017.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <RvUtilX.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace RvUtilX {

//	////////////////////////////////////////////////////////////////////////////
const TibrvMsg &MarkReferencesInMsg(const TibrvMsg &msg)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).markReferences,
		());

	return(msg);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
const TibrvMsg &ClearReferencesInMsg(const TibrvMsg &msg)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).clearReferences,
		());

	return(msg);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvMsgSnapshotContext::RvMsgSnapshotContext(const TibrvMsg &msg_ref)
	:msg_ref_(MarkReferencesInMsg(msg_ref))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvMsgSnapshotContext::~RvMsgSnapshotContext()
{
	try {
		ClearReferencesInMsg(msg_ref_);
	}
	catch (const std::exception &) {
	}
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace RvUtilX

} // namespace MLB

