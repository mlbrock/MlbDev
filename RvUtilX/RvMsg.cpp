// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	TibCo/Rendezvous Support Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Wrapper functions for the TibrvMsg class.

	Revision History	:	2001-10-01 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2001 - 2016.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <RvUtilX/RvMsg.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace RvUtilX {

// ////////////////////////////////////////////////////////////////////////////
const TibrvMsg &MsgClearReferences(const TibrvMsg &msg)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).clearReferences,
		());

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &MsgConvertToString(const TibrvMsg &msg, std::string &out_string)
{
	const char *to_string;

	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).convertToString,
		(to_string));

	return(out_string.assign(to_string));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string MsgConvertToString(const TibrvMsg &msg)
{
	std::string out_string;

	return(MsgConvertToString(msg, out_string));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void MsgCreateCopy(const TibrvMsg &src_msg, TibrvMsg &dst_msg)
{
	try {
		RvUtilX_THROW_TIBRV_STATUS_IF(dst_msg.reset,
			());
		RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(src_msg).createCopy,
			(dst_msg));
	}
	catch (const std::exception &except) {
		MLB::Utility::Rethrow(except,
			std::string("Attempt to copy a TibrvMsg object failed: ") +
			except.what());
	}
}
// ////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
// Function DetachTibrvMsg() in DetachMsg.cpp should be modified to use this.
TibrvMsg *MsgDetach(TibrvMsg &msg)
{
	TibrvStatus rv_status;

	if ((rv_status = msg.getStatus()) != TIBRV_OK)
		ThrowTibrvStatus(rv_status,
			"Unable to detach a TibrvMsg due to its invalid status");
		
	if (msg.isDetached())
		throw RvException("Unable to detach a TibrvMsg because it is already "
			"detached.");

	TibrvMsg *dst_msg_ptr;

	if ((dst_msg_ptr = msg.detach()) == NULL)
		throw RvException("Unable to detach a TibrvMsg because the 'detach()' "
			"method of the message to be copied returned 'NULL'.");

	return(dst_msg_ptr);
}
//	////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void MsgExpand(TibrvMsg &msg, unsigned int additional_storage)
{
	try {
		RvUtilX_THROW_TIBRV_STATUS_IF(msg.expand,
			(additional_storage));
	}
	catch (const std::exception &except) {
		MLB::Utility::Rethrow(except,
			std::string("Attempt to expand the storage of a TibrvMsg object "
			"failed: ") + except.what());
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const void *MsgGetAsBytes(const TibrvMsg &msg)
{
	const void *msg_byte_ptr;

	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getAsBytes,
		(msg_byte_ptr));

	return(msg_byte_ptr);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const void *MsgGetAsBytesCopy(const TibrvMsg &msg, void *msg_byte_ptr,
	unsigned int msg_byte_length)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getAsBytesCopy,
		(msg_byte_ptr, msg_byte_length));

	return(msg_byte_ptr);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
unsigned int MsgGetByteSize(const TibrvMsg &msg)
{
	tibrv_u32  msg_byte_length;

	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getByteSize,
		(msg_byte_length));

	return(msg_byte_length);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgDateTime &MsgGetCurrentTime(TibrvMsgDateTime &out_time)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(TibrvMsg::getCurrentTime,
		(out_time));

	return(out_time);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgDateTime MsgGetCurrentTime()
{
	TibrvMsgDateTime out_time;

	return(MsgGetCurrentTime(out_time));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgField &MsgGetField(const TibrvMsg &msg, const char *field_name,
	TibrvMsgField &msg_field, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getField,
		(field_name, msg_field, field_id));

	return(msg_field);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgField &MsgGetField(const TibrvMsg &msg, const std::string &field_name,
	TibrvMsgField &msg_field, tibrv_u16 field_id)
{
	return(MsgGetField(msg, field_name.c_str(), msg_field, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgField &MsgGetFieldByIndex(const TibrvMsg &msg,
	TibrvMsgField &msg_field, unsigned int field_index)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getFieldByIndex,
		(msg_field, field_index));

	return(msg_field);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgField &MsgGetFieldInstance(const TibrvMsg &msg, const char *field_name,
	TibrvMsgField &msg_field, unsigned int field_instance)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getFieldInstance,
		(field_name, msg_field, field_instance));

	return(msg_field);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsgField &MsgGetFieldInstance(const TibrvMsg &msg,
	const std::string &field_name, TibrvMsgField &msg_field,
	unsigned int field_instance)
{
	return(MsgGetFieldInstance(msg, field_name.c_str(), msg_field,
		field_instance));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
tibrvMsg MsgGetHandle(const TibrvMsg &msg)
{
	return(msg.getHandle());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgGetMsg(const TibrvMsg &msg, const char *field_name,
	TibrvMsg &sub_msg, tibrv_u16 field_id)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).getMsg,
		(field_name, sub_msg, field_id));

	return(sub_msg);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgGetMsg(const TibrvMsg &msg, const std::string &field_name,
	TibrvMsg &sub_msg, tibrv_u16 field_id)
{
	return(MsgGetMsg(msg, field_name.c_str(), sub_msg, field_id));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
unsigned int MsgGetNumFields(const TibrvMsg &msg)
{
	tibrv_u32 num_fields;

	RvUtilX_THROW_TIBRV_STATUS_IF(msg.getNumFields,
		(num_fields));

	return(num_fields);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *MsgGetReplySubjectPtr(const TibrvMsg &msg)
{
	return(GetReplySubjectPtr(msg));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &MsgGetReplySubject(const TibrvMsg &msg, std::string &subject_name)
{
	return(GetReplySubject(msg, subject_name));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string MsgGetReplySubject(const TibrvMsg &msg)
{
	return(GetReplySubject(msg));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *MsgGetSendSubjectPtr(const TibrvMsg &msg)
{
	return(GetSendSubjectPtr(msg));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &MsgGetSendSubject(const TibrvMsg &msg, std::string &subject_name)
{
	return(GetSendSubject(msg, subject_name));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string MsgGetSendSubject(const TibrvMsg &msg)
{
	return(GetSendSubject(msg));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TibrvStatus MsgGetStatus(const TibrvMsg &msg)
{
	return(msg.getStatus());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool MsgIsDetached(const TibrvMsg &msg)
{
	return((msg.isDetached()) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const TibrvMsg &MsgMarkReferences(const TibrvMsg &msg)
{
	RvUtilX_THROW_TIBRV_STATUS_IF(const_cast<TibrvMsg &>(msg).markReferences,
		());

	return(msg);
}
// ////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvStatus MsgRemoveField(TibrvMsg &msg, const char *field_name,
	tibrv_u16 field_id)
{
	TibrvStatus rv_status = msg.removeField(field_name, field_id);

	if ((rv_status != TIBRV_OK) && (rv_status != TIBRV_NOT_FOUND) &&
		(rv_status != TIBRV_ID_CONFLICT))
		ThrowTibrvStatus(rv_status,
			"Unable to detach a field instance with 'TibrvMsg.removeField()'");

	return(rv_status);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvStatus MsgRemoveField(TibrvMsg &msg, const std::string &field_name,
	tibrv_u16 field_id)
{
	return(MsgRemoveField(msg, field_name.c_str(), field_id));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool MsgRemoveFieldInstance(TibrvMsg &msg, const char *field_name,
	unsigned int field_instance)
{
	TibrvStatus rv_status = msg.removeFieldInstance(field_name, field_instance);

	if ((rv_status != TIBRV_OK) && (rv_status != TIBRV_NOT_FOUND))
		ThrowTibrvStatus(rv_status,
			"Unable to detach a ield instance with "
			"'TibrvMsg.removeFieldInstance()'");

	return(rv_status == TIBRV_OK);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool MsgRemoveFieldInstance(TibrvMsg &msg, const std::string &field_name,
	unsigned int field_instance)
{
	return(MsgRemoveFieldInstance(msg, field_name.c_str(), field_instance));
}
//	////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void MsgReset(TibrvMsg &msg)
{
	try {
		RvUtilX_THROW_TIBRV_STATUS_IF(msg.reset,
			());
	}
	catch (const std::exception &except) {
		MLB::Utility::Rethrow(except,
			std::string("Attempt to reset a TibrvMsg object failed: ") +
			except.what());
	}
}
// ////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgSetReplySubject(TibrvMsg &msg, const char *subject_name)
{
	return(SetReplySubject(msg, subject_name));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgSetReplySubject(TibrvMsg &msg, const std::string &subject_name)
{
	return(SetReplySubject(msg, subject_name));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgSetSendSubject(TibrvMsg &msg, const char *subject_name)
{
	return(SetSendSubject(msg, subject_name));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
TibrvMsg &MsgSetSendSubject(TibrvMsg &msg, const std::string &subject_name)
{
	return(SetSendSubject(msg, subject_name));
}
//	////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &MsgToByteArray(const TibrvMsg &msg, std::string &out_string)
{
	try {
		RvMsgSnapshotContext rvmsg_snapshot(msg);
		unsigned int  msg_byte_length = MsgGetByteSize(msg);
		const void   *msg_byte_ptr    = MsgGetAsBytes(msg);
		std::string(static_cast<const char *>(msg_byte_ptr), msg_byte_length).
			swap(out_string);
	}
	catch (const std::exception &except) {
		MLB::Utility::Rethrow(except,
			std::string("Attempt to get the bytes representing a TibrvMsg object "
			"failed: ") + except.what());
	}

	return(out_string);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string MsgToByteArray(const TibrvMsg &msg)
{
	std::string out_string;

	return(MsgToByteArray(msg, out_string));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace RvUtilX

} // namespace MLB

