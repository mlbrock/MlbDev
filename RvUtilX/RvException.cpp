// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	TibCo/Rendezvous Support Library Module
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the RvUtilX exception classes.

	Revision History	:	2001-10-01 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2001 - 2014.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <RvUtilX.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace RvUtilX {

//	////////////////////////////////////////////////////////////////////////////
RvException::RvException()
	:ExceptionGeneral("Unspecified TibCo/Rendezvous exception.")
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvException::RvException(const char *except_string)
	:ExceptionGeneral(except_string)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvException::RvException(const std::string &except_string)
	:ExceptionGeneral(except_string)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvException::RvException(const std::ostringstream &except_string)
	:ExceptionGeneral(except_string)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvException::~RvException()
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void RvException::Rethrow(const char *except_string) const
{
	RvException tmp_except(*this);

	tmp_except.SetWhat(except_string);

	throw tmp_except;
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus()
	:RvException()
	,rv_status_(TIBRV_OK)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const char *except_string)
	:RvException(except_string)
	,rv_status_(TIBRV_OK)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const std::string &except_string)
	:RvException(except_string)
	,rv_status_(TIBRV_OK)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const std::ostringstream &except_string)
	:RvException(except_string)
	,rv_status_(TIBRV_OK)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(tibrv_status rv_status)
	:RvException(GetStatusString(rv_status))
	,rv_status_(rv_status)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(tibrv_status rv_status,
	const char *except_string)
	:RvException(GetStatusString(rv_status, except_string))
	,rv_status_(rv_status)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(tibrv_status rv_status,
	const std::string &except_string)
	:RvException(GetStatusString(rv_status, except_string.c_str()))
	,rv_status_(rv_status)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(tibrv_status rv_status,
	const std::ostringstream &except_string)
	:RvException(GetStatusString(rv_status, except_string.str().c_str()))
	,rv_status_(rv_status)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const TibrvStatus &rv_status)
	:RvException(GetStatusString(rv_status))
	,rv_status_(rv_status.getCode())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const TibrvStatus &rv_status,
	const char *except_string)
	:RvException(GetStatusString(rv_status, except_string))
	,rv_status_(rv_status.getCode())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const TibrvStatus &rv_status,
	const std::string &except_string)
	:RvException(GetStatusString(rv_status, except_string.c_str()))
	,rv_status_(rv_status.getCode())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::RvExceptionStatus(const TibrvStatus &rv_status,
	const std::ostringstream &except_string)
	:RvException(GetStatusString(rv_status, except_string.str().c_str()))
	,rv_status_(rv_status.getCode())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionStatus::~RvExceptionStatus()
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
tibrv_status RvExceptionStatus::GetStatus() const
{
	return(rv_status_);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void RvExceptionStatus::Rethrow(const char *except_string) const
{
	RvExceptionStatus tmp_except(*this);

	tmp_except.SetWhat(except_string);

	throw tmp_except;
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string RvExceptionStatus::GetStatusString(const TibrvStatus &rv_status,
	const char *other_text)
{
	return(GetStatusString(rv_status.getCode(), other_text));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string RvExceptionStatus::GetStatusString(tibrv_status rv_status,
	const char *other_text)
{
	std::ostringstream status_string;

	status_string << "TibCo/Rendezvous exception resulted from status " <<
		"code = " << rv_status << ", status text = '" <<
		tibrvStatus_GetText(rv_status) << "'" <<
		((other_text != NULL) ? ": " : "") <<
		((other_text != NULL) ? other_text : "");

	return(status_string.str());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut()
	:RvException("TibCo/Rendezvous function timed-out.")
	,time_out_(-1.0)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(const char *except_string)
	:RvException(except_string)
	,time_out_(-1.0)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(const std::string &except_string)
	:RvException(except_string)
	,time_out_(-1.0)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(const std::ostringstream &except_string)
	:RvException(except_string)
	,time_out_(-1.0)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(double time_out)
	:RvException(GetTimeOutString(time_out))
	,time_out_(time_out)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(double time_out,
	const char *except_string)
	:RvException(GetTimeOutString(time_out, except_string))
	,time_out_(time_out)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(double time_out,
	const std::string &except_string)
	:RvException(GetTimeOutString(time_out, except_string.c_str()))
	,time_out_(time_out)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::RvExceptionTimeOut(double time_out,
	const std::ostringstream &except_string)
	:RvException(GetTimeOutString(time_out, except_string.str().c_str()))
	,time_out_(time_out)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
RvExceptionTimeOut::~RvExceptionTimeOut()
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
double RvExceptionTimeOut::GetTimeOut() const
{
	return(time_out_);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void RvExceptionTimeOut::Rethrow(const char *except_string) const
{
	RvExceptionTimeOut tmp_except(*this);

	tmp_except.SetWhat(except_string);

	throw tmp_except;
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string RvExceptionTimeOut::GetTimeOutString(double time_out,
	const char *other_text)
{
	std::ostringstream time_out_string;

	time_out_string << "TibCo/Rendezvous exception resulted from a wait " <<
		"which exceeded the specified time-out period (" << time_out <<
		" seconds)"<< ((other_text != NULL) ? ": " : "") <<
		((other_text != NULL) ? other_text : "");

	return(time_out_string.str());
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace RvUtilX

} // namespace MLB

