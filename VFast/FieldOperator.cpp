// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	VFast Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Support for the FieldOperator enumeration.

	Revision History	:	2008-11-15 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2008 - 2016.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <VFast/FieldOperator.hpp>
#include <VFast/VFastException.hpp>

#include <Utility/C_StringSupport.hpp>
#include <Utility/ValueToStringRadix.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace VFast {

namespace {
// ////////////////////////////////////////////////////////////////////////////
const char *FieldOperatorNameList[FieldOperator_Count] = {
	"None",
	"Constant",
	"Copy",
	"Default",
	"Delta",
	"Increment",
	"Tail"
};
// ////////////////////////////////////////////////////////////////////////////
} // Anonymous namespace

// ////////////////////////////////////////////////////////////////////////////
bool FieldOperatorIsValid(FieldOperator field_operator)
{
	return((field_operator >= FieldOperator_Min) &&
		(field_operator <= FieldOperator_Max));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
FieldOperator CheckFieldOperator(FieldOperator field_operator)
{
	if (!FieldOperatorIsValid(field_operator))
		MLB::Utility::ThrowInvalidArgument("Invalid field operator (" +
			FieldOperatorToString(field_operator) + ").");
		
	return(field_operator);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool IsFieldOperatorString(const std::string &in_field_operator,
	FieldOperator &out_field_operator)
{
	unsigned int count_1;

	for (count_1 = 0; count_1 < FieldOperator_Count; ++count_1) {
		if (!MLB::Utility::Utility_stricmp(in_field_operator.c_str(),
			FieldOperatorNameList[count_1])) {
			out_field_operator = static_cast<FieldOperator>(count_1);
			return(true);
		}
	}

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool IsFieldOperatorString(const std::string &in_field_operator)
{
	FieldOperator out_field_operator;

	return(IsFieldOperatorString(in_field_operator, out_field_operator));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string FieldOperatorToString(FieldOperator field_operator)
{
	return((FieldOperatorIsValid(field_operator)) ?
		FieldOperatorNameList[field_operator] :
		MLB::Utility::ValueToStringHex(field_operator));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
FieldOperator StringToFieldOperator(const std::string &field_operator)
{
	FieldOperator out_field_operator = FieldOperator_None;

	if (!IsFieldOperatorString(field_operator, out_field_operator))
		MLB::Utility::ThrowInvalidArgument("Invalid field operator string ('" +
			field_operator + "').");

	return(out_field_operator);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::ostream & operator << (std::ostream &o_str, const FieldOperator &datum)
{
	o_str << FieldOperatorToString(datum);

	return(o_str);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace VFast

} // namespace MLB

