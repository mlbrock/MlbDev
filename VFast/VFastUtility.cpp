// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	VFast Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of various support and utility functions
								for the VFast library.

	Revision History	:	2008-11-14 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2008 - 2018.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <VFast/VFastUtility.hpp>

#include <Utility/ToHexString.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace VFast {

// ////////////////////////////////////////////////////////////////////////////
std::string ToHexString(const StreamDatum *begin_ptr,
	const StreamDatum *end_ptr)
{
	return(MLB::Utility::ToHexString(
		static_cast<std::size_t>(end_ptr - begin_ptr),
		reinterpret_cast<const char *>(begin_ptr), ' '));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string ToHexStringDebug(const StreamDatum *begin_ptr,
	const StreamDatum *end_ptr)
{
	std::ostringstream o_str;

	const StreamDatum *tmp_end_ptr = std::min(end_ptr, begin_ptr + 10);

	o_str << std::left << std::setw((10 * 2) + 9) <<
		ToHexString(begin_ptr, tmp_end_ptr) << std::right <<
		(((end_ptr - begin_ptr) > 10) ? ">" : " ");

	return(o_str.str());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string ToHexString(std::size_t data_length, const StreamDatum *data_ptr)
{
	return(ToHexString(data_ptr, data_ptr + data_length));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string ToHexStringDebug(std::size_t data_length,
	const StreamDatum *data_ptr)
{
	return(ToHexStringDebug(data_ptr, data_ptr + data_length));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace VFast

} // namespace MLB

