//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	MLB Utility Library Module File
//	////////////////////////////////////////////////////////////////////////////
/*
	File Name  			:	%M%

	File Version      :	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the TZSetInfo class.

	Revision History	:	2009-07-01 --- Creation
									Michael L. Brock

		Copyright Michael L. Brock 2009 - 2017.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
//	////////////////////////////////////////////////////////////////////////////
 
//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	Required include files...
//	////////////////////////////////////////////////////////////////////////////

#include <Utility/TZSetInfo.hpp>

//	////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
TZSetInfo::TZSetInfo()
	:timezone_(InvokeTZSet())
	,daylight_(GetDaylight())
{
	tzname_[0] = GetTZName()[0];
	tzname_[1] = GetTZName()[1];
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TZSetInfo::TZSetInfo(const TZSetInfo &other)
	:timezone_(other.timezone_)
	,daylight_(other.daylight_)
{
	tzname_[0] = other.tzname_[0];
	tzname_[1] = other.tzname_[1];
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TZSetInfo & TZSetInfo::operator = (const TZSetInfo &other)
{
	timezone_  = other.timezone_;
	daylight_  = other.daylight_;
	tzname_[0] = other.tzname_[0];
	tzname_[1] = other.tzname_[1];

	return(*this);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetSecondsOffset(const struct tm *local_tm) const
{
	return(timezone_ +
		(((timezone_ < 0) ? -1 : 1) * ((local_tm->tm_isdst > 0) ? 3600 : 0)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetSecondsOffset(const struct tm &local_tm) const
{
	return(GetSecondsOffset(&local_tm));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetSecondsOffset(std::time_t in_time) const
{
	return(GetSecondsOffset(TimeTM::TimeLocal(in_time)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetSecondsOffset(const TimeT &in_time) const
{
	return(GetSecondsOffset(in_time.GetUnderlying()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetSecondsOffset() const
{
	return(GetSecondsOffset(::time(NULL)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::GetTimezone()
{
#ifdef _MSC_VER
	return(_timezone);
#else
	return(timezone);
#endif // #ifdef _MSC_VER
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
int TZSetInfo::GetDaylight()
{
#ifdef _MSC_VER
	return(_daylight);
#else
	return(daylight);
#endif // #ifdef _MSC_VER
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
char **TZSetInfo::GetTZName()
{
#ifdef _MSC_VER
	return(_tzname);
#else
	return(tzname);
#endif // #ifdef _MSC_VER
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::time_t TZSetInfo::InvokeTZSet()
{
#ifdef _MSC_VER
	_tzset();
#else
	tzset();
#endif // #ifdef _MSC_VER

	return(GetTimezone());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::ostream & operator << (std::ostream &o_str, const TZSetInfo &datum)
{
	o_str
		<< "TZ Secs="   << datum.timezone_  << ", "
		<< "DST Flag="  << datum.daylight_  << ", "
		<< "TZ Name 1=" << datum.tzname_[0] << ", "
		<< "TZ Name 2=" << datum.tzname_[1]
			;

	return(o_str);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

#ifdef TEST_MAIN

#include <cstdlib>

using namespace MLB::Utility;

//	////////////////////////////////////////////////////////////////////////////
int main()
{
	int return_code = EXIT_SUCCESS;

	std::cout << "Test routine for class 'TZSetInfo'" << std::endl;
	std::cout << "---- ------- --- ----- -----------" << std::endl;

	try {
		MLB::Utility::TZSetInfo  tzset_info;
		const char              *date_1 = "2009-01-01";
		const char              *date_2 = "2009-07-01";
		std::cerr << tzset_info << std::endl;
		std::cerr << "Seconds Offset " << date_1 << ": " << std::setw(10) <<
			tzset_info.GetSecondsOffset(MLB::Utility::TimeT::FromString(date_1)) <<
			std::endl;
		std::cerr << "Seconds Offset " << date_2 << ": " << std::setw(10) <<
			tzset_info.GetSecondsOffset(MLB::Utility::TimeT::FromString(date_2)) <<
			std::endl;
	}
	catch (const std::exception &except) {
		std::cout << std::endl << std::endl;
		std::cout << "ERROR: " << except.what() << std::endl;
		return_code = EXIT_FAILURE;
	}

	return(return_code);
}
//	////////////////////////////////////////////////////////////////////////////

#endif // #ifdef TEST_MAIN

