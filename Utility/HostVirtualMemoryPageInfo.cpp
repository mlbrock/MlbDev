// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	MLB Utility Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the HostVirtualMemoryPageInfo class.

	Revision History	:	2006-01-07 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2006 - 2018.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility/HostVirtualMemoryPageInfo.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
HostVirtualMemoryPageInfo::HostVirtualMemoryPageInfo()
	:page_size_(GetPageSize())
	,page_alloc_granularity_size_(GetPageAllocGranularitySize())
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void HostVirtualMemoryPageInfo::swap(HostVirtualMemoryPageInfo &other)
{
	std::swap(page_size_, other.page_size_);
	std::swap(page_alloc_granularity_size_, other.page_alloc_granularity_size_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool HostVirtualMemoryPageInfo::operator < (
	const HostVirtualMemoryPageInfo &other) const
{
	return(Compare(other) < 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool HostVirtualMemoryPageInfo::operator == (
	const HostVirtualMemoryPageInfo &other) const
{
	return(Compare(other) == 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool HostVirtualMemoryPageInfo::operator != (
	const HostVirtualMemoryPageInfo &other) const
{
	return(!(*this == other));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
int HostVirtualMemoryPageInfo::Compare(
	const HostVirtualMemoryPageInfo &other) const
{
	int cmp;

	if ((cmp = (static_cast<int>(page_size_) -
		static_cast<int>(other.page_size_))) == 0)
		cmp = static_cast<int>(page_alloc_granularity_size_) -
			static_cast<int>(other.page_alloc_granularity_size_);

	return(cmp);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string  HostVirtualMemoryPageInfo::ToString() const
{
	std::string out_string;

	return(ToString(out_string));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &HostVirtualMemoryPageInfo::ToString(std::string &out_string) const
{
	std::ostringstream o_str;

	o_str <<
		"pageSize = "                      << page_size_ << ", " <<
		"pageAllocationGranularitySize = " << page_alloc_granularity_size_;

	return(out_string.assign(o_str.str()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string  HostVirtualMemoryPageInfo::ToStringLines(
	unsigned int padding, const std::string &separator) const
{
	std::string out_string;

	return(ToStringLines(out_string, padding, separator));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string &HostVirtualMemoryPageInfo::ToStringLines(std::string &out_string,
	unsigned int padding, const std::string &separator) const
{
	std::ostringstream o_str;

	o_str <<
		std::left << std::setw(static_cast<std::streamsize>(padding)) <<
			"pageSize"                     <<
			std::right << separator << page_size_ << std::endl <<
		std::left << std::setw(static_cast<std::streamsize>(padding)) <<
			"pageAllocationGranularitySize" <<
			std::right << separator << page_alloc_granularity_size_;

	return(out_string.assign(o_str.str()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::ostream & operator << (std::ostream &o_str,
	const HostVirtualMemoryPageInfo &datum)
{
	o_str <<
		datum.ToString();

	return(o_str);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

