// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	29 West LBM API Wrapper Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Header file for logic which supports interaction with
								the LBM logger.

	Revision History	:	2008-08-16 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2008 - 2017.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__LbmWrapper__LbmLogSupport_hpp__HH

#define HH__MLB__LbmWrapper__LbmLogSupport_hpp__HH	1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <LbmWrapper/LbmWrapper.hpp>

#include <Utility/LogLevel.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace LbmWrapper {

//	////////////////////////////////////////////////////////////////////////////
class LbmLoggerOStream : public LbmLogCallbackCRTP<LbmLoggerOStream> {
	std::ostream &ostream_ref_;

	MLB_Utility_NonCopyable_Macro(LbmLoggerOStream);

public:
	LbmLoggerOStream(std::ostream &o_str)
		:ostream_ref_(o_str)
	{
	}

	int LbmLogCallBackImpl(int level, const char *message);
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
class LbmLoggerCout : public LbmLoggerOStream {
	MLB_Utility_NonCopyable_Macro(LbmLoggerCout);

public:
	LbmLoggerCout()
		:LbmLoggerOStream(std::cout)
	{
	}
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
class LbmLoggerCerr : public LbmLoggerOStream {
	MLB_Utility_NonCopyable_Macro(LbmLoggerCerr);

public:
	LbmLoggerCerr()
		:LbmLoggerOStream(std::cerr)
	{
	}
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
class LbmLoggerClog : public LbmLoggerOStream {
	MLB_Utility_NonCopyable_Macro(LbmLoggerClog);

public:
	LbmLoggerClog()
		:LbmLoggerOStream(std::clog)
	{
	}
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
MLB::Utility::LogLevel MapLbmLogLevel(int lbm_log_level);
void LbmLog(lbm_log_cb_proc call_back, void *user_data_ptr = NULL);
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <typename FunctorType> void LbmLog(FunctorType &cb_functor)
{
	LbmLog(FunctorType::LbmLogCallBack, &cb_functor);
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace LbmWrapper

} // namespace MLB

#endif // #ifndef HH__MLB__LbmWrapper__LbmLogSupport_hpp__HH

