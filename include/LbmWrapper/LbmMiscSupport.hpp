// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	29 West LBM API Wrapper Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Header file for miscellaneous LBM wrapper logic.

	Revision History	:	2008-08-16 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 2008 - 2015.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__LbmWrapper__LbmMiscSupport_hpp__HH

#define HH__MLB__LbmWrapper__LbmMiscSupport_hpp__HH	1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <LbmWrapper/LbmWrapper.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace LbmWrapper {

// ////////////////////////////////////////////////////////////////////////////
void LbmLicenseFile(const char *licfile);
void LbmLicenseFile(const std::string &licfile);

void LbmLicenseStr(const char *licstr);
void LbmLicenseStr(const std::string &licstr);

void LbmConfig(const char *fname);
void LbmConfig(const std::string &fname);
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
int  LbmScheduleTimer(lbm_context_t *ctx, lbm_timer_cb_proc proc, void *clientd,
	lbm_event_queue_t *evq, lbm_ulong_t delay);
int  LbmScheduleTimerRecurring(lbm_context_t *ctx, lbm_timer_cb_proc proc,
	void *clientd, lbm_event_queue_t *evq, lbm_ulong_t delay);
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
int  LbmEventDispatch(lbm_event_queue_t *evq, lbm_ulong_t tmo);
void LbmEventDispatchUnblock(lbm_event_queue_t *evq);
int  LbmEventQueueSize(lbm_event_queue_t *evq);
void LbmEventQueueShutdown(lbm_event_queue_t *evq);
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *GetOptimalLbmFdManagementType();

bool        GetLbmConfigFileFromCmdLine(unsigned int &current_index, int argc,
	char **argv, std::string &out_datum, bool require_existence = true);
// ////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string  LbmGetIncludeFileVersion(bool tnw_format = false,
	bool use_tag = true);
unsigned int LbmGetIncludeFileVersionCombined();
//	////////////////////////////////////////////////////////////////////////////

} // namespace LbmWrapper

} // namespace MLB

#endif // #ifndef HH__MLB__LbmWrapper__LbmMiscSupport_hpp__HH

