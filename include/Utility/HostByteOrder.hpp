// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name			:	%M%

	File Version		:	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Include file for generic host byte order manipulation
								logic.

	Revision History	:	1998-04-08 --- Creation
									Michael L. Brock

		Copyright Michael L. Brock 1998 - 2014.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__HostByteOrder_hpp__HH

#define HH__MLB__Utility__HostByteOrder_hpp__HH	1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
	\file HostByteOrder.hpp

	\brief	The HostByteOrder header file.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility.hpp>

#include <mbtypes.h>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

//	////////////////////////////////////////////////////////////////////////////
#ifdef _MSC_VER
//	Hacked from Linux 2.6 /usr/include/bits/byteswap.h.
# define HackedByteSwapConstant_64(x)													\
	(  ((static_cast<unsigned long long>(x) & 0xff00000000000000ull) >> 56)	\
	 | ((static_cast<unsigned long long>(x) & 0x00ff000000000000ull) >> 40)	\
	 | ((static_cast<unsigned long long>(x) & 0x0000ff0000000000ull) >> 24)	\
	 | ((static_cast<unsigned long long>(x) & 0x000000ff00000000ull) >>  8)	\
	 | ((static_cast<unsigned long long>(x) & 0x00000000ff000000ull) <<  8)	\
	 | ((static_cast<unsigned long long>(x) & 0x0000000000ff0000ull) << 24)	\
	 | ((static_cast<unsigned long long>(x) & 0x000000000000ff00ull) << 40)	\
	 | ((static_cast<unsigned long long>(x) & 0x00000000000000ffull) << 56))
#elif defined(__linux__)
# include <byteswap.h>
# define HackedByteSwapConstant_64(x) __bswap_64(x)
#else
# error "Implementation of macro 'HackedByteSwapConstant_64' needs to be specified."
#endif // #ifdef _MSC_VER
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <typename DataType> inline
	DataType NetToHostOrder(const DataType &datum)
{
	return(datum);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt16 NetToHostOrder<Native_UInt16>(const Native_UInt16 &datum)
{
	return(ntohs(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt16 NetToHostOrder<Native_SInt16>(const Native_SInt16 &datum)
{
	return(static_cast<Native_SInt16>(
		NetToHostOrder(static_cast<Native_UInt16>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt32 NetToHostOrder<Native_UInt32>(const Native_UInt32 &datum)
{
	return(ntohl(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt32 NetToHostOrder<Native_SInt32>(const Native_SInt32 &datum)
{
	return(static_cast<Native_SInt32>(
		NetToHostOrder(static_cast<Native_UInt32>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt64 NetToHostOrder<Native_UInt64>(const Native_UInt64 &datum)
{
	return(HackedByteSwapConstant_64(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt64 NetToHostOrder<Native_SInt64>(const Native_SInt64 &datum)
{
	return(static_cast<Native_SInt64>(
		NetToHostOrder(static_cast<Native_UInt64>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_Float32 NetToHostOrder<Native_Float32>(const Native_Float32 &datum)
{
	Native_UInt32 result =
		NetToHostOrder(*reinterpret_cast<const Native_UInt32 *>(&datum));

	return(*reinterpret_cast<const Native_Float32 *>(&result));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_Float64 NetToHostOrder<Native_Float64>(const Native_Float64 &datum)
{
	Native_UInt64 result =
		NetToHostOrder(*reinterpret_cast<const Native_UInt64 *>(&datum));

	return(*reinterpret_cast<const Native_Float64 *>(&result));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <typename DataType> inline
	DataType HostToNetOrder(const DataType &datum)
{
	return(datum);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt16 HostToNetOrder<Native_UInt16>(const Native_UInt16 &datum)
{
	return(htons(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt16 HostToNetOrder<Native_SInt16>(const Native_SInt16 &datum)
{
	return(static_cast<Native_SInt16>(
		HostToNetOrder(static_cast<Native_UInt16>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt32 HostToNetOrder<Native_UInt32>(const Native_UInt32 &datum)
{
	return(htonl(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt32 HostToNetOrder<Native_SInt32>(const Native_SInt32 &datum)
{
	return(static_cast<Native_SInt32>(
		HostToNetOrder(static_cast<Native_UInt32>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_UInt64 HostToNetOrder<Native_UInt64>(const Native_UInt64 &datum)
{
	return(HackedByteSwapConstant_64(datum));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_SInt64 HostToNetOrder<Native_SInt64>(const Native_SInt64 &datum)
{
	return(static_cast<Native_SInt64>(
		HostToNetOrder(static_cast<Native_UInt64>(datum))));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_Float32 HostToNetOrder<Native_Float32>(const Native_Float32 &datum)
{
	Native_UInt32 result =
		HostToNetOrder(*reinterpret_cast<const Native_UInt32 *>(&datum));

	return(*reinterpret_cast<const Native_Float32 *>(&result));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <> inline
	Native_Float64 HostToNetOrder<Native_Float64>(const Native_Float64 &datum)
{
	Native_UInt64 result =
		HostToNetOrder(*reinterpret_cast<const Native_UInt64 *>(&datum));

	return(*reinterpret_cast<const Native_Float64 *>(&result));
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

#endif // #ifndef HH__MLB__Utility__HostByteOrder_hpp__HH

