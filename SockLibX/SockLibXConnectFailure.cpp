//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	SockLibX Portable Socket Library Source Module
//	////////////////////////////////////////////////////////////////////////////
/*
	File Name  			:	%M%

	File Version      :	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the SockLibXConnectFailure class.

	Revision History	:	2002-01-26 --- Creation
									Michael L. Brock

		Copyright Michael L. Brock 2002 - 2015.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	Include necessary header files . . .
//	////////////////////////////////////////////////////////////////////////////

#include <SockLibX.hpp>

//	////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace SockLibX {

//	////////////////////////////////////////////////////////////////////////////
SockLibXConnectFailure::SockLibXConnectFailure()
	:SockLibXExceptionError(GetStatusString())
	,endpoint_()
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXConnectFailure::SockLibXConnectFailure(const EndPointIP &endpoint,
	const char *except_string)
	:SockLibXExceptionError(false, GetLastSocketErrorCode(),
		GetStatusString(&endpoint, except_string))
	,endpoint_(endpoint)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXConnectFailure::SockLibXConnectFailure(const EndPointIP &endpoint,
	const std::string &except_string, SocketErrorCode error_code)
	:SockLibXExceptionError(false, error_code, except_string.c_str())
	,endpoint_(endpoint)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXConnectFailure::~SockLibXConnectFailure() MBCOMPAT_EXCEPT_NOTHROW
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP SockLibXConnectFailure::GetEndPoint() const
{
	return(endpoint_);
}
//	////////////////////////////////////////////////////////////////////////////
	
//	////////////////////////////////////////////////////////////////////////////
void SockLibXConnectFailure::Rethrow(const char *except_string) const
{
	SockLibXConnectFailure tmp_except(*this);

	tmp_except.SetWhat(except_string);

	throw tmp_except;
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string SockLibXConnectFailure::GetStatusString(
	const EndPointIP *endpoint_ptr, const char *other_text)
{
	std::ostringstream status_string;

	if ((other_text != NULL) && *other_text)
		status_string << other_text << ": ";

	status_string << "Socket connection attempt failure";

	if (endpoint_ptr != NULL)
		status_string << " to endpoint " << *endpoint_ptr;

	return(status_string.str());
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace SockLibX

} // namespace MLB

