//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	SockLibX Portable Socket Library Source Module
//	////////////////////////////////////////////////////////////////////////////
/*
	File Name  			:	%M%

	File Version      :	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the SockLibXExceptionError class.

	Revision History	:	2002-01-26 --- Creation
									Michael L. Brock

		Copyright Michael L. Brock 2002 - 2018.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	Include necessary header files . . .
//	////////////////////////////////////////////////////////////////////////////

#include <SockLibX.hpp>

//	////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace SockLibX {

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError()
	:MLB::Utility::ExceptionSystemError(GetLastSocketErrorCode(),
		GetStatusString())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(const char *except_string)
	:MLB::Utility::ExceptionSystemError(GetLastSocketErrorCode(),
		GetStatusString(except_string))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(
	const std::string &except_string)
	:MLB::Utility::ExceptionSystemError(GetLastSocketErrorCode(),
		GetStatusString(except_string.c_str()))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(
	const std::ostringstream &except_string)
	:MLB::Utility::ExceptionSystemError(GetLastSocketErrorCode(),
		GetStatusString(except_string.str().c_str()))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(SocketErrorCode error_code)
	:MLB::Utility::ExceptionSystemError(error_code,
		GetStatusString(error_code))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(SocketErrorCode error_code,
	const char *except_string)
	:MLB::Utility::ExceptionSystemError(error_code,
		GetStatusString(error_code, except_string))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(SocketErrorCode error_code,
	const std::string &except_string)
	:MLB::Utility::ExceptionSystemError(error_code,
		GetStatusString(error_code, except_string.c_str()))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(SocketErrorCode error_code,
	const std::ostringstream &except_string)
	:MLB::Utility::ExceptionSystemError(error_code,
		GetStatusString(error_code, except_string.str().c_str()))
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(bool,
	SocketErrorCode error_code, const char *except_string)
	:MLB::Utility::ExceptionSystemError(false, error_code, except_string)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(bool,
	SocketErrorCode error_code, const std::string &except_string)
	:MLB::Utility::ExceptionSystemError(false, error_code, except_string.c_str())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(bool, const char *except_string)
	:MLB::Utility::ExceptionSystemError(false, GetLastSocketErrorCode(),
		except_string)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::SockLibXExceptionError(bool,
	const std::string &except_string)
	:MLB::Utility::ExceptionSystemError(false, GetLastSocketErrorCode(),
		except_string.c_str())
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
SockLibXExceptionError::~SockLibXExceptionError() MBCOMPAT_EXCEPT_NOTHROW
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool SockLibXExceptionError::IsInitialConnectFailure() const
{
	return((whatcode() == SocketError_TimedOut) ||
		(whatcode() == SocketError_ConnRefused));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool SockLibXExceptionError::IsPeerConnectShutdown() const
{
	return((whatcode() == SocketError_ConnReset) ||
		(whatcode() == SocketError_ConnAborted));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool SockLibXExceptionError::IsWouldBlock() const
{
	return(whatcode() == SocketError_WouldBlock);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void SockLibXExceptionError::Rethrow(const char *except_string) const
{
	SockLibXExceptionError tmp_except(*this);

	tmp_except.SetWhat(except_string);

	throw tmp_except;
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string SockLibXExceptionError::GetStatusString(const char *other_text)
{
	return(GetStatusString(GetLastSocketErrorCode(), other_text));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string SockLibXExceptionError::GetStatusString(SocketErrorCode error_code,
	const char *other_text)
{
	std::ostringstream status_string;

	status_string <<
		(((other_text != NULL) && *other_text) ? other_text :
		"Socket error") << ": " << GetSocketErrorString(error_code);

	return(status_string.str());
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace SockLibX

} // namespace MLB

