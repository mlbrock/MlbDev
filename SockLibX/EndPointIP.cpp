//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	SockLibX Portable Socket Library Source Module
//	////////////////////////////////////////////////////////////////////////////
/*
	File Name  			:	%M%

	File Version      :	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Implementation of the EndPointIP class.

	Revision History	:	2002-01-26 --- Creation
									Michael L. Brock

		Copyright Michael L. Brock 2002 - 2014.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
//	////////////////////////////////////////////////////////////////////////////
//	Include necessary header files . . .
//	////////////////////////////////////////////////////////////////////////////

#include <SockLibX.hpp>

#ifdef linux
# include <memory.h>
#endif // #ifdef linux

//	////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace SockLibX {

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP() :
	 address_()
	,port_(0)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const NativeSockAddr &in_sockaddr) :
	 address_()
	,port_(0)
{
	SetAddressAndPort(in_sockaddr);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const NativeSockAddr_In &in_sockaddr_in) :
	 address_()
	,port_(0)
{
	SetAddressAndPort(in_sockaddr_in);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const AddressIP &in_address, int in_port)
	:address_()
	,port_(0)
{
	SetAddressAndPort(in_address, in_port);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const AddressIP &in_address, const char *in_port)
	:address_()
	,port_(0)
{
	SetAddressAndPort(in_address, in_port);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const AddressIP &in_address,
	const std::string &in_port)
	:address_()
	,port_(0)
{
	SetAddressAndPort(in_address, in_port);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(int in_port, AddressFamily in_address_family)
	:address_()
	,port_(0)
{
	SetAddressAndPortLocalAny(in_port, in_address_family);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const char *in_port, AddressFamily in_address_family)
	:address_()
	,port_(0)
{
	SetAddressAndPortLocalAny(in_port, in_address_family);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const std::string &in_port,
	AddressFamily in_address_family)
	:address_()
	,port_(0)
{
	SetAddressAndPortLocalAny(in_port, in_address_family);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP::EndPointIP(const EndPointIP &other)
	:address_(other.address_)
	,port_(other.port_)
{
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP & EndPointIP::operator = (const EndPointIP &other)
{
	EndPointIP tmp_datum(other);

	swap(tmp_datum);

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void EndPointIP::swap(EndPointIP &other)
{
	address_.swap(other.address_);
	std::swap(port_, other.port_);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const std::string &in_address,
	const std::string &in_port)
{
	SetAddress(in_address.c_str());

	return(SetPort(in_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const char *in_address, int in_port)
{
	SetAddress(in_address);

	return(SetPort(in_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const AddressIP &in_address,
	int in_port)
{
	SetAddress(in_address);

	return(SetPort(in_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const AddressIP &in_address,
	const char *in_port)
{
	SetAddress(in_address);

	return(SetPort(in_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const AddressIP &in_address,
	const std::string &in_port)
{
	SetAddress(in_address);

	return(SetPort(in_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(const NativeSockAddr &in_sockaddr)
{
	NativeSockAddr_In tmp_addr;

	memcpy(&tmp_addr, &in_sockaddr, sizeof(tmp_addr));

	return(SetAddressAndPort(tmp_addr));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPort(
	const NativeSockAddr_In &in_sockaddr_in)
{
	SetAddress(in_sockaddr_in.sin_addr);

	return(SetPort(ntohs(in_sockaddr_in.sin_port)));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPortLocalAny(int port,
	AddressFamily address_family)
{
	NativeSockAddr_In this_address;

	memset(&this_address, '\0', sizeof(this_address));

	this_address.sin_family      = static_cast<short>(address_family);
	this_address.sin_port        = htons(static_cast<unsigned short>(port));
	this_address.sin_addr.s_addr = INADDR_ANY;

	return(SetAddressAndPort(this_address));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPortLocalAny(const char *port,
	AddressFamily address_family)
{
	SetAddressAndPortLocalAny(0, address_family);

	return(SetPort(port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddressAndPortLocalAny(const std::string &port,
	AddressFamily address_family)
{
	SetAddressAndPortLocalAny(0, address_family);

	return(SetPort(port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(long in_address)
{
	AddressIP tmp_address(in_address);

	address_ = tmp_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(unsigned long in_address)
{
	AddressIP tmp_address(in_address);

	address_ = tmp_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(const unsigned char *in_address)
{
	AddressIP tmp_address(in_address);

	address_ = tmp_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(const char *in_address)
{
	AddressIP tmp_address(in_address);

	address_ = tmp_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(const std::string &in_address)
{
	AddressIP tmp_address(in_address);

	address_ = tmp_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(const AddressIP &in_address)
{
	address_ = in_address;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetAddress(const struct in_addr &in_addr_in)
{
#ifdef linux
	SetAddress(reinterpret_cast<const unsigned char *>(&in_addr_in));
#else
	SetAddress(&in_addr_in.S_un.S_un_b.s_b1);
#endif // #ifdef linux

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetPort(int in_port)
{
	if ((port_ < 0) || (port_ > std::numeric_limits<unsigned short>::max())) {
		std::ostringstream error_string;
		error_string << "Invalid IP port/service specified (" << in_port <<
			") --- valid range is 0 to " <<
			std::numeric_limits<unsigned short>::max() << ", inclusive.";
		throw SockLibXException(error_string);
	}

	port_ = in_port;

	return(*this);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetPort(const char *in_port)
{
	int  tmp_port;
	char npsl_error_text[NPSL_MAX_ERROR_TEXT];

	if (NPSL_ResolveServToPort(in_port, NULL, &tmp_port, npsl_error_text) !=
		NPSL_SUCCESS)
		throw SockLibXException(npsl_error_text);

	return(SetPort(tmp_port));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
EndPointIP &EndPointIP::SetPort(const std::string &in_port)
{
	return(SetPort(in_port.c_str()));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
AddressIP EndPointIP::GetAddress() const
{
	return(address_);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string EndPointIP::GetHostIPAddress() const
{
	return(address_.GetHostIPAddress());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string EndPointIP::GetHostIPAddressZeroFilled() const
{
	return(address_.GetHostIPAddressZeroFilled());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string EndPointIP::GetHostId() const
{
	return(address_.GetHostId());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string EndPointIP::GetHostName() const
{
	return(address_.GetHostName());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
int EndPointIP::GetPort() const
{
	return(port_);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
unsigned short EndPointIP::GetPortInNetworkOrder() const
{
	return(htons(static_cast<unsigned short>(port_)));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
struct in_addr EndPointIP::GetInAddr() const
{
	return(address_.GetInAddr());
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
NativeSockAddr_In EndPointIP::GetSockaddrIn() const
{
	return(GetSockaddrIn(AddressFamily_Internet));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
NativeSockAddr_In EndPointIP::GetSockaddrIn(AddressFamily address_family) const
{
	NativeSockAddr_In tmp_addr = address_.GetSockaddrIn(address_family);

	tmp_addr.sin_port = GetPortInNetworkOrder();

	return(tmp_addr);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
NativeSockAddr EndPointIP::GetSockaddr() const
{
	return(GetSockaddr(AddressFamily_NONE));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
NativeSockAddr EndPointIP::GetSockaddr(AddressFamily address_family) const
{
	NativeSockAddr tmp_sockaddr = address_.GetSockaddr(address_family);

	reinterpret_cast<NativeSockAddr_In *>(&tmp_sockaddr)->sin_port =
		GetPortInNetworkOrder();

	return(tmp_sockaddr);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::string EndPointIP::ToString() const
{
	return(GetHostId() + ":" + MLB::Utility::AnyToString(port_));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator <  (const EndPointIP &other) const
{
	return(Compare(this, &other) <  0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator >  (const EndPointIP &other) const
{
	return(Compare(this, &other) >  0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator <= (const EndPointIP &other) const
{
	return(Compare(this, &other) <= 0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator >= (const EndPointIP &other) const
{
	return(Compare(this, &other) >= 0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator == (const EndPointIP &other) const
{
	return(Compare(this, &other) == 0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
bool EndPointIP::operator != (const EndPointIP &other) const
{
	return(Compare(this, &other) != 0);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
int EndPointIP::Compare(const EndPointIP &other) const
{
	return(Compare(this, &other));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
int EndPointIP::Compare(const EndPointIP *ptr_1, const EndPointIP *ptr_2)
{
	int cmp = AddressIP::Compare(&ptr_1->address_, &ptr_2->address_);

	return((cmp) ? cmp : (ptr_1->port_ - ptr_2->port_));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
std::ostream & operator << (std::ostream &o_str, const EndPointIP &datum)
{
	o_str <<
		datum.ToString();

	return(o_str);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
void swap(EndPointIP &arg_1, EndPointIP &arg_2)
{
	arg_1.swap(arg_2);
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace SockLibX

} // namespace MLB

