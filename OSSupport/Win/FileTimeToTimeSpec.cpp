// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	MLB Operating System Support (OSSupport) Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
	File Name  			:	%M%

	File Version      :	%I%

	Last Extracted		:	%D%	%T%

	Last Updated		:	%E%	%U%

	File Description	:	Converts from Windows 'FILETIME' structures to
								'MLB::Utility::TimeSpec' structures.

	Revision History	:	1998-04-08 --- Creation.
									Michael L. Brock

		Copyright Michael L. Brock 1998 - 2015.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <OSSupport_Win.h>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace OSSupport {

//	////////////////////////////////////////////////////////////////////////////
union OS_WIN32_FILETIME_64 {
	FILETIME         filetime;
	unsigned __int64 u_scalar;
 };
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
MLB::Utility::TimeSpec &FileTimeToTimeSpecAbsolute(const FILETIME &src,
	MLB::Utility::TimeSpec &dst)
{
	OS_WIN32_FILETIME_64 tmp_src;

	tmp_src.filetime = src;

	if (tmp_src.u_scalar >= OS_WIN32_FILETIME_EPOCH_BIAS) {
		dst.tv_sec  =
			static_cast<long>((tmp_src.u_scalar - OS_WIN32_FILETIME_EPOCH_BIAS) /
			10000000i64);
		dst.tv_nsec =
			static_cast<long>((tmp_src.u_scalar * 100i64) % 1000000000i64);
	}
	else
		MLB::Utility::TimeSpec(0, 0).swap(dst);

	return(dst);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
MLB::Utility::TimeSpec FileTimeToTimeSpecAbsolute(const FILETIME &src)
{
	MLB::Utility::TimeSpec dst;

	return(FileTimeToTimeSpecAbsolute(src, dst));
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
MLB::Utility::TimeSpec &FileTimeToTimeSpecInterval(const FILETIME &src,
	MLB::Utility::TimeSpec &dst)
{
	OS_WIN32_FILETIME_64 tmp_src;

	tmp_src.filetime = src;

	dst.tv_sec  = static_cast<long>((tmp_src.u_scalar / 10i64) / 1000000i64);
	dst.tv_nsec = static_cast<long>((tmp_src.u_scalar / 10i64) % 1000000000i64);

	return(dst);
}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
MLB::Utility::TimeSpec FileTimeToTimeSpecInterval(const FILETIME &src)
{
	MLB::Utility::TimeSpec dst;

	return(FileTimeToTimeSpecInterval(src, dst));
}
//	////////////////////////////////////////////////////////////////////////////

} // namespace OSSupport

} // namespace MLB

